{"arrayliststack": {"distance": 1.25, "methods": ["org.apache.wicket.util.collections.arrayliststack.peek()", "org.apache.wicket.util.collections.arrayliststack.pop()", "org.apache.wicket.util.collections.arrayliststack.arrayliststack()", "org.apache.wicket.util.collections.arrayliststack.push(object)", "org.apache.wicket.util.collections.arrayliststack.arrayliststack(int)"]}, "request": {"distance": 0.9375, "methods": ["org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.<clinit>()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.detach(requestcycle)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfotest.pagecomponentinfotest()", "org.apache.wicket.request.request()", "org.apache.wicket.ng.request.mapper.bufferedresponsemapper.bufferedresponsemapper()", "org.apache.wicket.request.obsoleterequestparameters.setbehaviorid(string)", "org.apache.wicket.request.obsoleterequestparameters.getparameters()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.pathfortarget(irequesttarget)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class;pageparameters)", "org.apache.wicket.ng.request.component.pageparametersng.pageparametersng()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest.urlcompressingwebrequestprocessortest()", "org.apache.wicket.ng.request.mapper.abstractmapper.abstractmapper()", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.bookmarkablemapper(pageparametersencoder)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;isharedresourcerequesttarget)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest.abstractresourcereferenceencodertest()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$10.abstractresourcereferenceencodertest$10(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.request.obsoleterequestparameters.getresourcekey()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.gettarget()", "org.apache.wicket.ng.request.mapper.mountedmappertest$1.mountedmappertest$1(mountedmappertest;string;class)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$9.abstractresourcereferenceencodertest$9(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.newpage(class;requestcycle)", "org.apache.wicket.ng.request.mapper.parameters.simplepageparametersencoder.simplepageparametersencoder()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.requesthandlerstacktest()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.webrequestcodingstrategy$mountsmap(boolean)", "org.apache.wicket.ng.request.url.getsegments()", "org.apache.wicket.ng.request.mapper.systemmapper.systemmapper()", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest.<clinit>()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addinterfaceparameters(string;obsoleterequestparameters)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$12.abstractresourcereferenceencodertest$12(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategies()", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest.bookmarkableencodertest()", "org.apache.wicket.request.target.coding.querystringurlcodingstrategytest.<clinit>()", "org.apache.wicket.request.target.coding.webrequestencoder.webrequestencoder(appendingstringbuffer)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageclass()", "org.apache.wicket.request.getobsoleterequestparameters()", "org.apache.wicket.request.obsoleterequestparameters.setpath(string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.webrequestcodingstrategy$mountsmap$1()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.cryptedurlwebrequestcodingstrategytest()", "org.apache.wicket.ng.request.mapper.abstractencodertest.abstractencodertest()", "org.apache.wicket.request.obsoleterequestparameters.setpagemapname(string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$2.abstractresourcereferenceencodertest$2(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.mapper.abstractmapper.getmountsegments(string)", "org.apache.wicket.request.obsoleterequestparameters.geturldepth()", "org.apache.wicket.ng.request.mapper.threadsafecompoundrequestmapper.register(requestmapper)", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.bookmarkablemapper()", "org.apache.wicket.ng.request.mapper.mountedmapper.mountedmapper(string;class)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.getrequestpath(request)", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.resourcereferencemapper()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.getmountencoder(irequesttarget)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$4.abstractresourcereferenceencodertest$4(abstractresourcereferenceencodertest)", "org.apache.wicket.request.obsoleterequestparameters.setquerystring(string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$6.abstractresourcereferenceencodertest$6(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.mapper.info.componentinfotest.componentinfotest()", "org.apache.wicket.request.obsoleterequestparameters.getbehaviorid()", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.<clinit>()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest.indexedsharedresourcecodingstrategytest()", "org.apache.wicket.request.obsoleterequestparameters.obsoleterequestparameters()", "org.apache.wicket.request.obsoleterequestparameters.setresourcekey(string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$settings.webrequestcodingstrategy$settings()", "org.apache.wicket.request.abstractrequestcycleprocessor.getrequestcodingstrategy()", "org.apache.wicket.ng.request.url.decodesegment(string)", "org.apache.wicket.request.obsoleterequestparameters.setbookmarkablepageclass(string)", "org.apache.wicket.ng.request.mapper.pageinstancemappertest$1.pageinstancemappertest$1(pageinstancemappertest)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest.indexedhybridurlcodingstrategytest()", "org.apache.wicket.ng.request.mapper.testmappercontext.testmappercontext()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.mixedparamurlcodingstrategytest()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.webrequestcodingstrategy(settings)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.decode(request)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$5.abstractresourcereferenceencodertest$5(abstractresourcereferenceencodertest)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;irequesttarget)", "org.apache.wicket.request.obsoleterequestparameters.setparameters(map)", "org.apache.wicket.request.abstractrequestcycleprocessor.respond(requestcycle)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.getresourcekey()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestlistenerinterface()", "org.apache.wicket.ng.request.mapper.mountedmappertest.mountedmappertest()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$11.abstractresourcereferenceencodertest$11(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addbookmarkablepageparameters(request;obsoleterequestparameters)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.decodepagemapname(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.cryptedurlwebrequestcodingstrategytest$1(cryptedurlwebrequestcodingstrategytest)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ilistenerinterfacerequesttarget)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$3.abstractresourcereferenceencodertest$3(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.cycle.urlrenderertest.urlrenderertest()", "org.apache.wicket.ng.request.mapper.resourcereferenceencodertest.resourcereferenceencodertest()", "org.apache.wicket.request.target.coding.querystringurlcodingstrategytest.querystringurlcodingstrategytest()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.<clinit>()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ibookmarkablepagerequesttarget)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$settings.aremountscasesensitive()", "org.apache.wicket.ng.request.mapper.pageinstancemapper.pageinstancemapper()", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.resourcereferencemapper(pageparametersencoder)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.abstractbookmarkablemapper()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface;obsoleterequestparameters)", "org.apache.wicket.ng.request.mapper.pageinstancemappertest.pageinstancemappertest()", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest$1.bookmarkableencodertest$1(bookmarkableencodertest)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage(requestcycle)", "org.apache.wicket.ng.request.mapper.resourcereferenceencodertest$1.resourcereferenceencodertest$1(resourcereferenceencodertest)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$1.abstractresourcereferenceencodertest$1(abstractresourcereferenceencodertest)", "org.apache.wicket.request.target.component.pagerequesttarget.pagerequesttarget(page)", "org.apache.wicket.ng.request.urltest.urltest()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addinterfaceparameters(request;obsoleterequestparameters)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageparameters()", "org.apache.wicket.request.abstractrequestcycleprocessor.processevents(requestcycle)", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.behaviorrequesttarget(page;component;requestlistenerinterface;obsoleterequestparameters)", "org.apache.wicket.request.abstractrequestcycleprocessor.abstractrequestcycleprocessor()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestparameters()", "org.apache.wicket.request.target.coding.statelessstatefullurlcodingstrategytest.statelessstatefullurlcodingstrategytest()", "org.apache.wicket.request.obsoleterequestparameters.seturldepth(int)", "org.apache.wicket.request.target.coding.webrequestencoder.addvalue(string;string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$8.abstractresourcereferenceencodertest$8(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addresourceparameters(request;obsoleterequestparameters)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.sharedresourcerequesttarget(obsoleterequestparameters)", "org.apache.wicket.request.target.coding.urlmountingtest.urlmountingtest()", "org.apache.wicket.request.target.coding.indexparamwithstatelessiframetest.indexparamwithstatelessiframetest()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$7.abstractresourcereferenceencodertest$7(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.<clinit>()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.getrequestparameters()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.respond(requestcycle)", "org.apache.wicket.ng.request.mapper.mountedmapper.mountedmapper(string;class;pageparametersencoder)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage()", "org.apache.wicket.ng.request.mapper.threadsafecompoundrequestmapper.threadsafecompoundrequestmapper()", "org.apache.wicket.ng.request.url.parse(string)", "org.apache.wicket.ng.request.mapper.mountedmappertest$2.mountedmappertest$2(mountedmappertest;string;class)", "org.apache.wicket.ng.request.url.url()", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.abstractresourcereferencemapper()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.webrequestcodingstrategy()"]}, "session": {"distance": 0.9852, "methods": ["org.apache.wicket.session.nextsequencevalue()", "org.apache.wicket.session.getid()", "org.apache.wicket.session.getattribute(string)", "org.apache.wicket.session.issessioninvalidated()", "org.apache.wicket.session.findorcreate(request;response)", "org.apache.wicket.session.unset()", "org.apache.wicket.session.bind()", "org.apache.wicket.session.findorcreate()", "org.apache.wicket.session.defaultpagefactory.constructor(class)", "org.apache.wicket.session.session(request)", "org.apache.wicket.session.dirty()", "org.apache.wicket.session.getauthorizationstrategy()", "org.apache.wicket.session.getsessionstore()", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.attach()", "org.apache.wicket.session.invalidatesessiontest.invalidatesessiontest()", "org.apache.wicket.session.getapplication()", "org.apache.wicket.session.defaultpagefactory.createpage(constructor;object)", "org.apache.wicket.session.exists()", "org.apache.wicket.session.detach()", "org.apache.wicket.session.getlocale()", "org.apache.wicket.session.set(session)", "org.apache.wicket.session.get()", "org.apache.wicket.session.requestdetached()", "org.apache.wicket.session.istemporary()", "org.apache.wicket.session.<clinit>()", "org.apache.wicket.session.defaultpagefactorytest.defaultpagefactorytest(string)", "org.apache.wicket.session.setattribute(string;serializable)", "org.apache.wicket.session.getstyle()", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.getpagemanager()", "org.apache.wicket.session.nextpageid()"]}, "metadatakey": {"distance": 1.25, "methods": ["org.apache.wicket.metadatakey.get(metadataentry[])", "org.apache.wicket.metadatakey.set(metadataentry[];object)", "org.apache.wicket.metadatakey.metadatakey()", "org.apache.wicket.metadatakey.equals(object)"]}, "response": {"distance": 1.0, "methods": ["org.apache.wicket.response.stringresponse.write(charsequence)", "org.apache.wicket.response.response()", "org.apache.wicket.response.stringresponse.stringresponse()", "org.apache.wicket.response.<clinit>()", "org.apache.wicket.response.stringresponse.getbuffer()", "org.apache.wicket.response.println(charsequence)", "org.apache.wicket.response.stringresponsetest.stringresponsetest()"]}, "requestcycle": {"distance": 0.9944, "methods": ["org.apache.wicket.requestcycle.urlfor(resourcereference;valuemap)", "org.apache.wicket.requestcycle.getresponse()", "org.apache.wicket.requestcycle.urlfor(irequesttarget)", "org.apache.wicket.requestcycle.onrequesttargetset(irequesttarget)", "org.apache.wicket.requestcycle.getresponsepage()", "org.apache.wicket.requestcycle.isredirect()", "org.apache.wicket.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.requestcycle.urlfor(component;ibehavior;requestlistenerinterface)", "org.apache.wicket.requestcycle.getoriginalresponse()", "org.apache.wicket.requestcycle.encodeurlfor(irequesttarget)", "org.apache.wicket.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.requestcycle.get()", "org.apache.wicket.requestcycle.safegetrequestprocessor()", "org.apache.wicket.requestcycle.onendrequest()", "org.apache.wicket.requestcycle.set(requestcycle)", "org.apache.wicket.requestcycle.threaddetach()", "org.apache.wicket.requestcycle.setpageparameters(pageparameters)", "org.apache.wicket.requestcycle.step()", "org.apache.wicket.requestcycle.requestcycle(application;request;response)", "org.apache.wicket.requestcycle.onaftertargetsdetached()", "org.apache.wicket.requestcycle.setautomaticallyclearfeedbackmessages(boolean)", "org.apache.wicket.requestcycle.urlfor(resourcereference)", "org.apache.wicket.requestcycle.getrequest()", "org.apache.wicket.requestcycle.request(irequesttarget)", "org.apache.wicket.requestcycle.steps()", "org.apache.wicket.requestcycle.setresponse(response)", "org.apache.wicket.requestcycle.<clinit>()", "org.apache.wicket.requestcycle.sessionexists()", "org.apache.wicket.requestcycle.getapplication()", "org.apache.wicket.requestcycle.checkreuse()", "org.apache.wicket.requestcycle.detach()", "org.apache.wicket.requestcycle.getrequesttarget()", "org.apache.wicket.requestcycle.getsession()", "org.apache.wicket.requestcycle.processeventsandrespond()"]}, "application": {"distance": 0.9929, "methods": ["org.apache.wicket.application.get()", "org.apache.wicket.application.newpagemanager()", "org.apache.wicket.ng.application.exists()", "org.apache.wicket.application.getmarkupsettings()", "org.apache.wicket.application.addcomponentinstantiationlistener(icomponentinstantiationlistener)", "org.apache.wicket.application.getrequestlogger()", "org.apache.wicket.application.defaultclassresolver.getresources(string)", "org.apache.wicket.application.notifyrenderheadlistener(iheaderresponse)", "org.apache.wicket.ng.application.get()", "org.apache.wicket.ng.application.<clinit>()", "org.apache.wicket.application.application()", "org.apache.wicket.application.logresponsetarget(irequesttarget)", "org.apache.wicket.application.notifycomponentinstantiationlisteners(component)", "org.apache.wicket.application.newconverterlocator()", "org.apache.wicket.application.unset()", "org.apache.wicket.application.notifypostcomponentonbeforerenderlisteners(component)", "org.apache.wicket.application.callinitializers()", "org.apache.wicket.application.setrootrequestmapper(requestmapper)", "org.apache.wicket.application.configure()", "org.apache.wicket.application.getsettings()", "org.apache.wicket.application.getpagesettings()", "org.apache.wicket.application.set(application)", "org.apache.wicket.application.getdebugsettings()", "org.apache.wicket.application.getpagemanagercontext()", "org.apache.wicket.application.internaldestroy()", "org.apache.wicket.application.getsharedresources()", "org.apache.wicket.application.getpagemanager()", "org.apache.wicket.application.load(properties)", "org.apache.wicket.application.<clinit>()", "org.apache.wicket.application.defaultclassresolver.resolveclass(string)", "org.apache.wicket.application.getapplicationsettings()", "org.apache.wicket.application.calldestroyers()", "org.apache.wicket.application.internalinit()", "org.apache.wicket.application.getrequestloggersettings()", "org.apache.wicket.application.addinitializer(string)", "org.apache.wicket.application.initializecomponents()", "org.apache.wicket.application.getsecuritysettings()", "org.apache.wicket.application.notifycomponentonafterrenderlisteners(component)", "org.apache.wicket.application.logeventtarget(irequesttarget)", "org.apache.wicket.application.exists()", "org.apache.wicket.application.getframeworksettings()", "org.apache.wicket.application.getresourcesettings()", "org.apache.wicket.application.defaultclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.defaultclassresolver.defaultclassresolver()", "org.apache.wicket.application.getexceptionsettings()", "org.apache.wicket.application.getsessionstore()", "org.apache.wicket.application.ondestroy()", "org.apache.wicket.application.getname()", "org.apache.wicket.application.getsessionsettings()", "org.apache.wicket.application.notifyprecomponentonbeforerenderlisteners(component)", "org.apache.wicket.application.getrequestcyclesettings()"]}, "feedbackmessages": {"distance": 0.85, "methods": ["org.apache.wicket.feedback.feedbackmessages.<clinit>()", "org.apache.wicket.feedback.feedbackmessages.feedbackmessages()"]}}