{"arrayliststack": {"distance": 1.25, "methods": ["org.apache.wicket.util.collections.arrayliststack.pop()", "org.apache.wicket.util.collections.arrayliststack.peek()", "org.apache.wicket.util.collections.arrayliststack.push(object)", "org.apache.wicket.util.collections.arrayliststack.arrayliststack()", "org.apache.wicket.util.collections.arrayliststack.arrayliststack(int)"]}, "request": {"distance": 0.9375, "methods": ["org.apache.wicket.ng.request.handler.defaultpageprovider.defaultpageprovider(irequestablepage)", "org.apache.wicket.ng.request.cycle.requesthandlerstack.executerequesthandler(irequesthandler)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.urlencodequerycomponent(string)", "org.apache.wicket.request.target.coding.urlmountingtest.geterrorcode(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$11.respond(requestcycle)", "org.apache.wicket.ng.request.component.pageparametersng$entry.access$102(entry;string)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfotest.testpageinfoonly(pagecomponentinfo;integer)", "org.apache.wicket.ng.request.mapper.threadsafecompoundrequestmapper.register(irequestmapper)", "org.apache.wicket.ng.request.mapper.abstractencodertest.checkpage(irequestablepage;int)", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.resourcereferencemapper()", "org.apache.wicket.ng.request.mapper.mountedmapper.checkhomepage(url)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$602(requesthandlerstacktest;boolean)", "org.apache.wicket.ng.request.handler.impl.bookmarkablepagerequesthandler.getpageparameters()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getpath()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class;pageparameters)", "org.apache.wicket.ng.request.component.pageparametersng.pageparametersng()", "org.apache.wicket.ng.request.mapper.testmappercontext.setnextpagerendercount(int)", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.mixedparamurlcodingstrategy(string;class;string[])", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.bookmarkablelistenerinterfacerequesttarget(string;class;pageparameters;component;requestlistenerinterface)", "org.apache.wicket.ng.request.mapper.abstractmapper.abstractmapper()", "org.apache.wicket.ng.request.urltest.checksegments(url;string[])", "org.apache.wicket.ng.request.mapper.parameters.simplepageparametersencoder.encodepageparameters(pageparametersng)", "org.apache.wicket.ng.request.handler.pageandcomponentprovider.getcomponent()", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.listenerinterfacerequesttarget(page;component;requestlistenerinterface;obsoleterequestparameters)", "org.apache.wicket.ng.request.cycle.requesthandlerstack.getresponse()", "org.apache.wicket.ng.request.handler.defaultpageprovider.prepareforrendernewpage()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.webrequestcodingstrategy$mountsmap(boolean)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$8.respond(requestcycle)", "org.apache.wicket.ng.request.mapper.info.componentinfo.getcomponentpath()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.<clinit>()", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.processhybrid(pageinfo;class;pageparametersng;integer)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$12.abstractresourcereferenceencodertest$12(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$9.abstractresourcereferenceencodertest$9(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.ng.request.component.pageparametersng.getindexedparamscount()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$002(requesthandlerstacktest;boolean)", "org.apache.wicket.request.obsoleterequestparameters.setcomponentpath(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.shortenurl(charsequence)", "org.apache.wicket.ng.request.handler.impl.bookmarkablepagerequesthandler.bookmarkablepagerequesthandler(ipageprovider)", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest.bookmarkableencodertest()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$8.requesthandlerstacktest$8(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageclass()", "org.apache.wicket.ng.request.handler.defaultpageprovider.getpagesource()", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest$testpage$2.indexedhybridurlcodingstrategytest$testpage$2(testpage;string)", "org.apache.wicket.request.target.coding.statefulpage.getlinkclickcount()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.indexedsharedresourcecodingstrategy(string;string)", "org.apache.wicket.ng.request.mapper.abstractencodertest.abstractencodertest()", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.respond(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$11.detach(requestcycle)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.getpageparameters()", "org.apache.wicket.ng.request.url.parsequeryparameter(string)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource$1.write(outputstream)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.encoderesourcereferenceattributes(url;resourcereference)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.tostring()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageparametersmetadatakey.hybridurlcodingstrategy$pageparametersmetadatakey(1)", "org.apache.wicket.request.obsoleterequestparameters.setversionnumber(int)", "org.apache.wicket.ng.request.cycle.requesthandlerstack$replacehandlerexception.requesthandlerstack$replacehandlerexception(irequesthandler;boolean)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest$testpage$1.indexedhybridurlcodingstrategytest$testpage$1(testpage;string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.targetforrequest(obsoleterequestparameters)", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.respond(requestcycle)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.processlistener(pagecomponentinfo;class;pageparametersng)", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.<clinit>()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$11.getresource()", "org.apache.wicket.ng.request.mapper.testmappercontext.getpageinstance(int)", "org.apache.wicket.request.obsoleterequestparameters.geturldepth()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.decodeurl(string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$302(requesthandlerstacktest;boolean)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvelistenerinterfacetarget(requestcycle;page;string;string;obsoleterequestparameters)", "org.apache.wicket.protocol.http.request.webexternalresourcerequesttarget.<clinit>()", "org.apache.wicket.ng.request.cycle.requesthandlerstack.detach()", "org.apache.wicket.request.target.component.componentrequesttarget.componentrequesttarget(component)", "org.apache.wicket.ng.request.mapper.info.componentinfotest.componentinfotest()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.rebuildurl(charsequence)", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.geterrorcode()", "org.apache.wicket.ng.request.url.url(url)", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.getfilename()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$12.respond(requestcycle)", "org.apache.wicket.ng.request.handler.resource.resourcerequesthandler.getstyle()", "org.apache.wicket.ng.request.mapper.testmappercontext.testmappercontext()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getpageparameters(irequesttarget)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.urlcompressor$componentandinterface(intkeyweakreference;string;1)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$6.abstractresourcereferenceencodertest$6(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$202(requesthandlerstacktest;boolean)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvesharedresource(requestcycle;obsoleterequestparameters)", "org.apache.wicket.ng.request.cycle.requesthandlerstack.schedulerequesthandleraftercurrent(irequesthandler)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.cryptedurlwebrequestcodingstrategytest()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.decodeparameters(string;map)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$5.abstractresourcereferenceencodertest$5(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.mapper.pageinstancemapper.maprequest(request)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.tostring()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.detach(requestcycle)", "org.apache.wicket.ng.request.mapper.info.componentinfo.getlistenerinterface()", "org.apache.wicket.ng.request.mapper.abstractmapper.getpageclass(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.encodeurl(charsequence)", "org.apache.wicket.ng.request.url$queryparameter.getname()", "org.apache.wicket.ng.request.url$queryparameter.getvalue()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.decodeparameters(string;map)", "org.apache.wicket.protocol.http.request.urlcompressing.mypage.mypage()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.matches(irequesttarget)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.decode(obsoleterequestparameters)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getpageid()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$intkeyweakreference.urlcompressor$intkeyweakreference(int;object;referencequeue)", "org.apache.wicket.ng.request.mapper.testmappercontext.gethomepageclass()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.encode(irequesttarget)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$10.detach(requestcycle)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.addpageinfo(string;pageinfo)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$settings.aremountscasesensitive()", "org.apache.wicket.request.target.component.componentrequesttarget.respond(requestcycle)", "org.apache.wicket.request.obsoleterequestparameters.getpagemapname()", "org.apache.wicket.request.abstractrequestcycleprocessor.onruntimeexception(page;runtimeexception)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.abstractbookmarkablemapper()", "org.apache.wicket.ng.request.mapper.mountedmapper.mountedmapper(string;class;ipageparametersencoder)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.parsepageinfo(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.setup()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$13.requesthandlerstacktest$13(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.ng.request.handler.resource.resourcereferencerequesthandler.getresourcereference()", "org.apache.wicket.request.abstractrequestcycleprocessor.respond(runtimeexception;requestcycle)", "org.apache.wicket.request.target.coding.statefulpage.access$008(statefulpage)", "org.apache.wicket.ng.request.listener.requestlistenerinterface.<clinit>()", "org.apache.wicket.ng.request.listener.requestlistenerinterface.requestlistenerinterface(class)", "org.apache.wicket.ng.request.mapper.abstractmapper.getplaceholder(string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$9.respond(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.getinterfacename()", "org.apache.wicket.ng.request.mapper.testmappercontext.getpageidentifier()", "org.apache.wicket.request.target.coding.querystringurlcodingstrategytest.querystringurlcodingstrategytest()", "org.apache.wicket.request.target.coding.testpagewithiframe.<clinit>()", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.weberrorcoderesponsetarget(int)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.isredirectonbookmarkablerequest()", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfo.getpageinfo()", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.processevents(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.urlcompressor$componentandinterface(intkeyweakreference;string)", "org.apache.wicket.ng.request.handler.defaultpageprovider.touchpageinstance()", "org.apache.wicket.ng.request.component.pageparametersng.removenamedparameter(string)", "org.apache.wicket.request.abstractrequestcycleprocessor.abstractrequestcycleprocessor()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.detach(requestcycle)", "org.apache.wicket.request.target.coding.statelessstatefullurlcodingstrategytest.statelessstatefullurlcodingstrategytest()", "org.apache.wicket.ng.request.mapper.info.componentinfo.isnumber(string)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.hashcode()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.setup()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageparametersmetadatakey.hybridurlcodingstrategy$pageparametersmetadatakey()", "org.apache.wicket.request.target.coding.webrequestencoder.addvalue(string;string)", "org.apache.wicket.request.target.coding.testpagewithiframe.testpagewithiframe(pageparameters)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$11.requesthandlerstacktest$11(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.hybridurlcodingstrategy(string;class;boolean)", "org.apache.wicket.ng.request.handler.impl.listenerinterfacerequesthandler.listenerinterfacerequesthandler(pageandcomponentprovider;requestlistenerinterface)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$9.getresource()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.urlcompressor()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$7.requesthandlerstacktest$7(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.<clinit>()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.getrequestparameters()", "org.apache.wicket.ng.request.listener.requestlistenerinterface.forname(string)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.appendtoquerystring(appendingstringbuffer;boolean;string;string)", "org.apache.wicket.ng.request.mapper.abstractmapper.urlstartswith(url;string[])", "org.apache.wicket.ng.request.url.url()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$7.respond(requestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.decode(request)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest.setup()", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.abstractrequesttargeturlcodingstrategy(string)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.matches(string;boolean)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebcodingstrategy.encode(requestcycle;ibookmarkablepagerequesttarget)", "org.apache.wicket.ng.request.component.pageparametersng$entry.access$100(entry)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategyforpath(string)", "org.apache.wicket.ng.request.mapper.bufferedresponsemapper.bufferedresponsemapper()", "org.apache.wicket.request.obsoleterequestparameters.setbehaviorid(string)", "org.apache.wicket.request.obsoleterequestparameters.getparameters()", "org.apache.wicket.ng.request.mapper.info.componentinfo.<clinit>()", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.matches(irequesttarget)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest.urlcompressingwebrequestprocessortest()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getinitialpagepageparameters(page)", "org.apache.wicket.ng.request.mapper.abstractmapper.encodepageparameters(url;pageparametersng;ipageparametersencoder)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.newresponse()", "org.apache.wicket.request.target.coding.testpagewithiframe$testframe.oncomponenttag(componenttag)", "org.apache.wicket.ng.request.mapper.mountedmapper.buildurl(urlinfo)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;isharedresourcerequesttarget)", "org.apache.wicket.request.target.coding.urlmountingtest.setup()", "org.apache.wicket.ng.request.mapper.pageinstancemapper.maphandler(irequesthandler)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvebookmarkablepage(requestcycle;obsoleterequestparameters)", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.processevents(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$702(requesthandlerstacktest;boolean)", "org.apache.wicket.ng.request.component.pageparametersng.clearindexedparameters()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.teardown()", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper$urlinfo.getpagecomponentinfo()", "org.apache.wicket.ng.request.url$queryparameter.url$queryparameter(string;string)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.getcomponent()", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.bookmarkablepagerequesttargeturlcodingstrategy(string;class;string)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.setpage(page)", "org.apache.wicket.ng.request.mapper.parameters.simplepageparametersencoder.simplepageparametersencoder()", "org.apache.wicket.ng.request.url.decodeparameter(string)", "org.apache.wicket.ng.request.mapper.info.pageinfo.pageinfo()", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.detach(requestcycle)", "org.apache.wicket.ng.request.url.getsegments()", "org.apache.wicket.ng.request.mapper.systemmapper.systemmapper()", "org.apache.wicket.ng.request.cycle.requesthandlerstack.setresponse(response)", "org.apache.wicket.ng.request.handler.impl.listenerinterfacerequesthandler.getbehaviorindex()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.mount(irequesttargeturlcodingstrategy)", "org.apache.wicket.request.target.coding.querystringurlcodingstrategy.decode(obsoleterequestparameters)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$2.getrequestcycle()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategies()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.writeobject(objectoutputstream)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$12.detach(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$2.gettestpage()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$4.requesthandlerstacktest$4(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.target.coding.webrequestencoder.webrequestencoder(appendingstringbuffer)", "org.apache.wicket.request.getobsoleterequestparameters()", "org.apache.wicket.request.obsoleterequestparameters.seturldepth(int)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.encode(requestcycle;irequesttarget)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$2.requesthandlerstacktest$2(requesthandlerstacktest;response)", "org.apache.wicket.request.obsoleterequestparameters.setpath(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.gettrailingslashescount(charsequence)", "org.apache.wicket.request.target.coding.statelesspage.statelesspage()", "org.apache.wicket.ng.request.cycle.requesthandlerstack.requesthandlerstack(response)", "org.apache.wicket.ng.request.mapper.mountedmappertest$1.getcontext()", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.<clinit>()", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfo.tostring()", "org.apache.wicket.ng.request.url.islastsegmentreal()", "org.apache.wicket.ng.request.mapper.mountedmapper.redirectfromhomepage()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$10.respond(requestcycle)", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.indexedparamurlcodingstrategy(string;class;string)", "org.apache.wicket.request.obsoleterequestparameters.setpagemapname(string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$2.abstractresourcereferenceencodertest$2(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.component.pageparametersng.pageparametersng(pageparametersng)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.matches(irequesttarget)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.getresourcereferenceattributes(url)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.<clinit>()", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.resourcereferencemapper(ipageparametersencoder)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource.getresourcestream()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$2.urlcompressingwebrequestprocessortest$2(urlcompressingwebrequestprocessortest)", "org.apache.wicket.request.obsoleterequestparameters.getpath()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$4.respond(requestcycle)", "org.apache.wicket.ng.request.url.concatsegments(list)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.checkpageclass(class)", "org.apache.wicket.request.obsoleterequestparameters.getbehaviorid()", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.<clinit>()", "org.apache.wicket.request.obsoleterequestparameters.obsoleterequestparameters()", "org.apache.wicket.request.obsoleterequestparameters.setresourcekey(string)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessor.newrequestcodingstrategy()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$4.detach(requestcycle)", "org.apache.wicket.ng.request.url.putqueryparameters(map)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.getcomponentandinterfaceforuid(string)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.getbehaviorindex()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$10.getresource()", "org.apache.wicket.ng.request.handler.impl.renderpagerequesthandler$redirectpolicy.renderpagerequesthandler$redirectpolicy(string;int)", "org.apache.wicket.request.target.coding.statefulpage.statefulpage()", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.listenerinterfacerequesttarget(page;component;requestlistenerinterface)", "org.apache.wicket.ng.request.component.pageparametersng.setnamedparameter(string;object;int)", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.detach(requestcycle)", "org.apache.wicket.request.target.component.listener.redirectpagerequesttarget.redirectpagerequesttarget(page)", "org.apache.wicket.ng.request.handler.impl.listenerinterfacerequesthandler.listenerinterfacerequesthandler(pageandcomponentprovider;requestlistenerinterface;integer)", "org.apache.wicket.request.setobsoleterequestparameters(obsoleterequestparameters)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfotest.testpagecomponentinfo(pagecomponentinfo;integer;string;string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$7.detach(requestcycle)", "org.apache.wicket.ng.request.listener.requestlistenerinterface.registerrequestlistenerinterface(requestlistenerinterface)", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.ng.request.mapper.abstractmapper.requestlistenerinterfacetostring(requestlistenerinterface)", "org.apache.wicket.ng.request.component.pageparametersng.getindexedparameter(int)", "org.apache.wicket.ng.request.mapper.pageinstancemappertest$1.getcontext()", "org.apache.wicket.request.target.component.pagerequesttarget.getpage()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.initflags()", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper$urlinfo.getpageparameters()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebcodingstrategy.encode(requestcycle;ilistenerinterfacerequesttarget)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$11.abstractresourcereferenceencodertest$11(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.maphandler(irequesthandler)", "org.apache.wicket.ng.request.mapper.mountedmappertest$2.mountedmappertest$2(mountedmappertest;string;class)", "org.apache.wicket.request.obsoleterequestparameters.isonlyprocessifpathactive()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfoextraction.getpageinfo()", "org.apache.wicket.request.target.component.pagerequesttarget.tostring()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.decodepagemapname(string)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.urlencodepathcomponent(string)", "org.apache.wicket.ng.request.handler.defaultpageprovider.setpagesource(ipagesource)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$3.abstractresourcereferenceencodertest$3(abstractresourcereferenceencodertest)", "org.apache.wicket.ng.request.component.pageparametersng$entry.pageparametersng$entry(1)", "org.apache.wicket.ng.request.mapper.threadsafecompoundrequestmapper.threadsafecompoundrequestmapper()", "org.apache.wicket.request.abstractrequestcycleprocessor.resolverenderedpage(requestcycle;obsoleterequestparameters)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.maprequest(request)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getpageinfo(irequesttarget)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.pathfortarget(irequesttarget)", "org.apache.wicket.ng.request.cycle.requesthandlerstack.<clinit>()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.getnewuid()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface;obsoleterequestparameters)", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest$1.bookmarkableencodertest$1(bookmarkableencodertest)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$1.newrequestcycleprocessor()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage(requestcycle)", "org.apache.wicket.ng.request.handler.defaultpageprovider.defaultpageprovider(class;pageparametersng)", "org.apache.wicket.ng.request.cycle.requesthandlerstack.replaceallrequesthandlers(irequesthandler)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.encode(irequesttarget)", "org.apache.wicket.request.obsoleterequestparameters.setinterfacename(string)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.getuidforcomponentandinterface(component;string)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.processbookmarkable(class;pageparametersng)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey(1)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ibookmarkablepagerequesttarget)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$6.respond(requestcycle)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$7.getresource()", "org.apache.wicket.ng.request.handler.impl.listenerinterfacerequesthandler.getcomponent()", "org.apache.wicket.ng.request.component.pageparametersng.addnamedparameter(string;object;int)", "org.apache.wicket.protocol.http.request.webexternalresourcerequesttarget.webexternalresourcerequesttarget(string)", "org.apache.wicket.ng.request.urltest.urltest()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageparameters()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource$1.getcontenttype()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.compare(string;string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getparametermap()", "org.apache.wicket.ng.request.url.encodeparameter(string)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestparameters()", "org.apache.wicket.ng.request.mapper.testmappercontext.getresourcereferenceregistry()", "org.apache.wicket.ng.request.mapper.info.componentinfo.parse(string)", "org.apache.wicket.ng.request.mapper.info.pageinfo.pageinfo(irequestablepage)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$8.abstractresourcereferenceencodertest$8(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$12.requesthandlerstacktest$12(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.abstractresourcereferencemapper()", "org.apache.wicket.ng.request.component.pageparametersng$entry.access$000(entry)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.respond(requestcycle)", "org.apache.wicket.ng.request.mapper.info.pageinfo.getpageid()", "org.apache.wicket.request.target.coding.statefulpage$2.onsubmit()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class)", "org.apache.wicket.ng.request.urltest.checkqueryparams(url;string[])", "org.apache.wicket.ng.request.url.removequeryparameters(string)", "org.apache.wicket.ng.request.handler.resource.resourcerequesthandler.resourcerequesthandler(iresource;locale;string;string;pageparametersng)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest.setup()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.onprocessevents(requestcycle)", "org.apache.wicket.request.target.coding.statefulpage$1.onclick()", "org.apache.wicket.ng.request.url.parse(string)", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.behaviorrequesttarget(page;component;requestlistenerinterface;obsoleterequestparameters)", "org.apache.wicket.ng.request.listener.requestlistenerinterface.getname()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebcodingstrategy.urlcompressingwebcodingstrategy()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.extractpageinfo(string)", "org.apache.wicket.ng.request.handler.impl.renderpagerequesthandler.renderpagerequesthandler(ipageprovider;redirectpolicy)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.<clinit>()", "org.apache.wicket.ng.request.url.url(list;list)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.<clinit>()", "org.apache.wicket.protocol.http.request.webexternalresourcerequesttarget.detach(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstack$replacehandlerexception.fillinstacktrace()", "org.apache.wicket.ng.request.mapper.info.pageinfo.pageinfo(integer)", "org.apache.wicket.ng.request.mapper.abstractencodertest$1.geturl()", "org.apache.wicket.request.obsoleterequestparameters.getbookmarkablepageclass()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategyformount(string)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfo.getcomponentinfo()", "org.apache.wicket.ng.request.handler.impl.renderpagerequesthandler.renderpagerequesthandler(ipageprovider)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.detach(requestcycle)", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.bookmarkablemapper(ipageparametersencoder)", "org.apache.wicket.request.request()", "org.apache.wicket.ng.request.mapper.mountedmapper.parserequest(request)", "org.apache.wicket.request.target.component.listener.redirectpagerequesttarget.processevents(requestcycle)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$10.abstractresourcereferenceencodertest$10(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.ng.request.handler.impl.listenerinterfacerequesthandler.getpage()", "org.apache.wicket.ng.request.mapper.mountedmappertest$1.mountedmappertest$1(mountedmappertest;string;class)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getpagemapname()", "org.apache.wicket.request.obsoleterequestparameters.getversionnumber()", "org.apache.wicket.ng.request.component.pageparametersng.assign(pageparametersng)", "org.apache.wicket.ng.request.cycle.requesthandlerstack$replacehandlerexception.access$100(replacehandlerexception)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.<clinit>()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.assertcontains(map;string;string)", "org.apache.wicket.ng.request.mapper.mountedmapper.pagemusthavebeencreatedbookmarkable()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addinterfaceparameters(string;obsoleterequestparameters)", "org.apache.wicket.ng.request.mapper.mountedmappertest.mountedmappertest()", "org.apache.wicket.ng.request.mapper.info.componentinfo.decodecomponentpath(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getquerystring()", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.matches(irequesttarget)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1$1.newrequestcodingstrategy()", "org.apache.wicket.request.target.coding.testpagewithiframe$testframe.onresourcerequested()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getparameter(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.hybridurlcodingstrategy$pageinfo(integer;integer;string)", "org.apache.wicket.ng.request.handler.pageandcomponentprovider.setcomponentpath(string)", "org.apache.wicket.request.target.coding.querystringurlcodingstrategytest.<clinit>()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getoriginaloriginaltrailingslashescount(irequesttarget)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.hashcode()", "org.apache.wicket.ng.request.url.islastsegmentempty()", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.weberrorcoderesponsetarget(int;string)", "org.apache.wicket.ng.request.mapper.mountedmappertest$2.getcontext()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;irequesttarget)", "org.apache.wicket.ng.request.url.isabsolute()", "org.apache.wicket.ng.request.mapper.testmappercontext.newpageinstance(class;pageparametersng)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$802(requesthandlerstacktest;boolean)", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.indexedparamurlcodingstrategy(string;class)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getpageinfoseparator()", "org.apache.wicket.ng.request.mapper.mountedmapper.newpageparameters()", "org.apache.wicket.ng.request.handler.impl.renderpagerequesthandler.getpage()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.getrequestpath(request)", "org.apache.wicket.ng.request.handler.pageandcomponentprovider.pageandcomponentprovider(int;class;pageparametersng;integer;string)", "org.apache.wicket.request.target.coding.querystringurlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest$testpage.indexedhybridurlcodingstrategytest$testpage(pageparameters)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.packagerequesttargeturlcodingstrategy(string;packagename)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource.indexedsharedresourcecodingstrategytest$testresource(1)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$4.abstractresourcereferenceencodertest$4(abstractresourcereferenceencodertest)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$settings.webrequestcodingstrategy$settings()", "org.apache.wicket.ng.request.component.pageparametersng.setnamedparameter(string;object)", "org.apache.wicket.ng.request.mapper.pageinstancemappertest$1.pageinstancemappertest$1(pageinstancemappertest)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.getinterfacename()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.newstack(response)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest.indexedhybridurlcodingstrategytest()", "org.apache.wicket.request.target.component.pagerequesttarget.detach(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$13.detach(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$1.urlcompressingwebrequestprocessortest$1(urlcompressingwebrequestprocessortest)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.compare(object;object)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.gethomepage()", "org.apache.wicket.request.obsoleterequestparameters.getcomponentpath()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.cryptedurlwebrequestcodingstrategy(irequestcodingstrategy)", "org.apache.wicket.ng.request.handler.impl.bookmarkablepagerequesthandler.getpageclass()", "org.apache.wicket.ng.request.url.tostring()", "org.apache.wicket.ng.request.handler.defaultpageprovider.getpageinstance(integer;class;pageparametersng;integer)", "org.apache.wicket.request.obsoleterequestparameters.setparameters(map)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.bookmarkablelistenerinterfacerequesthandler(pageandcomponentprovider;requestlistenerinterface;integer)", "org.apache.wicket.request.target.coding.querystringurlcodingstrategy.querystringurlcodingstrategy(string;class)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.getresourcekey()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestlistenerinterface()", "org.apache.wicket.request.target.coding.statelesspage$1.statelesspage$1(statelesspage;string;textfield)", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.pagemusthavebeencreatedbookmarkable()", "org.apache.wicket.ng.request.component.pageparametersng.getnamedparameters(string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$500(requesthandlerstacktest)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfo.parse(string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ilistenerinterfacerequesttarget)", "org.apache.wicket.ng.request.cycle.urlrenderertest.urlrenderertest()", "org.apache.wicket.ng.request.handler.impl.renderpagerequesthandler.getpageparameters()", "org.apache.wicket.ng.request.mapper.abstractmapper.encodepagecomponentinfo(url;pagecomponentinfo)", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.<clinit>()", "org.apache.wicket.ng.request.cycle.urlrenderer.getbaseurl()", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.ng.request.mapper.pageinstancemapper.pageinstancemapper()", "org.apache.wicket.ng.request.mapper.pageinstancemappertest.pageinstancemappertest()", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.parserequest(request)", "org.apache.wicket.ng.request.listener.requestlistenerinterface.register()", "org.apache.wicket.ng.request.mapper.resourcereferenceencodertest$1.resourcereferenceencodertest$1(resourcereferenceencodertest)", "org.apache.wicket.ng.request.handler.resource.resourcereferencerequesthandler.getpageparameters()", "org.apache.wicket.request.target.coding.urlmountingtest.teardown()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$1.abstractresourcereferenceencodertest$1(abstractresourcereferenceencodertest)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.encode(irequesttarget)", "org.apache.wicket.ng.request.cycle.requesthandlerstack.replacecurrentrequesthandler(irequesthandler)", "org.apache.wicket.ng.request.cycle.urlrenderer.urlrenderer(url)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvehomepagetarget(requestcycle;obsoleterequestparameters)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.newrequestcycleprocessor()", "org.apache.wicket.ng.request.mapper.info.componentinfo.getrendercount()", "org.apache.wicket.ng.request.url.getqueryparameters()", "org.apache.wicket.request.target.coding.testpagewithiframe$testframe.testpagewithiframe$testframe(testpagewithiframe;string)", "org.apache.wicket.ng.request.mapper.info.pageinfo.parse(string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$9.detach(requestcycle)", "org.apache.wicket.ng.request.url.equals(object)", "org.apache.wicket.ng.request.component.pageparametersng.addnamedparameter(string;object)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.getlistenerinterface()", "org.apache.wicket.ng.request.mapper.abstractmapper.getpagecomponentinfo(url)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getversionnumber()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$5.requesthandlerstacktest$5(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.ng.request.url$queryparameter.equals(object)", "org.apache.wicket.request.target.coding.indexparamwithstatelessiframetest.exectest(boolean)", "org.apache.wicket.ng.request.mapper.info.pageinfo.tostring()", "org.apache.wicket.request.obsoleterequestparameters.setquerystring(string)", "org.apache.wicket.ng.request.cycle.requesthandlerstack$replacehandlerexception.access$000(replacehandlerexception)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.decoderesourcereferenceattributes(string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addresourceparameters(request;obsoleterequestparameters)", "org.apache.wicket.request.target.coding.urlmountingtest.urlmountingtest()", "org.apache.wicket.request.target.coding.indexparamwithstatelessiframetest.indexparamwithstatelessiframetest()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.urldecodepathcomponent(string)", "org.apache.wicket.request.target.coding.urlmountingtest.getrequestcodingstrategy()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$6.detach(requestcycle)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfotest.pagecomponentinfotest()", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper.maphandler(irequesthandler)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.bookmarkablelistenerinterfacerequesttarget(string;class;pageparameters;string;string;int)", "org.apache.wicket.ng.request.mapper.info.componentinfo.encodecomponentpath(string)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage()", "org.apache.wicket.ng.request.handler.impl.renderpagerequesthandler$redirectpolicy.<clinit>()", "org.apache.wicket.ng.request.cycle.urlrenderer.renderurl(url)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.webrequestcodingstrategy()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$6.requesthandlerstacktest$6(requesthandlerstacktest;requesthandlerstack;response)", "org.apache.wicket.ng.request.handler.pageandcomponentprovider.pageandcomponentprovider(irequestablepage;irequestablecomponent)", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest$1.getcontext()", "org.apache.wicket.ng.request.handler.defaultpageprovider.setpageclass(class)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$3.respond(requestcycle)", "org.apache.wicket.ng.request.mapper.mountedmapper.checkpageclass(class)", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.resourcestreamrequesttarget(iresourcestream)", "org.apache.wicket.ng.request.handler.defaultpageprovider.getpageinstance()", "org.apache.wicket.request.target.component.componentrequesttarget.detach(requestcycle)", "org.apache.wicket.ng.request.mapper.abstractencodertest.getrequest(url)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessor.urlcompressingwebrequestprocessor()", "org.apache.wicket.ng.request.mapper.info.componentinfo.componentinfo(integer;string;string;integer)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper$urlinfo.abstractbookmarkablemapper$urlinfo(pagecomponentinfo;class;pageparametersng)", "org.apache.wicket.ng.request.mapper.parameters.simplepageparametersencoder.decodepageparameters(request)", "org.apache.wicket.ng.request.mapper.abstractbookmarkablemapper$urlinfo.getpageclass()", "org.apache.wicket.ng.request.handler.defaultpageprovider.getpageclass()", "org.apache.wicket.ng.request.mapper.testmappercontext.getbookmarkableidentifier()", "org.apache.wicket.ng.request.url.access$000(string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest.abstractresourcereferenceencodertest()", "org.apache.wicket.request.obsoleterequestparameters.getresourcekey()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.gettarget()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getbeginseparator()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.isnumber(string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.encoderesourcereferenceattributes(resourcereferenceattributes)", "org.apache.wicket.ng.request.mapper.abstractencodertest$1.abstractencodertest$1(abstractencodertest;url)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ipagerequesttarget)", "org.apache.wicket.ng.request.url.setqueryparameter(string;object)", "org.apache.wicket.ng.request.handler.resource.resourcerequesthandler.getpageparameters()", "org.apache.wicket.ng.request.component.pageparametersng$entry.pageparametersng$entry()", "org.apache.wicket.request.requestwithurl(url)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.tostring()", "org.apache.wicket.ng.request.mapper.bookmarkableencodertest.<clinit>()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.decode(obsoleterequestparameters)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1$1.cryptedurlwebrequestcodingstrategytest$1$1(1)", "org.apache.wicket.ng.request.component.pageparametersng.setindexedparameter(int;object)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$8.getresource()", "org.apache.wicket.ng.request.mapper.abstractmapper.extractpageparameters(request;int;ipageparametersencoder)", "org.apache.wicket.request.target.coding.statefulpage$1.statefulpage$1(statefulpage;string)", "org.apache.wicket.request.target.coding.statefulpage.access$000(statefulpage)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getendseparator()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$402(requesthandlerstacktest;boolean)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.webrequestcodingstrategy$mountsmap$1()", "org.apache.wicket.ng.request.mapper.info.componentinfo.tostring()", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.decode(obsoleterequestparameters)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$3.requesthandlerstacktest$3(requesthandlerstacktest)", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.decode(obsoleterequestparameters)", "org.apache.wicket.ng.request.handler.defaultpageprovider.getpageparameters()", "org.apache.wicket.ng.request.handler.defaultpageprovider.defaultpageprovider(int;integer)", "org.apache.wicket.ng.request.mapper.resourcereferenceencodertest$1.getcontext()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.urlcodingstrategyforpath(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.matches(string;boolean)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.cryptedurlwebrequestcodingstrategy$decodedurlrequest(request;string;string)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper.parselocale(string)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.requesthandlerstacktest()", "org.apache.wicket.request.decodeurl(url)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfoextraction.hybridurlcodingstrategy$pageinfoextraction(string;pageinfo)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategy.indexedhybridurlcodingstrategy(string;class)", "org.apache.wicket.ng.request.mapper.abstractmapper.getmountsegments(string)", "org.apache.wicket.ng.request.component.pageparametersng.getnamedparameterkeys()", "org.apache.wicket.ng.request.mapper.testmappercontext.requestlistenerinterfacetostring(requestlistenerinterface)", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.bookmarkablemapper()", "org.apache.wicket.ng.request.mapper.mountedmapper.mountedmapper(string;class)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.getmountencoder(irequesttarget)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$5.detach(requestcycle)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.webrequestcodingstrategy(settings)", "org.apache.wicket.ng.request.url.encodesegment(string)", "org.apache.wicket.request.target.coding.statelesspage$1.onsubmit()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$8.detach(requestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.<clinit>()", "org.apache.wicket.ng.request.handler.defaultpageprovider.defaultpageprovider(int;class;pageparametersng;integer)", "org.apache.wicket.ng.request.mapper.testmappercontext.getresourceidentifier()", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.getclassname(class)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.newpage(class;requestcycle)", "org.apache.wicket.request.target.coding.testpagewithiframe.access$000()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest.indexedsharedresourcecodingstrategytest()", "org.apache.wicket.ng.request.listener.requestlistenerinterface.tostring()", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.resolveclass(string)", "org.apache.wicket.ng.request.mapper.abstractencodertest.setup()", "org.apache.wicket.ng.request.handler.resource.resourcerequesthandler.getresource()", "org.apache.wicket.request.abstractrequestcycleprocessor.getrequestcodingstrategy()", "org.apache.wicket.ng.request.url.decodesegment(string)", "org.apache.wicket.request.obsoleterequestparameters.setbookmarkablepageclass(string)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.getcomponent()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$5.respond(requestcycle)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.appendvalue(appendingstringbuffer;string;string)", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.mixedparamurlcodingstrategytest()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest.setup()", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.getcomponentpath()", "org.apache.wicket.ng.request.handler.impl.listenerinterfacerequesthandler.getlistenerinterface()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.decode(request)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessor.resolvelistenerinterfacetarget(requestcycle;page;string;string;obsoleterequestparameters)", "org.apache.wicket.ng.request.url$queryparameter.tostring()", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$12.getresource()", "org.apache.wicket.ng.request.mapper.testmappercontext.requestlistenerinterfacefromstring(string)", "org.apache.wicket.request.target.coding.testpage.testpage()", "org.apache.wicket.ng.request.handler.defaultpageprovider.setpageparameters(pageparametersng)", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.configure(requestcycle;response;iresourcestream)", "org.apache.wicket.ng.request.component.pageparametersng.getnamedparameter(string)", "org.apache.wicket.request.abstractrequestcycleprocessor.respond(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest.access$102(requesthandlerstacktest;boolean)", "org.apache.wicket.ng.request.mapper.testmappercontext.getnamespace()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addbookmarkablepageparameters(request;obsoleterequestparameters)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource.indexedsharedresourcecodingstrategytest$testresource()", "org.apache.wicket.ng.request.handler.resource.resourcereferencerequesthandler.resourcereferencerequesthandler(resourcereference;pageparametersng)", "org.apache.wicket.request.target.component.pagerequesttarget.pagerequesttarget(page)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.cryptedurlwebrequestcodingstrategytest$1(cryptedurlwebrequestcodingstrategytest)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$9.requesthandlerstacktest$9(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.rewritestaticrelativeurl(string)", "org.apache.wicket.ng.request.handler.resource.resourcerequesthandler.getlocale()", "org.apache.wicket.ng.request.mapper.resourcereferenceencodertest.resourcereferenceencodertest()", "org.apache.wicket.ng.request.mapper.abstractmapper.requestlistenerinterfacefromstring(string)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.<clinit>()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.ng.request.mapper.info.pagecomponentinfo.pagecomponentinfo(pageinfo;componentinfo)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$1.requesthandlerstacktest$1(requesthandlerstacktest)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.encode(irequesttarget)", "org.apache.wicket.ng.request.component.pageparametersng$entry.access$002(entry;string)", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.decodeparameters(string;map)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.decodeparameters(string;map)", "org.apache.wicket.ng.request.mapper.bookmarkablemapper.buildurl(urlinfo)", "org.apache.wicket.ng.request.mapper.stalepageexception.stalepageexception(irequestablepage)", "org.apache.wicket.ng.request.handler.resource.resourcerequesthandler.getvariation()", "org.apache.wicket.request.obsoleterequestparameters.getcomponentid()", "org.apache.wicket.ng.request.mapper.resourcereferencemapper.maprequest(request)", "org.apache.wicket.ng.request.mapper.abstractresourcereferencemapper$resourcereferenceattributes.abstractresourcereferencemapper$resourcereferenceattributes()", "org.apache.wicket.ng.request.mapper.info.componentinfo.getbehaviorindex()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfoextraction.geturlafterextraction()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addinterfaceparameters(request;obsoleterequestparameters)", "org.apache.wicket.request.abstractrequestcycleprocessor.processevents(requestcycle)", "org.apache.wicket.request.obsoleterequestparameters.tostring()", "org.apache.wicket.request.target.component.pagerequesttarget.respond(requestcycle)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$10.requesthandlerstacktest$10(requesthandlerstacktest;requesthandlerstack)", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.component.pagerequesttarget.hashcode()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.respond(requestcycle)", "org.apache.wicket.request.obsoleterequestparameters.getinterfacename()", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$13.respond(requestcycle)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.bookmarkablelistenerinterfacerequesthandler(pageandcomponentprovider;requestlistenerinterface)", "org.apache.wicket.ng.request.handler.impl.bookmarkablelistenerinterfacerequesthandler.getpage()", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.getmountpath()", "org.apache.wicket.request.target.coding.webrequestencoder.addvalue(string;object)", "org.apache.wicket.request.target.coding.statefulpage$2.statefulpage$2(statefulpage;string;textfield)", "org.apache.wicket.ng.request.cycle.requesthandlerstacktest$3.detach(requestcycle)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.sharedresourcerequesttarget(obsoleterequestparameters)", "org.apache.wicket.ng.request.handler.pageandcomponentprovider.pageandcomponentprovider(int;integer;string)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource$1.indexedsharedresourcecodingstrategytest$testresource$1(testresource)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.mount(string;irequesttargeturlcodingstrategy)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.hybridurlcodingstrategy(string;class)", "org.apache.wicket.ng.request.mapper.abstractresourcereferenceencodertest$7.abstractresourcereferenceencodertest$7(abstractresourcereferenceencodertest;class;string;locale;string;string)", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.componentresourcerequesttarget(page;component;requestlistenerinterface)"]}, "session": {"distance": 0.9868, "methods": ["org.apache.wicket.session.info(string)", "org.apache.wicket.session.getid()", "org.apache.wicket.session.findorcreate(request;response)", "org.apache.wicket.session.invalidatesessiontest$myapp.invalidatesessiontest$myapp()", "org.apache.wicket.session.invalidatesessiontest$myapp.gethomepage()", "org.apache.wicket.session.invalidatesessiontest$mysession.get()", "org.apache.wicket.session.getsessionstore()", "org.apache.wicket.session.httpsessionstore.getsessionattributeprefix(request)", "org.apache.wicket.session.invalidatesessiontest.invalidatesessiontest()", "org.apache.wicket.session.exists()", "org.apache.wicket.session.requestdetached()", "org.apache.wicket.session.istemporary()", "org.apache.wicket.session.<clinit>()", "org.apache.wicket.session.defaultpagefactorytest.defaultpagefactorytest(string)", "org.apache.wicket.session.setlocale(locale)", "org.apache.wicket.session.httpsessionstore.gethttpsession(request;boolean)", "org.apache.wicket.session.httpsessionstore.getsessionid(request;boolean)", "org.apache.wicket.session.nextsequencevalue()", "org.apache.wicket.session.httpsessionstore.destroy()", "org.apache.wicket.session.httpsessionstore.lookup(request)", "org.apache.wicket.session.issessioninvalidated()", "org.apache.wicket.session.httpsessionstore.httpsessionstore()", "org.apache.wicket.session.unset()", "org.apache.wicket.session.invalidatenow()", "org.apache.wicket.session.dirty()", "org.apache.wicket.session.getauthorizationstrategy()", "org.apache.wicket.session.setstyle(string)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactory.constructor(class)", "org.apache.wicket.session.getapplication()", "org.apache.wicket.session.defaultpagefactory.createpage(constructor;object)", "org.apache.wicket.session.getlocale()", "org.apache.wicket.session.addfeedbackmessage(string;int)", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.<clinit>()", "org.apache.wicket.session.getstyle()", "org.apache.wicket.session.getpagemanager()", "org.apache.wicket.session.set(session)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2$1.defaultpagefactorytest$abortandrespondpage2$1(abortandrespondpage2)", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.session(request)", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;object)", "org.apache.wicket.session.attach()", "org.apache.wicket.session.detach()", "org.apache.wicket.session.get()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3()", "org.apache.wicket.session.getfeedbackmessages()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$2.defaultpagefactorytest$abortandrespondpage3$2(abortandrespondpage3)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2.defaultpagefactorytest$abortandrespondpage2(pageparameters)", "org.apache.wicket.session.setattribute(string;serializable)", "org.apache.wicket.session.httpsessionstore$sessionbindinglistener.httpsessionstore$sessionbindinglistener(string;string)", "org.apache.wicket.session.invalidate()", "org.apache.wicket.session.httpsessionstore.getattribute(request;string)", "org.apache.wicket.session.getattribute(string)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$1.defaultpagefactorytest$abortandrespondpage3$1(abortandrespondpage3)", "org.apache.wicket.session.bind()", "org.apache.wicket.session.findorcreate()", "org.apache.wicket.session.invalidatesessiontest$mypage.invalidatesessiontest$mypage()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3(pageparameters)", "org.apache.wicket.session.invalidatesessiontest$mysession.invalidatesessiontest$mysession(request)", "org.apache.wicket.session.invalidatesessiontest$myapp.newsession(request;response)", "org.apache.wicket.session.newpagemanager(ipagemanagercontext)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1.defaultpagefactorytest$abortandrespondpage1()", "org.apache.wicket.session.httpsessionstore.setattribute(request;string;serializable)", "org.apache.wicket.session.getclassresolver()", "org.apache.wicket.session.httpsessionstore.invalidate(request)", "org.apache.wicket.session.destroy()", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.httpsessionstore.onbind(request;session)", "org.apache.wicket.session.httpsessionstore.<clinit>()", "org.apache.wicket.session.httpsessionstore.gethttpservletrequest(request)", "org.apache.wicket.session.httpsessionstore.bind(request;session)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1$1.defaultpagefactorytest$abortandrespondpage1$1(abortandrespondpage1)", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.defaultpagefactorytest$pagethrowingcheckedexception()", "org.apache.wicket.session.invalidatesessiontest$mysession.setname(string)", "org.apache.wicket.session.nextpageid()", "org.apache.wicket.session.invalidatesessiontest$mysession.getname()"]}, "metadatakey": {"distance": 1.25, "methods": ["org.apache.wicket.metadatakey.get(metadataentry[])", "org.apache.wicket.metadatakey.set(metadataentry[];object)", "org.apache.wicket.metadatakey.equals(object)", "org.apache.wicket.metadatakey.metadatakey()"]}, "response": {"distance": 1.0, "methods": ["org.apache.wicket.response.brokenpage.brokenpage()", "org.apache.wicket.response.stringresponse.write(charsequence)", "org.apache.wicket.response.setlocale(locale)", "org.apache.wicket.response.close()", "org.apache.wicket.response.getcharacterencoding()", "org.apache.wicket.response.stringresponsetest.stringresponsetest()", "org.apache.wicket.response.nullresponse.<clinit>()", "org.apache.wicket.response.response()", "org.apache.wicket.response.stringresponse.stringresponse()", "org.apache.wicket.response.filter(appendingstringbuffer)", "org.apache.wicket.response.println(charsequence)", "org.apache.wicket.response.nullresponse.getinstance()", "org.apache.wicket.response.write(inputstream)", "org.apache.wicket.response.reset()", "org.apache.wicket.response.nullresponse.write(charsequence)", "org.apache.wicket.response.stringresponse.reset()", "org.apache.wicket.response.nullresponse.nullresponse()", "org.apache.wicket.response.<clinit>()", "org.apache.wicket.response.stringresponse.tostring()", "org.apache.wicket.response.isredirect()", "org.apache.wicket.response.setcharacterencoding(string)", "org.apache.wicket.response.detectcontenttype(requestcycle;string)", "org.apache.wicket.response.setcontenttype(string)", "org.apache.wicket.response.stringresponse.getbuffer()"]}, "application": {"distance": 0.9936, "methods": ["org.apache.wicket.application.addcomponentinstantiationlistener(icomponentinstantiationlistener)", "org.apache.wicket.application.notifyrenderheadlistener(iheaderresponse)", "org.apache.wicket.application.callinitializers()", "org.apache.wicket.application.getdebugsettings()", "org.apache.wicket.application.load(properties)", "org.apache.wicket.application.<clinit>()", "org.apache.wicket.application.setmetadata(metadatakey;object)", "org.apache.wicket.application.getsessionstore()", "org.apache.wicket.application.calldestroyers()", "org.apache.wicket.application.internalinit()", "org.apache.wicket.application.getrequestloggersettings()", "org.apache.wicket.application.initializecomponents()", "org.apache.wicket.application.notifycomponentonafterrenderlisteners(component)", "org.apache.wicket.application.logeventtarget(irequesttarget)", "org.apache.wicket.application.setrootrequestmapper(irequestmapper)", "org.apache.wicket.application.removecomponentonafterrenderlistener(icomponentonafterrenderlistener)", "org.apache.wicket.ng.application.exists()", "org.apache.wicket.application.notifycomponentinstantiationlisteners(component)", "org.apache.wicket.application.notifypostcomponentonbeforerenderlisteners(component)", "org.apache.wicket.application.notifyprecomponentonbeforerenderlisteners(component)", "org.apache.wicket.application.getsecuritysettings()", "org.apache.wicket.application.exists()", "org.apache.wicket.application.defaultclassresolver.defaultclassresolver()", "org.apache.wicket.application.getexceptionsettings()", "org.apache.wicket.application.get()", "org.apache.wicket.ng.application.get()", "org.apache.wicket.ng.application.<clinit>()", "org.apache.wicket.application.addcomponentonafterrenderlistener(icomponentonafterrenderlistener)", "org.apache.wicket.application.getsettings()", "org.apache.wicket.application.internaldestroy()", "org.apache.wicket.application.defaultclassresolver.getresources(string)", "org.apache.wicket.application.getapplicationsettings()", "org.apache.wicket.application.getname()", "org.apache.wicket.application.getsessionsettings()", "org.apache.wicket.application.getmarkupsettings()", "org.apache.wicket.application.getrequestlogger()", "org.apache.wicket.application.application()", "org.apache.wicket.application.logresponsetarget(irequesttarget)", "org.apache.wicket.application.newconverterlocator()", "org.apache.wicket.application.getconverterlocator()", "org.apache.wicket.application.configure()", "org.apache.wicket.application.unset()", "org.apache.wicket.application.set(application)", "org.apache.wicket.application.getsharedresources()", "org.apache.wicket.application.getpagesettings()", "org.apache.wicket.application.defaultclassresolver.resolveclass(string)", "org.apache.wicket.application.addinitializer(string)", "org.apache.wicket.application.getframeworksettings()", "org.apache.wicket.application.getresourcesettings()", "org.apache.wicket.application.defaultclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.ondestroy()", "org.apache.wicket.application.getrequestcyclesettings()", "org.apache.wicket.application.getmetadata(metadatakey)"]}, "requestcycle": {"distance": 0.9946, "methods": ["org.apache.wicket.requestcycle.urlfor(irequesttarget)", "org.apache.wicket.requestcycle.getresponsepage()", "org.apache.wicket.requestcycle.setresponsepage(class)", "org.apache.wicket.requestcycle.setredirect(boolean)", "org.apache.wicket.requestcycle.encodeurlfor(irequesttarget)", "org.apache.wicket.requestcycle.safegetrequestprocessor()", "org.apache.wicket.requestcycle.set(requestcycle)", "org.apache.wicket.requestcycle.threaddetach()", "org.apache.wicket.requestcycle.setautomaticallyclearfeedbackmessages(boolean)", "org.apache.wicket.requestcycle.urlfor(resourcereference)", "org.apache.wicket.requestcycle.getrequest()", "org.apache.wicket.requestcycle.getresponsepageclass()", "org.apache.wicket.requestcycle.setresponse(response)", "org.apache.wicket.requestcycle.<clinit>()", "org.apache.wicket.requestcycle.checkreuse()", "org.apache.wicket.requestcycle.detach()", "org.apache.wicket.requestcycle.urlfor(resourcereference;valuemap)", "org.apache.wicket.requestcycle.request(component)", "org.apache.wicket.requestcycle.isredirect()", "org.apache.wicket.requestcycle.setresponsepage(page)", "org.apache.wicket.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.requestcycle.urlfor(component;ibehavior;requestlistenerinterface)", "org.apache.wicket.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.requestcycle.register(detachcallback)", "org.apache.wicket.requestcycle.urlfor(component;requestlistenerinterface)", "org.apache.wicket.requestcycle.step()", "org.apache.wicket.requestcycle.requestcycle(application;request;response)", "org.apache.wicket.requestcycle.sessionexists()", "org.apache.wicket.requestcycle.setrequesttarget(irequesttarget)", "org.apache.wicket.requestcycle.getrequesttarget()", "org.apache.wicket.requestcycle.getsession()", "org.apache.wicket.requestcycle.urlfor(component;requestlistenerinterface;valuemap)", "org.apache.wicket.requestcycle.getresponse()", "org.apache.wicket.requestcycle.onrequesttargetset(irequesttarget)", "org.apache.wicket.requestcycle.request()", "org.apache.wicket.requestcycle.prepare()", "org.apache.wicket.requestcycle.respond()", "org.apache.wicket.requestcycle.setrequest(request)", "org.apache.wicket.requestcycle.processeventsandrespond()", "org.apache.wicket.requestcycle.logruntimeexception(runtimeexception)", "org.apache.wicket.requestcycle.steps()", "org.apache.wicket.requestcycle.urlfor(class;pageparameters)", "org.apache.wicket.requestcycle.getoriginalresponse()", "org.apache.wicket.requestcycle.get()", "org.apache.wicket.requestcycle.onendrequest()", "org.apache.wicket.requestcycle.onbeginrequest()", "org.apache.wicket.requestcycle.setpageparameters(pageparameters)", "org.apache.wicket.requestcycle.onaftertargetsdetached()", "org.apache.wicket.requestcycle.setresponsepage(class;pageparameters)", "org.apache.wicket.requestcycle.urlfor(page)", "org.apache.wicket.requestcycle.washandled()", "org.apache.wicket.requestcycle.onruntimeexception(page;runtimeexception)", "org.apache.wicket.requestcycle.request(irequesttarget)", "org.apache.wicket.requestcycle.unset()", "org.apache.wicket.requestcycle.getapplication()"]}, "feedbackmessage": {"distance": 1.0298, "methods": ["org.apache.wicket.feedback.feedbackmessage.getmessage()", "org.apache.wicket.feedback.feedbackmessage.getlevelasstring()", "org.apache.wicket.feedback.feedbackmessage.isrendered()", "org.apache.wicket.feedback.feedbackmessage.<clinit>()", "org.apache.wicket.feedback.feedbackmessage.feedbackmessage(component;serializable;int)", "org.apache.wicket.feedback.feedbackmessage.getlevel()", "org.apache.wicket.feedback.feedbackmessage.detach()", "org.apache.wicket.feedback.feedbackmessage.getreporter()", "org.apache.wicket.feedback.feedbackmessage.markrendered()", "org.apache.wicket.feedback.feedbackmessage.islevel(int)"]}, "feedbackmessages": {"distance": 0.85, "methods": ["org.apache.wicket.feedback.feedbackmessages.<clinit>()", "org.apache.wicket.feedback.feedbackmessages.info(component;string)", "org.apache.wicket.feedback.feedbackmessages.add(component;string;int)", "org.apache.wicket.feedback.feedbackmessages.trimtosize()", "org.apache.wicket.feedback.feedbackmessages.hasmessage(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.hasmessagefor(component;int)", "org.apache.wicket.feedback.feedbackmessages.messages(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.clear(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.iterator()", "org.apache.wicket.feedback.feedbackmessages.debug(component;string)", "org.apache.wicket.feedback.feedbackmessages.size()", "org.apache.wicket.feedback.feedbackmessages.error(component;serializable)", "org.apache.wicket.feedback.feedbackmessages.haserrormessagefor(component)", "org.apache.wicket.feedback.feedbackmessages.add(feedbackmessage)", "org.apache.wicket.feedback.feedbackmessages.feedbackmessages()", "org.apache.wicket.feedback.feedbackmessages.hasmessagefor(component)", "org.apache.wicket.feedback.feedbackmessages.messageforcomponent(component)"]}}