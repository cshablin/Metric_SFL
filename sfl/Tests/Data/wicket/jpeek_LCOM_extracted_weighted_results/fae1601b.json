{"arrayliststack": {"distance": 1.25, "methods": ["org.apache.wicket.util.collections.arrayliststack.pop()", "org.apache.wicket.util.collections.arrayliststack.peek()", "org.apache.wicket.util.collections.arrayliststack.push(object)", "org.apache.wicket.util.collections.arrayliststack.arrayliststack()", "org.apache.wicket.util.collections.arrayliststack.arrayliststack(int)"]}, "component$removedbehaviorchange": {"distance": 1.0, "methods": ["org.apache.wicket.component$removedbehaviorchange.component$removedbehaviorchange(component;ibehavior)"]}, "request": {"distance": 0.9667, "methods": ["org.apache.wicket.request.requestparameters.getpath()", "org.apache.wicket.request.target.basic.redirectrequesttarget.redirectrequesttarget(string)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.urlencodequerycomponent(string)", "org.apache.wicket.request.target.coding.urlmountingtest.geterrorcode(requestcycle)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest$testpage$1.indexedhybridurlcodingstrategytest$testpage$1(testpage;string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getpath()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class;pageparameters)", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.mixedparamurlcodingstrategy(string;class;string[])", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.bookmarkablelistenerinterfacerequesttarget(string;class;pageparameters;component;requestlistenerinterface)", "org.apache.wicket.request.requestparameters.getparameters()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.webrequestcodingstrategy$mountsmap(boolean)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.<clinit>()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.shortenurl(charsequence)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageclass()", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest$testpage$2.indexedhybridurlcodingstrategytest$testpage$2(testpage;string)", "org.apache.wicket.request.target.coding.statefulpage.getlinkclickcount()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.indexedsharedresourcecodingstrategy(string;string)", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource$1.write(outputstream)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.decode(requestparameters)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.tostring()", "org.apache.wicket.request.requestparameters.getinterfacename()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageparametersmetadatakey.hybridurlcodingstrategy$pageparametersmetadatakey(1)", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.respond(requestcycle)", "org.apache.wicket.request.target.basic.redirectrequesttarget.detach(requestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.decodeurl(string)", "org.apache.wicket.protocol.http.request.webexternalresourcerequesttarget.<clinit>()", "org.apache.wicket.request.target.component.componentrequesttarget.componentrequesttarget(component)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.rebuildurl(charsequence)", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.geterrorcode()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.getfilename()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getpageparameters(irequesttarget)", "org.apache.wicket.request.getpage()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.cryptedurlwebrequestcodingstrategytest()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.decodeparameters(string;map)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.tostring()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;irequesttarget)", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.detach(requestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.encodeurl(charsequence)", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.decodeparameters(string;map)", "org.apache.wicket.request.decodeurl(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.matches(irequesttarget)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getpageid()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addbookmarkablepageparameters(request;requestparameters)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolverenderedpage(requestcycle;requestparameters)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$intkeyweakreference.urlcompressor$intkeyweakreference(int;object;referencequeue)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.encode(irequesttarget)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.addpageinfo(string;pageinfo)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$settings.aremountscasesensitive()", "org.apache.wicket.request.target.component.componentrequesttarget.respond(requestcycle)", "org.apache.wicket.request.abstractrequestcycleprocessor.onruntimeexception(page;runtimeexception)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.parsepageinfo(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.setup()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.targetforrequest(requestparameters)", "org.apache.wicket.request.abstractrequestcycleprocessor.respond(runtimeexception;requestcycle)", "org.apache.wicket.request.target.coding.statefulpage.access$008(statefulpage)", "org.apache.wicket.request.requestparameters.setquerystring(string)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.getinterfacename()", "org.apache.wicket.request.target.coding.querystringurlcodingstrategytest.querystringurlcodingstrategytest()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.decode(requestparameters)", "org.apache.wicket.request.target.coding.testpagewithiframe.<clinit>()", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.weberrorcoderesponsetarget(int)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.isredirectonbookmarkablerequest()", "org.apache.wicket.request.requestparameters.setbookmarkablepageclass(string)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.processevents(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.urlcompressor$componentandinterface(intkeyweakreference;string)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface;requestparameters)", "org.apache.wicket.request.abstractrequestcycleprocessor.abstractrequestcycleprocessor()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.detach(requestcycle)", "org.apache.wicket.request.target.coding.statelessstatefullurlcodingstrategytest.statelessstatefullurlcodingstrategytest()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.hashcode()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.setup()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageparametersmetadatakey.hybridurlcodingstrategy$pageparametersmetadatakey()", "org.apache.wicket.request.target.coding.webrequestencoder.addvalue(string;string)", "org.apache.wicket.request.target.coding.testpagewithiframe.testpagewithiframe(pageparameters)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.hybridurlcodingstrategy(string;class;boolean)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.urlcompressor()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.<clinit>()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.getrequestparameters()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.appendtoquerystring(appendingstringbuffer;boolean;string;string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.decode(request)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest.setup()", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.abstractrequesttargeturlcodingstrategy(string)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.matches(string;boolean)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebcodingstrategy.encode(requestcycle;ibookmarkablepagerequesttarget)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategyforpath(string)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvesharedresource(requestcycle;requestparameters)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.matches(irequesttarget)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getinitialpagepageparameters(page)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addresourceparameters(request;requestparameters)", "org.apache.wicket.request.target.coding.testpagewithiframe$testframe.oncomponenttag(componenttag)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;isharedresourcerequesttarget)", "org.apache.wicket.request.target.coding.urlmountingtest.setup()", "org.apache.wicket.request.requestparameters.getresourcekey()", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.coding.urlmountingtest.getrequestcodingstrategy()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.teardown()", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.bookmarkablepagerequesttargeturlcodingstrategy(string;class;string)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.setpage(page)", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.listenerinterfacerequesttarget(page;component;requestlistenerinterface;requestparameters)", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.detach(requestcycle)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.mount(irequesttargeturlcodingstrategy)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategies()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$2.gettestpage()", "org.apache.wicket.request.target.coding.webrequestencoder.webrequestencoder(appendingstringbuffer)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvelistenerinterfacetarget(requestcycle;page;string;string;requestparameters)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.gettrailingslashescount(charsequence)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessor.resolvelistenerinterfacetarget(requestcycle;page;string;string;requestparameters)", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.<clinit>()", "org.apache.wicket.request.requestparameters.getcomponentpath()", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.indexedparamurlcodingstrategy(string;class;string)", "org.apache.wicket.request.requestparameters.setcomponentpath(string)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.matches(irequesttarget)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.<clinit>()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource.getresourcestream()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$2.urlcompressingwebrequestprocessortest$2(urlcompressingwebrequestprocessortest)", "org.apache.wicket.request.requestparameters.setversionnumber(int)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addinterfaceparameters(string;requestparameters)", "org.apache.wicket.request.requestparameters.getbehaviorid()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessor.newrequestcodingstrategy()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.getcomponentandinterfaceforuid(string)", "org.apache.wicket.request.target.coding.statefulpage.statefulpage()", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.listenerinterfacerequesttarget(page;component;requestlistenerinterface)", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.detach(requestcycle)", "org.apache.wicket.request.target.component.listener.redirectpagerequesttarget.redirectpagerequesttarget(page)", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.request.target.component.pagerequesttarget.getpage()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebcodingstrategy.encode(requestcycle;ilistenerinterfacerequesttarget)", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvebookmarkablepage(requestcycle;requestparameters)", "org.apache.wicket.request.target.component.pagerequesttarget.tostring()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.decodepagemapname(string)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.urlencodepathcomponent(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getpageinfo(irequesttarget)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.pathfortarget(irequesttarget)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.getnewuid()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$1.newrequestcycleprocessor()", "org.apache.wicket.request.abstractrequestcycleprocessor.resolvehomepagetarget(requestcycle;requestparameters)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage(requestcycle)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategy.encode(irequesttarget)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.getuidforcomponentandinterface(component;string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey(1)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfoextraction.getpageinfo()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ibookmarkablepagerequesttarget)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encodepagemapname(string)", "org.apache.wicket.protocol.http.request.webexternalresourcerequesttarget.webexternalresourcerequesttarget(string)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageparameters()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource$1.getcontenttype()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.compare(string;string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getparametermap()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestparameters()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.coding.statefulpage$2.onsubmit()", "org.apache.wicket.request.requestparameters.getpagemapname()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.onprocessevents(requestcycle)", "org.apache.wicket.request.target.coding.statefulpage$1.onclick()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebcodingstrategy.urlcompressingwebcodingstrategy()", "org.apache.wicket.request.target.basic.redirectrequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.extractpageinfo(string)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor.<clinit>()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.<clinit>()", "org.apache.wicket.protocol.http.request.webexternalresourcerequesttarget.detach(requestcycle)", "org.apache.wicket.request.requestparameters.setinterfacename(string)", "org.apache.wicket.request.requestparameters.setpath(string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.strategyformount(string)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.detach(requestcycle)", "org.apache.wicket.request.request()", "org.apache.wicket.request.target.component.listener.redirectpagerequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.decode(requestparameters)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getpagemapname()", "org.apache.wicket.request.setpage(page)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.<clinit>()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.assertcontains(map;string;string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getquerystring()", "org.apache.wicket.request.target.coding.bookmarkablepagerequesttargeturlcodingstrategy.matches(irequesttarget)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1$1.newrequestcodingstrategy()", "org.apache.wicket.request.target.coding.testpagewithiframe$testframe.onresourcerequested()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpagemapname()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.getparameter(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.hybridurlcodingstrategy$pageinfo(integer;integer;string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getoriginaloriginaltrailingslashescount(irequesttarget)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.hashcode()", "org.apache.wicket.request.requestparameters.seturldepth(int)", "org.apache.wicket.request.requestparameters.getversionnumber()", "org.apache.wicket.protocol.http.request.weberrorcoderesponsetarget.weberrorcoderesponsetarget(int;string)", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.indexedparamurlcodingstrategy(string;class)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getpageinfoseparator()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.getmountencoder(irequesttarget)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.decodeparameters(string;map)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.getrequestpath(request)", "org.apache.wicket.request.getrequestparameters()", "org.apache.wicket.request.target.coding.querystringurlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest$testpage.indexedhybridurlcodingstrategytest$testpage(pageparameters)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.packagerequesttargeturlcodingstrategy(string;packagename)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource.indexedsharedresourcecodingstrategytest$testresource(1)", "org.apache.wicket.request.requestparameters.getbookmarkablepageclass()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$settings.webrequestcodingstrategy$settings()", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.getinterfacename()", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategytest.indexedhybridurlcodingstrategytest()", "org.apache.wicket.request.target.component.pagerequesttarget.detach(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest$1.urlcompressingwebrequestprocessortest$1(urlcompressingwebrequestprocessortest)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.compare(object;object)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.gethomepage()", "org.apache.wicket.request.requestparameters.getinterface()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(string;class)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.cryptedurlwebrequestcodingstrategy(irequestcodingstrategy)", "org.apache.wicket.request.target.coding.querystringurlcodingstrategy.querystringurlcodingstrategy(string;class)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.getresourcekey()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestlistenerinterface()", "org.apache.wicket.request.target.coding.statelesspage$1.statelesspage$1(statelesspage;string;textfield)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ilistenerinterfacerequesttarget)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessortest.urlcompressingwebrequestprocessortest()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.<clinit>()", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.request.target.coding.urlmountingtest.teardown()", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.encode(irequesttarget)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.sharedresourcerequesttarget(requestparameters)", "org.apache.wicket.request.target.coding.statefulpage$1.statefulpage$1(statefulpage;string)", "org.apache.wicket.request.target.coding.packagerequesttargeturlcodingstrategy.decode(requestparameters)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.newrequestcycleprocessor()", "org.apache.wicket.request.target.coding.testpagewithiframe$testframe.testpagewithiframe$testframe(testpagewithiframe;string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.getversionnumber()", "org.apache.wicket.request.requestparameters.isonlyprocessifpathactive()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.encode(requestcycle;irequesttarget)", "org.apache.wicket.request.target.coding.indexparamwithstatelessiframetest.exectest(boolean)", "org.apache.wicket.request.target.coding.urlmountingtest.urlmountingtest()", "org.apache.wicket.request.target.coding.indexparamwithstatelessiframetest.indexparamwithstatelessiframetest()", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.urldecodepathcomponent(string)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.bookmarkablelistenerinterfacerequesttarget(string;class;pageparameters;string;string;int)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.webrequestcodingstrategy()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.resourcestreamrequesttarget(iresourcestream)", "org.apache.wicket.request.target.component.componentrequesttarget.detach(requestcycle)", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressingwebrequestprocessor.urlcompressingwebrequestprocessor()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.urlcompressor$componentandinterface(intkeyweakreference;string;1)", "org.apache.wicket.request.requestparameters.setresourcekey(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey.hybridurlcodingstrategy$originalurltrailingslashescountmetadatakey()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.gettarget()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getbeginseparator()", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfo.isnumber(string)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.encode(requestcycle;ipagerequesttarget)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.tostring()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1$1.cryptedurlwebrequestcodingstrategytest$1$1(1)", "org.apache.wicket.request.target.coding.statefulpage.access$000(statefulpage)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.getendseparator()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap$1.webrequestcodingstrategy$mountsmap$1()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.urlcodingstrategyforpath(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.matches(string;boolean)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy$decodedurlrequest.cryptedurlwebrequestcodingstrategy$decodedurlrequest(request;string;string)", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.behaviorrequesttarget(page;component;requestlistenerinterface;requestparameters)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfoextraction.hybridurlcodingstrategy$pageinfoextraction(string;pageinfo)", "org.apache.wicket.request.target.coding.indexedhybridurlcodingstrategy.indexedhybridurlcodingstrategy(string;class)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.webrequestcodingstrategy(settings)", "org.apache.wicket.request.target.coding.statelesspage$1.onsubmit()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(string;class;pageparameters)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategy.<clinit>()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.newpage(class;requestcycle)", "org.apache.wicket.request.target.coding.testpagewithiframe.access$000()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest.indexedsharedresourcecodingstrategytest()", "org.apache.wicket.request.abstractrequestcycleprocessor.getrequestcodingstrategy()", "org.apache.wicket.protocol.http.request.urlcompressing.urlcompressor$componentandinterface.getcomponent()", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.appendvalue(appendingstringbuffer;string;string)", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategytest.mixedparamurlcodingstrategytest()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest.setup()", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.getcomponentpath()", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.decode(request)", "org.apache.wicket.request.target.coding.testpage.testpage()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.configure(requestcycle;response;iresourcestream)", "org.apache.wicket.protocol.http.request.urlcompressing.mypage.mypage()", "org.apache.wicket.request.abstractrequestcycleprocessor.respond(requestcycle)", "org.apache.wicket.request.requestparameters.getcomponentid()", "org.apache.wicket.request.requestparameters.geturldepth()", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource.indexedsharedresourcecodingstrategytest$testresource()", "org.apache.wicket.request.target.component.pagerequesttarget.pagerequesttarget(page)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.cryptedurlwebrequestcodingstrategytest$1(cryptedurlwebrequestcodingstrategytest)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.rewritestaticrelativeurl(string)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.resource.sharedresourcerequesttarget.<clinit>()", "org.apache.wicket.request.target.coding.mixedparamurlcodingstrategy.appendparameters(appendingstringbuffer;map)", "org.apache.wicket.request.requestparameters.setpagemapname(string)", "org.apache.wicket.request.requestparameters.setparameters(map)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.encode(irequesttarget)", "org.apache.wicket.request.requestparameters.requestparameters()", "org.apache.wicket.request.target.coding.indexedparamurlcodingstrategy.decodeparameters(string;map)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface)", "org.apache.wicket.request.requestparameters.setbehaviorid(string)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy$pageinfoextraction.geturlafterextraction()", "org.apache.wicket.request.abstractrequestcycleprocessor.processevents(requestcycle)", "org.apache.wicket.request.target.coding.querystringurlcodingstrategy.decode(requestparameters)", "org.apache.wicket.request.target.coding.statelesspage.statelesspage()", "org.apache.wicket.request.target.component.pagerequesttarget.respond(requestcycle)", "org.apache.wicket.request.requestparameters.tostring()", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.component.pagerequesttarget.hashcode()", "org.apache.wicket.request.target.resource.resourcestreamrequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.coding.abstractrequesttargeturlcodingstrategy.getmountpath()", "org.apache.wicket.request.target.coding.webrequestencoder.addvalue(string;object)", "org.apache.wicket.request.target.coding.statefulpage$2.statefulpage$2(statefulpage;string;textfield)", "org.apache.wicket.request.target.coding.indexedsharedresourcecodingstrategytest$testresource$1.indexedsharedresourcecodingstrategytest$testresource$1(testresource)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy$mountsmap.mount(string;irequesttargeturlcodingstrategy)", "org.apache.wicket.request.target.coding.hybridurlcodingstrategy.hybridurlcodingstrategy(string;class)", "org.apache.wicket.protocol.http.request.webrequestcodingstrategy.addinterfaceparameters(request;requestparameters)", "org.apache.wicket.request.target.resource.componentresourcerequesttarget.componentresourcerequesttarget(page;component;requestlistenerinterface)"]}, "component$addedbehaviorchange": {"distance": 1.0, "methods": ["org.apache.wicket.component$addedbehaviorchange.component$addedbehaviorchange(component;ibehavior)"]}, "requestcycle": {"distance": 0.9946, "methods": ["org.apache.wicket.requestcycle.setresponsepage(class;pageparameters;string)", "org.apache.wicket.requestcycle.urlfor(irequesttarget)", "org.apache.wicket.requestcycle.getresponsepage()", "org.apache.wicket.requestcycle.setresponsepage(class)", "org.apache.wicket.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.requestcycle.setredirect(boolean)", "org.apache.wicket.requestcycle.encodeurlfor(irequesttarget)", "org.apache.wicket.requestcycle.safegetrequestprocessor()", "org.apache.wicket.requestcycle.set(requestcycle)", "org.apache.wicket.requestcycle.threaddetach()", "org.apache.wicket.requestcycle.setautomaticallyclearfeedbackmessages(boolean)", "org.apache.wicket.requestcycle.urlfor(resourcereference)", "org.apache.wicket.requestcycle.getrequest()", "org.apache.wicket.requestcycle.getresponsepageclass()", "org.apache.wicket.requestcycle.urlfor(ipagemap;class;pageparameters)", "org.apache.wicket.requestcycle.setresponse(response)", "org.apache.wicket.requestcycle.<clinit>()", "org.apache.wicket.requestcycle.checkreuse()", "org.apache.wicket.requestcycle.urlfor(resourcereference;valuemap)", "org.apache.wicket.requestcycle.request(component)", "org.apache.wicket.requestcycle.getcurrentpagemap()", "org.apache.wicket.requestcycle.isredirect()", "org.apache.wicket.requestcycle.setresponsepage(page)", "org.apache.wicket.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.requestcycle.urlfor(component;ibehavior;requestlistenerinterface)", "org.apache.wicket.requestcycle.urlfor(component;requestlistenerinterface)", "org.apache.wicket.requestcycle.step()", "org.apache.wicket.requestcycle.requestcycle(application;request;response)", "org.apache.wicket.requestcycle.sessionexists()", "org.apache.wicket.requestcycle.setrequesttarget(irequesttarget)", "org.apache.wicket.requestcycle.getrequesttarget()", "org.apache.wicket.requestcycle.getsession()", "org.apache.wicket.requestcycle.urlfor(component;requestlistenerinterface;valuemap)", "org.apache.wicket.requestcycle.getresponse()", "org.apache.wicket.requestcycle.onrequesttargetset(irequesttarget)", "org.apache.wicket.requestcycle.request()", "org.apache.wicket.requestcycle.respond()", "org.apache.wicket.requestcycle.setrequest(request)", "org.apache.wicket.requestcycle.detach()", "org.apache.wicket.requestcycle.processeventsandrespond()", "org.apache.wicket.requestcycle.logruntimeexception(runtimeexception)", "org.apache.wicket.requestcycle.steps()", "org.apache.wicket.requestcycle.getoriginalresponse()", "org.apache.wicket.requestcycle.get()", "org.apache.wicket.requestcycle.onendrequest()", "org.apache.wicket.requestcycle.onbeginrequest()", "org.apache.wicket.requestcycle.setpageparameters(pageparameters)", "org.apache.wicket.requestcycle.setresponsepage(class;pageparameters)", "org.apache.wicket.requestcycle.prepare()", "org.apache.wicket.requestcycle.urlfor(page)", "org.apache.wicket.requestcycle.washandled()", "org.apache.wicket.requestcycle.onruntimeexception(page;runtimeexception)", "org.apache.wicket.requestcycle.request(irequesttarget)", "org.apache.wicket.requestcycle.getapplication()"]}, "response": {"distance": 1.0, "methods": ["org.apache.wicket.response.stringresponse.write(charsequence)", "org.apache.wicket.response.setlocale(locale)", "org.apache.wicket.response.close()", "org.apache.wicket.response.getcharacterencoding()", "org.apache.wicket.response.stringresponsetest.stringresponsetest()", "org.apache.wicket.response.nullresponse.<clinit>()", "org.apache.wicket.response.response()", "org.apache.wicket.response.stringresponse.stringresponse()", "org.apache.wicket.response.filter(appendingstringbuffer)", "org.apache.wicket.response.println(charsequence)", "org.apache.wicket.response.brokenpage.brokenpage()", "org.apache.wicket.response.nullresponse.getinstance()", "org.apache.wicket.response.write(inputstream)", "org.apache.wicket.response.reset()", "org.apache.wicket.response.nullresponse.write(charsequence)", "org.apache.wicket.response.stringresponse.reset()", "org.apache.wicket.response.nullresponse.nullresponse()", "org.apache.wicket.response.<clinit>()", "org.apache.wicket.response.detectcontenttype(requestcycle;string)", "org.apache.wicket.response.stringresponse.tostring()", "org.apache.wicket.response.isredirect()", "org.apache.wicket.response.setcharacterencoding(string)", "org.apache.wicket.response.setcontenttype(string)", "org.apache.wicket.response.stringresponse.getbuffer()"]}, "metadatakey": {"distance": 1.3333, "methods": ["org.apache.wicket.metadatakey.get(metadataentry[])", "org.apache.wicket.metadatakey.set(metadataentry[];object)", "org.apache.wicket.metadatakey.equals(object)", "org.apache.wicket.metadatakey.metadatakey()"]}, "page": {"distance": 0.967, "methods": ["org.apache.wicket.page.setformcomponentvaluesfromcookies()", "org.apache.wicket.page.<clinit>()", "org.apache.wicket.page.maytrackchangesfor(component;markupcontainer)", "org.apache.wicket.page.getversions()", "org.apache.wicket.page.setpagemap(ipagemap)", "org.apache.wicket.page.endversion()", "org.apache.wicket.page.page(imodel)", "org.apache.wicket.page.checkrendering(markupcontainer)", "org.apache.wicket.authorization.strategies.page.abstractpageauthorizationstrategy.isactionauthorized(component;action)", "org.apache.wicket.page.getpagemapentry()", "org.apache.wicket.page.access$000(page)", "org.apache.wicket.authorization.strategies.page.abstractpageauthorizationstrategy.isinstantiationauthorized(class)", "org.apache.wicket.page.page(pageparameters)", "org.apache.wicket.page.getpagemapname()", "org.apache.wicket.authorization.strategies.page.simplepageauthorizationstrategy.simplepageauthorizationstrategy(class;class)", "org.apache.wicket.authorization.strategies.page.abstractpageauthorizationstrategy.instanceof(class;class)", "org.apache.wicket.page.beforecallcomponent(component;requestlistenerinterface)", "org.apache.wicket.page.detachmodels()", "org.apache.wicket.page.onredirect()", "org.apache.wicket.page.tostring()", "org.apache.wicket.page.setstatelesshint(boolean)", "org.apache.wicket.page.componentrendered(component)", "org.apache.wicket.page.componentremoved(component)", "org.apache.wicket.page.getautoindex()", "org.apache.wicket.authorization.strategies.page.abstractpageauthorizationstrategy.abstractpageauthorizationstrategy()", "org.apache.wicket.page.ondetach()", "org.apache.wicket.page.init(ipagemap)", "org.apache.wicket.page.componentadded(component)", "org.apache.wicket.page.endcomponentrender(component)", "org.apache.wicket.page.componentchanged(component;markupcontainer)", "org.apache.wicket.page.page()", "org.apache.wicket.page.getversion(int)", "org.apache.wicket.authorization.strategies.page.simplepageauthorizationstrategy$1.simplepageauthorizationstrategy$1(simplepageauthorizationstrategy;class)", "org.apache.wicket.authorization.strategies.page.simplepageauthorizationstrategy.ispageauthorized(class)", "org.apache.wicket.page.ispagestateless()", "org.apache.wicket.page.getstatelesshint()", "org.apache.wicket.page.writereplace()", "org.apache.wicket.page.getajaxversionnumber()", "org.apache.wicket.page.setnextavailableid()", "org.apache.wicket.page.getnumericid()", "org.apache.wicket.page.init()", "org.apache.wicket.page.startcomponentrender(component)", "org.apache.wicket.page.setpagestateless(boolean)", "org.apache.wicket.page.getpageparameters()", "org.apache.wicket.page.configureresponse()", "org.apache.wicket.page.setnumericid(int)", "org.apache.wicket.page.internalonmodelchanged()", "org.apache.wicket.page.getcurrentversionnumber()", "org.apache.wicket.page.renderpage()", "org.apache.wicket.page.componentmodelchanging(component)", "org.apache.wicket.page.readpageobject(objectinputstream)", "org.apache.wicket.page.getpagemap()", "org.apache.wicket.authorization.strategies.page.simplepageauthorizationstrategy$1.onunauthorizedinstantiation(component)", "org.apache.wicket.page.onbeforerender()", "org.apache.wicket.page.dirty()", "org.apache.wicket.page.aftercallcomponent(component;requestlistenerinterface)", "org.apache.wicket.page.componentstatechanging(component;change)", "org.apache.wicket.page.onrender(markupstream)", "org.apache.wicket.page.onpageattached()", "org.apache.wicket.page.getid()", "org.apache.wicket.page.writepageobject(objectoutputstream)", "org.apache.wicket.page.peekpagestateless()", "org.apache.wicket.page.isbookmarkable()"]}, "application": {"distance": 0.9946, "methods": ["org.apache.wicket.application.addcomponentinstantiationlistener(icomponentinstantiationlistener)", "org.apache.wicket.application.notifyrenderheadlistener(iheaderresponse)", "org.apache.wicket.application.callinitializers()", "org.apache.wicket.application.get(string)", "org.apache.wicket.application.getdebugsettings()", "org.apache.wicket.application.load(properties)", "org.apache.wicket.application.<clinit>()", "org.apache.wicket.application.setmetadata(metadatakey;object)", "org.apache.wicket.application.getsessionstore()", "org.apache.wicket.application.calldestroyers()", "org.apache.wicket.application.internalinit()", "org.apache.wicket.application.getrequestloggersettings()", "org.apache.wicket.application.initializecomponents()", "org.apache.wicket.application.notifycomponentonafterrenderlisteners(component)", "org.apache.wicket.application.logeventtarget(irequesttarget)", "org.apache.wicket.application.notifypostcomponentonbeforerenderlisteners(component)", "org.apache.wicket.application.notifyprecomponentonbeforerenderlisteners(component)", "org.apache.wicket.application.getname()", "org.apache.wicket.application.getsecuritysettings()", "org.apache.wicket.application.exists()", "org.apache.wicket.application.defaultclassresolver.defaultclassresolver()", "org.apache.wicket.application.getexceptionsettings()", "org.apache.wicket.application.get()", "org.apache.wicket.application.getsettings()", "org.apache.wicket.application.internaldestroy()", "org.apache.wicket.application.defaultclassresolver.getresources(string)", "org.apache.wicket.application.getapplicationsettings()", "org.apache.wicket.application.addpostcomponentonbeforerenderlistener(icomponentonbeforerenderlistener)", "org.apache.wicket.application.getsessionsettings()", "org.apache.wicket.application.getmarkupsettings()", "org.apache.wicket.application.getrequestlogger()", "org.apache.wicket.application.application()", "org.apache.wicket.application.logresponsetarget(irequesttarget)", "org.apache.wicket.application.newconverterlocator()", "org.apache.wicket.application.notifycomponentinstantiationlisteners(component)", "org.apache.wicket.application.getconverterlocator()", "org.apache.wicket.application.configure()", "org.apache.wicket.application.unset()", "org.apache.wicket.application.set(application)", "org.apache.wicket.application.getsharedresources()", "org.apache.wicket.application.getpagesettings()", "org.apache.wicket.application.defaultclassresolver.resolveclass(string)", "org.apache.wicket.application.addinitializer(string)", "org.apache.wicket.application.getframeworksettings()", "org.apache.wicket.application.getresourcesettings()", "org.apache.wicket.application.defaultclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.ondestroy()", "org.apache.wicket.application.getrequestcyclesettings()", "org.apache.wicket.application.getmetadata(metadatakey)"]}, "session": {"distance": 0.9878, "methods": ["org.apache.wicket.session.getid()", "org.apache.wicket.session.touch(page)", "org.apache.wicket.session.findorcreate(request;response)", "org.apache.wicket.session.invalidatesessiontest$myapp.invalidatesessiontest$myapp()", "org.apache.wicket.session.invalidatesessiontest$myapp.gethomepage()", "org.apache.wicket.session.pagemap.leastrecentlyaccessedevictionstrategy.evict(ipagemap)", "org.apache.wicket.session.invalidatesessiontest$mysession.get()", "org.apache.wicket.session.getsessionstore()", "org.apache.wicket.session.removeattribute(string)", "org.apache.wicket.session.invalidatesessiontest.invalidatesessiontest()", "org.apache.wicket.session.exists()", "org.apache.wicket.session.requestdetached()", "org.apache.wicket.session.istemporary()", "org.apache.wicket.session.<clinit>()", "org.apache.wicket.session.defaultpagefactorytest.defaultpagefactorytest(string)", "org.apache.wicket.session.setlocale(locale)", "org.apache.wicket.session.nextsequencevalue()", "org.apache.wicket.session.attributeforpagemapname(string)", "org.apache.wicket.session.issessioninvalidated()", "org.apache.wicket.session.defaultpagefactory.createpage(constructor;pageparameters)", "org.apache.wicket.session.unset()", "org.apache.wicket.session.newpagemap(string)", "org.apache.wicket.session.invalidatenow()", "org.apache.wicket.session.dirty()", "org.apache.wicket.session.getauthorizationstrategy()", "org.apache.wicket.session.setstyle(string)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactory.constructor(class)", "org.apache.wicket.session.getapplication()", "org.apache.wicket.session.getlocale()", "org.apache.wicket.session.addfeedbackmessage(string;int)", "org.apache.wicket.session.info(string)", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.<clinit>()", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;pageparameters)", "org.apache.wicket.session.getstyle()", "org.apache.wicket.session.set(session)", "org.apache.wicket.session.dirtypage(page)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2$1.defaultpagefactorytest$abortandrespondpage2$1(abortandrespondpage2)", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.getpagemaps()", "org.apache.wicket.session.getpagefactory()", "org.apache.wicket.session.session(request)", "org.apache.wicket.session.attach()", "org.apache.wicket.session.detach()", "org.apache.wicket.session.get()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3()", "org.apache.wicket.session.getfeedbackmessages()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$2.defaultpagefactorytest$abortandrespondpage3$2(abortandrespondpage3)", "org.apache.wicket.session.getpage(int;int)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2.defaultpagefactorytest$abortandrespondpage2(pageparameters)", "org.apache.wicket.session.untouch(page)", "org.apache.wicket.session.setattribute(string;object)", "org.apache.wicket.session.invalidate()", "org.apache.wicket.session.getattribute(string)", "org.apache.wicket.session.bind()", "org.apache.wicket.session.pagemapforname(string;boolean)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$1.defaultpagefactorytest$abortandrespondpage3$1(abortandrespondpage3)", "org.apache.wicket.session.getpage(string;string;int)", "org.apache.wicket.session.findorcreate()", "org.apache.wicket.session.invalidatesessiontest$mypage.invalidatesessiontest$mypage()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3(pageparameters)", "org.apache.wicket.session.invalidatesessiontest$mysession.invalidatesessiontest$mysession(request)", "org.apache.wicket.session.pagemap.leastrecentlyaccessedevictionstrategy.leastrecentlyaccessedevictionstrategy(int)", "org.apache.wicket.session.invalidatesessiontest$myapp.newsession(request;response)", "org.apache.wicket.session.getdirtyobjectslist()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1.defaultpagefactorytest$abortandrespondpage1()", "org.apache.wicket.session.getclassresolver()", "org.apache.wicket.session.getattributenames()", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.session(application;request)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1$1.defaultpagefactorytest$abortandrespondpage1$1(abortandrespondpage1)", "org.apache.wicket.session.dirtypagemap(ipagemap)", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.defaultpagefactorytest$pagethrowingcheckedexception()", "org.apache.wicket.session.invalidatesessiontest$mysession.setname(string)", "org.apache.wicket.session.nextpageid()", "org.apache.wicket.session.invalidatesessiontest$mysession.getname()"]}, "markupcontainer": {"distance": 0.9625, "methods": ["org.apache.wicket.markupcontainer.children_remove(int)", "org.apache.wicket.markupcontainer.addedcomponent(component)", "org.apache.wicket.markupcontainer.access$000(markupcontainer)", "org.apache.wicket.markupcontainer.getid(object)", "org.apache.wicket.markupcontainer.add(component[])", "org.apache.wicket.markupcontainer.replace(component)", "org.apache.wicket.markupcontainer.children_get(int)", "org.apache.wicket.markupcontainer.setrenderallowed()", "org.apache.wicket.markupcontainer.rendernext(markupstream)", "org.apache.wicket.markupcontainer.getmarkupstream()", "org.apache.wicket.markupcontainer.tostring()", "org.apache.wicket.markupcontainer.postprocess(object;boolean;markupcontainer;int)", "org.apache.wicket.markupcontainer.setmarkupstream(markupstream)", "org.apache.wicket.markupcontainer.internalmarkrendering(boolean)", "org.apache.wicket.markupcontainer.children_get(string)", "org.apache.wicket.markupcontainer.onbeforerenderchildren()", "org.apache.wicket.markupcontainer.access$400(markupcontainer)", "org.apache.wicket.markupcontainer.<clinit>()", "org.apache.wicket.markupcontainer.istransparentresolver()", "org.apache.wicket.markupcontainer.visitchildren(ivisitor)", "org.apache.wicket.markupcontainer.tostring(boolean)", "org.apache.wicket.markupcontainer.put(component)", "org.apache.wicket.markupcontainer.children_size()", "org.apache.wicket.markupcontainer.oncomponenttagbody(markupstream;componenttag)", "org.apache.wicket.markupcontainer.removedcomponent(component)", "org.apache.wicket.markupcontainer.onafterrenderchildren()", "org.apache.wicket.markupcontainer.children_get(int;boolean)", "org.apache.wicket.markupcontainer.autoadd(component;markupstream)", "org.apache.wicket.markupcontainer.size()", "org.apache.wicket.markupcontainer.detachchildren()", "org.apache.wicket.markupcontainer.children_set(int;object;boolean)", "org.apache.wicket.markupcontainer.children_add(component)", "org.apache.wicket.markupcontainer.renderall(markupstream)", "org.apache.wicket.markupcontainer.iterator()", "org.apache.wicket.markupcontainer.contains(component;boolean)", "org.apache.wicket.markupcontainer.hasassociatedmarkup()", "org.apache.wicket.markupcontainer.renderassociatedmarkup(string;string)", "org.apache.wicket.markupcontainer.copychildren()", "org.apache.wicket.markupcontainer.remove(component)", "org.apache.wicket.markupcontainer.rendercomponenttagbody(markupstream;componenttag)", "org.apache.wicket.markupcontainer.onrender(markupstream)", "org.apache.wicket.markupcontainer.visitchildren(class;ivisitor)", "org.apache.wicket.markupcontainer.findmarkupstream()", "org.apache.wicket.markupcontainer.children_set(int;component)", "org.apache.wicket.markupcontainer.removechildren()", "org.apache.wicket.markupcontainer.getassociatedmarkupstream(boolean)", "org.apache.wicket.markupcontainer.children_remove(component)", "org.apache.wicket.markupcontainer.access$100(markupcontainer;int)", "org.apache.wicket.markupcontainer.markupcontainer(string;imodel)", "org.apache.wicket.markupcontainer.addorreplace(component[])", "org.apache.wicket.markupcontainer.children_indexof(component)", "org.apache.wicket.markupcontainer.removeall()", "org.apache.wicket.markupcontainer.markupcontainer(string)", "org.apache.wicket.markupcontainer.get(string)", "org.apache.wicket.markupcontainer.setdefaultmodel(imodel)"]}, "component": {"distance": 1.0015, "methods": ["org.apache.wicket.component.notifybehaviorscomponentrendered()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class;pageparameters)", "org.apache.wicket.component.remove(ibehavior)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.bookmarkablelistenerinterfacerequesttarget(string;class;pageparameters;component;requestlistenerinterface)", "org.apache.wicket.component.findmarkupstream()", "org.apache.wicket.component.getmarkupattributes()", "org.apache.wicket.component.error(serializable)", "org.apache.wicket.component.getoutputmarkupid()", "org.apache.wicket.component.isenabled()", "org.apache.wicket.component.renderclosingcomponenttag(markupstream;componenttag;boolean)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageclass()", "org.apache.wicket.component.getmodelcomparator()", "org.apache.wicket.component.removechildren()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.tostring()", "org.apache.wicket.component.isenabledinhierarchy()", "org.apache.wicket.component.onafterrender()", "org.apache.wicket.component.setdefaultmodel(imodel)", "org.apache.wicket.request.target.component.componentrequesttarget.componentrequesttarget(component)", "org.apache.wicket.component.getdefaultmodelobject()", "org.apache.wicket.component.getmarkupid()", "org.apache.wicket.component.getsizeinbytes()", "org.apache.wicket.component.getmetadata()", "org.apache.wicket.component.getrequestcycle()", "org.apache.wicket.component.setoutputmarkupid(boolean)", "org.apache.wicket.component.data_set(int;object)", "org.apache.wicket.component.afterrender()", "org.apache.wicket.component.get(string)", "org.apache.wicket.component.getresponse()", "org.apache.wicket.component.callonbeforerenderifnotvisible()", "org.apache.wicket.component.getstyle()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.component.componentrequesttarget.respond(requestcycle)", "org.apache.wicket.component.setcomponentborder(icomponentborder)", "org.apache.wicket.component.tostring()", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.processevents(requestcycle)", "org.apache.wicket.component.isrenderallowed()", "org.apache.wicket.component.setescapemodelstrings(boolean)", "org.apache.wicket.component.initmodel()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface;requestparameters)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.hashcode()", "org.apache.wicket.component.getmarkupidimpl()", "org.apache.wicket.component.setignoreattributemodifier(boolean)", "org.apache.wicket.component.removebehavior(ibehavior)", "org.apache.wicket.component.onafterrenderchildren()", "org.apache.wicket.component.getbehaviors(class)", "org.apache.wicket.component.oncomponenttagbody(markupstream;componenttag)", "org.apache.wicket.component.getinnermostmodel(imodel)", "org.apache.wicket.component.oncomponenttag(componenttag)", "org.apache.wicket.component.detachmodels()", "org.apache.wicket.component.isvisibilityallowed()", "org.apache.wicket.component.notifybehaviorscomponentbeforerender()", "org.apache.wicket.component.getrenderbodyonly()", "org.apache.wicket.component.rendered()", "org.apache.wicket.component.render()", "org.apache.wicket.component.addstatechange(change)", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.processevents(requestcycle)", "org.apache.wicket.component.render(markupstream)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.setpage(page)", "org.apache.wicket.component.rendercomponent(markupstream)", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.listenerinterfacerequesttarget(page;component;requestlistenerinterface;requestparameters)", "org.apache.wicket.component.prepareforrender(boolean)", "org.apache.wicket.component.component(string;imodel)", "org.apache.wicket.component.replacewith(component)", "org.apache.wicket.component.getlocale()", "org.apache.wicket.component.data_remove(int)", "org.apache.wicket.component.isstateless()", "org.apache.wicket.component.internalbeforerender()", "org.apache.wicket.component.data_add(object)", "org.apache.wicket.component.getoutputmarkupplaceholdertag()", "org.apache.wicket.component.setid(string)", "org.apache.wicket.component.getdefaultmodelobjectasstring()", "org.apache.wicket.component.setflag(short;boolean)", "org.apache.wicket.component.getvariation()", "org.apache.wicket.component.rendercomponenttag(componenttag)", "org.apache.wicket.component.getescapemodelstrings()", "org.apache.wicket.request.target.component.listener.listenerinterfacerequesttarget.listenerinterfacerequesttarget(page;component;requestlistenerinterface)", "org.apache.wicket.request.target.component.listener.redirectpagerequesttarget.redirectpagerequesttarget(page)", "org.apache.wicket.component.getcomponentborder()", "org.apache.wicket.component.setmarkupidimpl(object)", "org.apache.wicket.request.target.component.pagerequesttarget.getpage()", "org.apache.wicket.component.setauto(boolean)", "org.apache.wicket.component.setparent(markupcontainer)", "org.apache.wicket.component.onbeforerender()", "org.apache.wicket.request.target.component.pagerequesttarget.tostring()", "org.apache.wicket.component.setmarkupid(string)", "org.apache.wicket.component.data_length()", "org.apache.wicket.component.setflag(int;boolean)", "org.apache.wicket.component.getmetadata(metadatakey)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage(requestcycle)", "org.apache.wicket.component.setvisibilityallowed(boolean)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpageparameters()", "org.apache.wicket.component.getid()", "org.apache.wicket.component.sameinnermostmodel(component)", "org.apache.wicket.component.findpage()", "org.apache.wicket.component.renderhead(htmlheadercontainer)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestparameters()", "org.apache.wicket.component.urlfor(resourcereference)", "org.apache.wicket.component.isvisible()", "org.apache.wicket.component.getbehaviors()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.respond(requestcycle)", "org.apache.wicket.component.getstring(string;imodel)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(class)", "org.apache.wicket.component.ispreparedforrender()", "org.apache.wicket.component.debug(string)", "org.apache.wicket.component.tostring(boolean)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.onprocessevents(requestcycle)", "org.apache.wicket.component.setresponsepage(class;pageparameters)", "org.apache.wicket.component.detachbehaviors()", "org.apache.wicket.component.getmodelimpl()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.detach(requestcycle)", "org.apache.wicket.component.detachchildren()", "org.apache.wicket.component.getfeedbackmessage()", "org.apache.wicket.component.setmarkupstream(markupstream)", "org.apache.wicket.request.target.component.listener.redirectpagerequesttarget.processevents(requestcycle)", "org.apache.wicket.component.urlfor(ibehavior;requestlistenerinterface)", "org.apache.wicket.component.getmarkupid(boolean)", "org.apache.wicket.component.setoutputmarkupplaceholdertag(boolean)", "org.apache.wicket.component.getstatelesshint()", "org.apache.wicket.component.getpagerelativepath()", "org.apache.wicket.component.setresponsepage(class)", "org.apache.wicket.component.sameinnermostmodel(imodel)", "org.apache.wicket.component.rendercomponent()", "org.apache.wicket.component.isignoreattributemodifier()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpagemapname()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.hashcode()", "org.apache.wicket.component.add(ibehavior[])", "org.apache.wicket.component.urlfor(requestlistenerinterface)", "org.apache.wicket.component.getlocalizer()", "org.apache.wicket.component.data_insert(int;object)", "org.apache.wicket.component.modelchanging()", "org.apache.wicket.component.checkhierarchychange(component)", "org.apache.wicket.component.getflag(short)", "org.apache.wicket.component.locatemarkupstream()", "org.apache.wicket.component.detachmodel()", "org.apache.wicket.component.getdefaultmodel()", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.getinterfacename()", "org.apache.wicket.request.target.component.pagerequesttarget.detach(requestcycle)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(string;class)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.getrequestlistenerinterface()", "org.apache.wicket.component.getpage()", "org.apache.wicket.component.getparent()", "org.apache.wicket.component.internalonmodelchanged()", "org.apache.wicket.component.setrenderbodyonly(boolean)", "org.apache.wicket.component.setredirect(boolean)", "org.apache.wicket.component.prepareforrender()", "org.apache.wicket.component.findparent(class)", "org.apache.wicket.component.onremove()", "org.apache.wicket.component.getrequest()", "org.apache.wicket.component.getsession()", "org.apache.wicket.component.urlfor(ipagemap;class;pageparameters)", "org.apache.wicket.component.getstring(string;imodel;string)", "org.apache.wicket.component.renderplaceholdertag(componenttag;response)", "org.apache.wicket.component.internalmarkrendering(boolean)", "org.apache.wicket.component.isauto()", "org.apache.wicket.component.ondetach()", "org.apache.wicket.component.component(string)", "org.apache.wicket.component.setresponsepage(page)", "org.apache.wicket.component.checkcomponenttag(componenttag;string)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.bookmarkablelistenerinterfacerequesttarget(string;class;pageparameters;string;string;int)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.getpage()", "org.apache.wicket.component.getflag(int)", "org.apache.wicket.component.<clinit>()", "org.apache.wicket.request.target.component.componentrequesttarget.detach(requestcycle)", "org.apache.wicket.component.markrendering(boolean)", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.gettarget()", "org.apache.wicket.component.continuetooriginaldestination()", "org.apache.wicket.component.getconverter(class)", "org.apache.wicket.component.isactionauthorized(action)", "org.apache.wicket.component.onmodelchanged()", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.tostring()", "org.apache.wicket.component.isversioned()", "org.apache.wicket.component.addbehavior(ibehavior)", "org.apache.wicket.component.onbeforerenderchildren()", "org.apache.wicket.component.getapplication()", "org.apache.wicket.component.readobject(objectinputstream)", "org.apache.wicket.component.isenableallowed()", "org.apache.wicket.component.data_get(int)", "org.apache.wicket.component.determinevisibility()", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.behaviorrequesttarget(page;component;requestlistenerinterface;requestparameters)", "org.apache.wicket.component.setrenderallowed(boolean)", "org.apache.wicket.component.getclassrelativepath()", "org.apache.wicket.component.internalonremove()", "org.apache.wicket.component.modelchanged()", "org.apache.wicket.component.setvisible(boolean)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.bookmarkablepagerequesttarget(string;class;pageparameters)", "org.apache.wicket.component.onmodelchanging()", "org.apache.wicket.component.setmetadata(metadatakey;object)", "org.apache.wicket.request.target.component.bookmarkablepagerequesttarget.newpage(class;requestcycle)", "org.apache.wicket.component.setenabled(boolean)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.getcomponentpath()", "org.apache.wicket.component.beforerender()", "org.apache.wicket.component.setmodelimpl(imodel)", "org.apache.wicket.component.findparentwithassociatedmarkup()", "org.apache.wicket.component.checkcomponenttagattribute(componenttag;string;string)", "org.apache.wicket.request.target.component.pagerequesttarget.pagerequesttarget(page)", "org.apache.wicket.request.target.component.bookmarkablelistenerinterfacerequesttarget.respond(requestcycle)", "org.apache.wicket.component.getbehaviorsrawlist()", "org.apache.wicket.component.isvisibleinhierarchy()", "org.apache.wicket.component.internalondetach()", "org.apache.wicket.component.haserrormessage()", "org.apache.wicket.request.target.component.listener.abstractlistenerinterfacerequesttarget.abstractlistenerinterfacerequesttarget(page;component;requestlistenerinterface)", "org.apache.wicket.component.detach()", "org.apache.wicket.component.setdefaultmodelobject(object)", "org.apache.wicket.component.getstring(string)", "org.apache.wicket.component.writeobject(objectoutputstream)", "org.apache.wicket.component.getdefaultmodelobjectasstring(object)", "org.apache.wicket.component.setrenderallowed()", "org.apache.wicket.component.replacecomponenttagbody(markupstream;componenttag;charsequence)", "org.apache.wicket.request.target.component.pagerequesttarget.respond(requestcycle)", "org.apache.wicket.request.target.component.listener.behaviorrequesttarget.processevents(requestcycle)", "org.apache.wicket.request.target.component.pagerequesttarget.hashcode()", "org.apache.wicket.component.getpath()", "org.apache.wicket.component.isbehavioraccepted(ibehavior)", "org.apache.wicket.component.info(string)", "org.apache.wicket.component.wrap(imodel)", "org.apache.wicket.component.setversioned(boolean)"]}, "feedbackmessages": {"distance": 0.85, "methods": ["org.apache.wicket.feedback.feedbackmessages.<clinit>()", "org.apache.wicket.feedback.feedbackmessages.info(component;string)", "org.apache.wicket.feedback.feedbackmessages.add(component;string;int)", "org.apache.wicket.feedback.feedbackmessages.trimtosize()", "org.apache.wicket.feedback.feedbackmessages.hasmessage(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.hasmessagefor(component;int)", "org.apache.wicket.feedback.feedbackmessages.messages(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.clear(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.iterator()", "org.apache.wicket.feedback.feedbackmessages.debug(component;string)", "org.apache.wicket.feedback.feedbackmessages.error(component;serializable)", "org.apache.wicket.feedback.feedbackmessages.haserrormessagefor(component)", "org.apache.wicket.feedback.feedbackmessages.feedbackmessages()", "org.apache.wicket.feedback.feedbackmessages.hasmessagefor(component)", "org.apache.wicket.feedback.feedbackmessages.add(feedbackmessage)", "org.apache.wicket.feedback.feedbackmessages.size()", "org.apache.wicket.feedback.feedbackmessages.messageforcomponent(component)"]}}