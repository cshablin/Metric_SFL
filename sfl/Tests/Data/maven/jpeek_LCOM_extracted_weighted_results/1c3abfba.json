{"scm": {"distance": 0.88, "methods": ["org.apache.maven.model.scm.setconnection(string)", "org.apache.maven.model.scm.getconnection()", "org.apache.maven.model.scm.scm()"]}, "defaultpluginprefixrequest": {"distance": 0.8889, "methods": ["org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setplugingroups(list)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setpom(model)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setrepositories(list)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.defaultpluginprefixrequest(string;mavensession)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setprefix(string)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setrepositorysession(repositorysystemsession)"]}, "distributionmanagement": {"distance": 0.8776, "methods": ["org.apache.maven.model.distributionmanagement.setsnapshotrepository(deploymentrepository)", "org.apache.maven.model.distributionmanagement.setrepository(deploymentrepository)", "org.apache.maven.model.distributionmanagement.setstatus(string)", "org.apache.maven.model.distributionmanagement.getrepository()", "org.apache.maven.model.distributionmanagement.getstatus()", "org.apache.maven.model.distributionmanagement.getsnapshotrepository()", "org.apache.maven.model.distributionmanagement.distributionmanagement()", "org.apache.maven.model.distributionmanagement.getlocation(object)"]}, "dependencycontext": {"distance": 0.9107, "methods": ["org.apache.maven.lifecycle.internal.dependencycontext.dependencycontext(mavenproject;collection;collection)"]}, "repositorypolicy": {"distance": 0.8333, "methods": ["org.apache.maven.model.repositorypolicy.setupdatepolicy(string)", "org.apache.maven.model.repositorypolicy.clone()", "org.apache.maven.model.repositorypolicy.repositorypolicy()", "org.apache.maven.model.repositorypolicy.setenabled(string)"]}, "buildlogitem$dependencylogentry": {"distance": 1.25, "methods": ["org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getexecutionplanitem()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;string)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getmessage()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodedescription(long)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;executionplanitem;long;long;string)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodekey()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getelapsed()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tostring()"]}, "defaultmodelbuildingresult": {"distance": 0.8889, "methods": ["org.apache.maven.model.building.defaultmodelbuildingresult.setproblems(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactiveexternalprofiles(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.addmodelid(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.geteffectivemodel()", "org.apache.maven.model.building.defaultmodelbuildingresult.setrawmodel(string;model)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactivepomprofiles(string;list)", "org.apache.maven.model.building.defaultmodelbuildingresult.seteffectivemodel(model)", "org.apache.maven.model.building.defaultmodelbuildingresult.getproblems()", "org.apache.maven.model.building.defaultmodelbuildingresult.defaultmodelbuildingresult()"]}, "mavenexecutionplan": {"distance": 0.9167, "methods": ["org.apache.maven.lifecycle.mavenexecutionplan.mavenexecutionplan(list;defaultlifecycles)", "org.apache.maven.lifecycle.mavenexecutionplan.size()", "org.apache.maven.lifecycle.mavenexecutionplan.iterator()", "org.apache.maven.lifecycle.mavenexecutionplan.getexecutionplanitems()", "org.apache.maven.lifecycle.mavenexecutionplan.findlastinphase(string)", "org.apache.maven.lifecycle.mavenexecutionplan.getmojoexecutions()", "org.apache.maven.lifecycle.mavenexecutionplan.containsphase(string)", "org.apache.maven.lifecycle.mavenexecutionplan.waituntilalldone()", "org.apache.maven.lifecycle.mavenexecutionplan.getnonthreadsafeplugins()", "org.apache.maven.lifecycle.mavenexecutionplan.getdistinctphasesinorderofexecutionplanappearance(list)"]}, "patternset": {"distance": 0.8182, "methods": ["org.apache.maven.model.patternset.patternset()", "org.apache.maven.model.patternset.getlocation(object)", "org.apache.maven.model.patternset.clone()"]}, "lifecycletask": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.lifecycletask.lifecycletask(string)"]}, "mojodescriptorcreator": {"distance": 1.2, "methods": ["org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(plugin;collection)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findpluginforprefix(string;mavensession)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.injectplugindeclarationfromproject(plugin;mavenproject)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.mojodescriptorcreator(pluginversionresolver;buildpluginmanager;pluginprefixresolver;lifecyclepluginresolver)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.convert(mojodescriptor)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.resolvepluginversion(plugin;mavensession;mavenproject)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(string;string;collection)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.getmojodescriptor(string;mavensession;mavenproject)"]}, "defaultlifecycletasksegmentcalculator": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.defaultlifecycletasksegmentcalculator.calculatetasksegments(mavensession)", "org.apache.maven.lifecycle.internal.defaultlifecycletasksegmentcalculator.defaultlifecycletasksegmentcalculator()"]}, "pluginexecution": {"distance": 0.9273, "methods": ["org.apache.maven.model.pluginexecution.addgoal(string)", "org.apache.maven.model.pluginexecution.getgoals()", "org.apache.maven.model.pluginexecution.clone()", "org.apache.maven.model.pluginexecution.setphase(string)", "org.apache.maven.model.pluginexecution.tostring()", "org.apache.maven.model.pluginexecution.setgoals(list)", "org.apache.maven.model.pluginexecution.setid(string)", "org.apache.maven.model.pluginexecution.pluginexecution()", "org.apache.maven.model.pluginexecution.getid()"]}, "defaultlifecycleexecutionplancalculator": {"distance": 1.5, "methods": ["org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.setupmojoexections(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.populatemojoexecutionconfiguration(mavenproject;mojoexecution;boolean)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.calculatemojoexecutions(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.finalizemojoconfiguration(mojoexecution)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.calculateexecutionplan(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.findplugin(string;string;collection)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.calculateforkedexecutions(mojoexecution;mavensession;mavenproject;collection)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.getmojoconfiguration(mojodescriptor)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.defaultlifecycleexecutionplancalculator(buildpluginmanager;defaultlifecycles;mojodescriptorcreator;lifecyclepluginresolver;defaultschedules)"]}, "mavenmodelmerger": {"distance": 1.0286, "methods": ["org.apache.maven.model.merge.mavenmodelmerger.mergemodel_contributors(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_name(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_mailinglists(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_cimanagement(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_repositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getpluginkey(plugin)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_profiles(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_url(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_modelversion(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_artifactid(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_developers(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getrepositorybasekey(repositorybase)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_prerequisites(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_licenses(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_modules(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_issuemanagement(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_filters(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_organization(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mavenmodelmerger()"]}, "stringsearchmodelinterpolator": {"distance": 1.5, "methods": ["org.apache.maven.model.interpolation.stringsearchmodelinterpolator.stringsearchmodelinterpolator()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolateobject(object;model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$000()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$100()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolatemodel(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.<clinit>()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.createinterpolator()"]}, "defaultlifecycles": {"distance": 0.8889, "methods": ["org.apache.maven.lifecycle.defaultlifecycles.get(string)", "org.apache.maven.lifecycle.defaultlifecycles.getphasetolifecyclemap()", "org.apache.maven.lifecycle.defaultlifecycles.defaultlifecycles(map;logger)", "org.apache.maven.lifecycle.defaultlifecycles.getlifecycles()"]}, "buildercommon": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.buildercommon.getkey(mavenproject)", "org.apache.maven.lifecycle.internal.buildercommon.buildercommon(lifecycledebuglogger;lifecycleexecutionplancalculator;logger)", "org.apache.maven.lifecycle.internal.buildercommon.attachtothread(mavenproject)", "org.apache.maven.lifecycle.internal.buildercommon.resolvebuildplan(mavensession;mavenproject;tasksegment;set)"]}, "schedule": {"distance": 0.8333, "methods": ["org.apache.maven.lifecycle.schedule.schedule(string;boolean;boolean)", "org.apache.maven.lifecycle.schedule.getupstreamphase()", "org.apache.maven.lifecycle.schedule.appliesto(mojoexecution)", "org.apache.maven.lifecycle.schedule.isparallel()", "org.apache.maven.lifecycle.schedule.getphase()", "org.apache.maven.lifecycle.schedule.ismojosynchronized()", "org.apache.maven.lifecycle.schedule.hasupstreamphasedefined()"]}, "defaultmodelbuilder": {"distance": 1.0, "methods": ["org.apache.maven.model.building.defaultmodelbuilder.fireevent(model;modelbuildingrequest;modelproblemcollector;modelbuildingeventcatapult)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;collection)", "org.apache.maven.model.building.defaultmodelbuilder.interpolatemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelnormalizer(modelnormalizer)", "org.apache.maven.model.building.defaultmodelbuilder.setsuperpomprovider(superpomprovider)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelurlnormalizer(modelurlnormalizer)", "org.apache.maven.model.building.defaultmodelbuilder.setpluginconfigurationexpander(pluginconfigurationexpander)", "org.apache.maven.model.building.defaultmodelbuilder.readmodel(modelsource;file;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setreportconfigurationexpander(reportconfigurationexpander)", "org.apache.maven.model.building.defaultmodelbuilder.setinheritanceassembler(inheritanceassembler)", "org.apache.maven.model.building.defaultmodelbuilder.setprofileinjector(profileinjector)", "org.apache.maven.model.building.defaultmodelbuilder.checkpluginversions(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivationcontext(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelpathtranslator(modelpathtranslator)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelinterpolator(modelinterpolator)", "org.apache.maven.model.building.defaultmodelbuilder.readparent(model;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementimporter(dependencymanagementimporter)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelvalidator(modelvalidator)", "org.apache.maven.model.building.defaultmodelbuilder.assembleinheritance(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementinjector(dependencymanagementinjector)", "org.apache.maven.model.building.defaultmodelbuilder.setpluginmanagementinjector(pluginmanagementinjector)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelprocessor(modelprocessor)", "org.apache.maven.model.building.defaultmodelbuilder.importdependencymanagement(model;modelbuildingrequest;defaultmodelproblemcollector;collection)", "org.apache.maven.model.building.defaultmodelbuilder.setreportingconverter(reportingconverter)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult;collection)", "org.apache.maven.model.building.defaultmodelbuilder.setprofileselector(profileselector)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult)", "org.apache.maven.model.building.defaultmodelbuilder.getsupermodel()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilder.setlifecyclebindingsinjector(lifecyclebindingsinjector)", "org.apache.maven.model.building.defaultmodelbuilder.defaultmodelbuilder()"]}, "buildbase": {"distance": 0.9167, "methods": ["org.apache.maven.model.buildbase.addresource(resource)", "org.apache.maven.model.buildbase.getresources()", "org.apache.maven.model.buildbase.getfinalname()", "org.apache.maven.model.buildbase.getdefaultgoal()", "org.apache.maven.model.buildbase.setresources(list)", "org.apache.maven.model.buildbase.setdirectory(string)", "org.apache.maven.model.buildbase.clone()", "org.apache.maven.model.buildbase.getfilters()", "org.apache.maven.model.buildbase.setfinalname(string)", "org.apache.maven.model.buildbase.gettestresources()", "org.apache.maven.model.buildbase.setfilters(list)", "org.apache.maven.model.buildbase.getdirectory()", "org.apache.maven.model.buildbase.buildbase()", "org.apache.maven.model.buildbase.settestresources(list)"]}, "lifecycle": {"distance": 0.8889, "methods": ["org.apache.maven.lifecycle.internal.phaserecorder.phaserecorder(mavenproject)", "org.apache.maven.lifecycle.schedule.schedule(string;boolean;boolean)", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.concurrentbuildlogger()", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub.pluginversionresolverstub()", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.debugdependencyrequirements(list)", "org.apache.maven.lifecycle.internal.concurrencydependencygraphtest.concurrencydependencygraphtest()", "org.apache.maven.lifecycle.internal.stub.mojoexecutorstub.execute(mavensession;mojoexecution;projectindex;dependencycontext;phaserecorder)", "org.apache.maven.lifecycle.scheduling.getschedule(string)", "org.apache.maven.lifecycle.internal.projectbuildlist.iterator()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder$2.lifecycleweavebuilder$2(lifecycleweavebuilder;mavenexecutionplan;projectsegment;reactorbuildstatus;concurrentbuildlogger;reactorcontext;dependencycontext;mavensession)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getexecutionplanitem()", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(plugin;collection)", "org.apache.maven.lifecycle.internal.executionplanitem.getmojoexecution()", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub.pluginprefixresolverstub()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder$1.call()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getsortedprojects()", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.createbuildlogitem(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getupstreamprojects(mavenproject;boolean)", "org.apache.maven.lifecycle.internal.projectsegment.gettransitiveupstreamprojects()", "org.apache.maven.lifecycle.internal.buildlogitem.getproject()", "org.apache.maven.lifecycle.internal.buildlogitem.buildlogitem(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.mojoexecutor.newdependencycontext(mavensession;list)", "org.apache.maven.lifecycle.internal.lifecyclepluginresolver.lifecyclepluginresolver(pluginversionresolver)", "org.apache.maven.lifecycle.schedule.getupstreamphase()", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.setupmojoexections(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.defaultlifecycletasksegmentcalculator.calculatetasksegments(mavensession)", "org.apache.maven.lifecycle.internal.projectbuildlist.getbytasksegment(tasksegment)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.populatemojoexecutionconfiguration(mavenproject;mojoexecution;boolean)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createexecutionplan(mavenproject;list)", "org.apache.maven.lifecycle.defaultlifecycles.get(string)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findpluginforprefix(string;mavensession)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;string)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.buildexecutionplanitem(executionplanitem;phaserecorder;schedule;reactorcontext;projectsegment;dependencycontext)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder$1.lifecycleweavebuilder$1(lifecycleweavebuilder;projectsegment;set)", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.getrootschedulablebuilds()", "org.apache.maven.lifecycle.internal.lifecycletask.lifecycletask(string)", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.markasfinished(mavenproject)", "org.apache.maven.lifecycle.internal.stub.mojoexecutorstub.mojoexecutorstub()", "org.apache.maven.lifecycle.internal.currentphaseforthread.setphase(string)", "org.apache.maven.lifecycle.mavenexecutionplan.mavenexecutionplan(list;defaultlifecycles)", "org.apache.maven.lifecycle.internal.mojoexecutor.toscopes(string)", "org.apache.maven.lifecycle.internal.lifecyclepluginresolver.resolvemissingpluginversions(mavenproject;mavensession)", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.debugprojectplan(mavenproject;mavenexecutionplan)", "org.apache.maven.lifecycle.internal.dependencycontext.dependencycontext(mavenproject;collection;collection)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishalted()", "org.apache.maven.lifecycle.scheduling.getlifecycle()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.findtestscopedartifact(mavenproject)", "org.apache.maven.lifecycle.internal.tasksegment.gettasks()", "org.apache.maven.lifecycle.lifecycle.lifecycle(string;list;map)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub$dependency.addifupstreamof(mavenproject;list)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getprojectbexecutionplan()", "org.apache.maven.lifecycle.internal.mojoexecutor.collectdependencyrequirements(set;set;collection)", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub.resolve(pluginversionrequest)", "org.apache.maven.lifecycle.schedule.appliesto(mojoexecution)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$100(lifecycleweavebuilder)", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean;object[])", "org.apache.maven.lifecycle.internal.buildlistcalculator.calculateprojectbuilds(mavensession;list)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$300(lifecycleweavebuilder;executionplanitem;phaserecorder;schedule;reactorcontext;projectsegment;dependencycontext)", "org.apache.maven.lifecycle.internal.buildercommon.getkey(mavenproject)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.calculatemojoexecutions(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.createmojodescriptorcreator()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getmavensession(mavenproject)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.injectplugindeclarationfromproject(plugin;mavenproject)", "org.apache.maven.lifecycle.internal.buildercommon.buildercommon(lifecycledebuglogger;lifecycleexecutionplancalculator;logger)", "org.apache.maven.lifecycle.mavenexecutionplan.size()", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createmojoexecution(string;string;mojodescriptor)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.reactorbuildstatus(projectdependencygraph)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getmessage()", "org.apache.maven.lifecycle.internal.executionplanitem.executionplanitem(mojoexecution;schedule)", "org.apache.maven.lifecycle.internal.buildlogitem.tostring(long)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.<clinit>()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.createtasksegment()", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub$1.getartifactid()", "org.apache.maven.lifecycle.internal.buildercommon.attachtothread(mavenproject)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.createepfuture(projectsegment;set)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getprojectbuilds(mavensession)", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.lifecycledebuglogger(logger)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.calculateexecutionplan(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.finalizemojoconfiguration(mojoexecution)", "org.apache.maven.lifecycle.schedule.isparallel()", "org.apache.maven.lifecycle.internal.executionplanitem.getlifecyclephase()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.createprojectbuild(mavenproject;mavensession;tasksegment)", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.calculateexecutionplan(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.defaultlifecycles.getphasetolifecyclemap()", "org.apache.maven.lifecycle.defaultlifecycles.defaultlifecycles(map;logger)", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.concurrencydependencygraph(projectbuildlist;projectdependencygraph)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder$2.call()", "org.apache.maven.lifecycle.internal.stub.lifecycletasksegmentcalculatorstub.lifecycletasksegmentcalculatorstub()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.build(projectbuildlist;reactorcontext;list;mavensession;executorservice;reactorbuildstatus)", "org.apache.maven.lifecycle.schedule.getphase()", "org.apache.maven.lifecycle.internal.reactorbuildstatus.isblacklisted(mavenproject)", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.getbuildercommon()", "org.apache.maven.lifecycle.internal.reactorcontext.getreactorbuildstatus()", "org.apache.maven.lifecycle.internal.reactorcontext.getoriginalcontextclassloader()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.createbuildcontext(mavensession)", "org.apache.maven.lifecycle.internal.defaultlifecycletasksegmentcalculator.defaultlifecycletasksegmentcalculator()", "org.apache.maven.lifecycle.internal.stub.executioneventcatapultstub.fire(type;mavensession;mojoexecution)", "org.apache.maven.lifecycle.defaultschedules.createexecutionplanitem(mavenproject;list)", "org.apache.maven.lifecycle.internal.stub.loggerstub.isdebugenabled()", "org.apache.maven.lifecycle.schedule.ismojosynchronized()", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.debugmojoexecution(mojoexecution)", "org.apache.maven.lifecycle.internal.tasksegment.isaggregating()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.getupstreamreactordependencies(projectsegment)", "org.apache.maven.lifecycle.internal.buildlogitem.access$000(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.defaultschedules.defaultschedules(list)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createmojodescriptor(string;boolean)", "org.apache.maven.lifecycle.internal.stub.lifecycletasksegmentcalculatorstub.calculatetasksegments(mavensession;list)", "org.apache.maven.lifecycle.internal.stub.defaultschedulesstub.createdefaultschedules()", "org.apache.maven.lifecycle.internal.stub.defaultlifecyclesstub.createdefaultlifecycles()", "org.apache.maven.lifecycle.internal.buildlogitem.tograph(long)", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.gettasksegmentcalculator()", "org.apache.maven.lifecycle.mavenexecutionplan.iterator()", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishaltedorblacklisted(mavenproject)", "org.apache.maven.lifecycle.internal.buildlogitem.addwait(mavenproject;executionplanitem;long)", "org.apache.maven.lifecycle.scheduling.scheduling(string;list)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.lifecycleexecutionplancalculatorstub()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.lifecycleweavebuilder(mojoexecutor;buildercommon;logger;executioneventcatapult)", "org.apache.maven.lifecycle.internal.stub.loggerstub.debug(string)", "org.apache.maven.lifecycle.mavenexecutionplan.getexecutionplanitems()", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.findplugin(string;string;collection)", "org.apache.maven.lifecycle.internal.goaltask.goaltask(string)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.waitforappropriateupstreamexecutionstofinish(buildlogitem;executionplanitem;projectsegment;schedule)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.<clinit>()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getmavensession()", "org.apache.maven.lifecycle.internal.buildercommon.resolvebuildplan(mavensession;mavenproject;tasksegment;set)", "org.apache.maven.lifecycle.defaultschedules.getscheduling(string)", "org.apache.maven.lifecycle.internal.stub.loggerstub.info(string)", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub.resolve(pluginprefixrequest)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.buildexecutionplanitem(reactorcontext;executionplanitem;projectsegment;dependencycontext;phaserecorder)", "org.apache.maven.lifecycle.internal.concurrentbuildloggertest.concurrentbuildloggertest()", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.calculateforkedexecutions(mojoexecution;mavensession;mavenproject;collection)", "org.apache.maven.lifecycle.internal.projectbuildlist.closeall()", "org.apache.maven.lifecycle.internal.projectbuildlist.projectbuildlist(list)", "org.apache.maven.lifecycle.internal.stub.buildpluginmanagerstub.getmojodescriptor(plugin;string;list;repositorysystemsession)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.mojodescriptorcreator(pluginversionresolver;buildpluginmanager;pluginprefixresolver;lifecyclepluginresolver)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$400(lifecycleweavebuilder;buildlogitem;executionplanitem;projectsegment;schedule)", "org.apache.maven.lifecycle.internal.buildlogitem.getmojoexecutiondescription(executionplanitem)", "org.apache.maven.lifecycle.internal.stub.executioneventcatapultstub.executioneventcatapultstub()", "org.apache.maven.lifecycle.internal.projectsegment.projectsegment(mavenproject;tasksegment;mavensession)", "org.apache.maven.lifecycle.internal.projectsegment.getimmediateupstreamprojects()", "org.apache.maven.lifecycle.internal.buildlogitem.getlifecyclephase(executionplanitem)", "org.apache.maven.lifecycle.internal.projectsegment.getproject()", "org.apache.maven.lifecycle.internal.buildlistcalculator.buildlistcalculator()", "org.apache.maven.lifecycle.internal.buildercommontest.getbuildercommon()", "org.apache.maven.lifecycle.internal.stub.loggerstub.loggerstub()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getdependencies()", "org.apache.maven.lifecycle.internal.reactorcontext.getresult()", "org.apache.maven.lifecycle.scheduling.getschedule(mojoexecution)", "org.apache.maven.lifecycle.schedule.hasupstreamphasedefined()", "org.apache.maven.lifecycle.internal.executionplanitem.getschedule()", "org.apache.maven.lifecycle.internal.buildlogitem.nodekey(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.reactorcontext.getprojectindex()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.createcallableforbuildingonefullmodule(reactorcontext;mavensession;reactorbuildstatus;mavenexecutionplan;projectsegment;dependencycontext;concurrentbuildlogger)", "org.apache.maven.lifecycle.internal.stub.mojoexecutorstub.createmojodescriptor(string)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$200(lifecycleweavebuilder;projectsegment)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodedescription(long)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;executionplanitem;long;long;string)", "org.apache.maven.lifecycle.internal.mojoexecutor.mojoexecutor()", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub$1.pluginprefixresolverstub$1(pluginprefixresolverstub)", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.getweavebuilder(mojoexecutor)", "org.apache.maven.lifecycle.lifecycle.getphases()", "org.apache.maven.lifecycle.internal.phaserecorder.isdifferentphase(mojoexecution)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getprojectbuildlist(mavensession)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodekey()", "org.apache.maven.lifecycle.internal.buildlogitem.access$100(executionplanitem)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.projectdependencygraphstub()", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub$1.getversion()", "org.apache.maven.lifecycle.mavenexecutionplan.findlastinphase(string)", "org.apache.maven.lifecycle.mavenexecutionplan.getmojoexecutions()", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.tograph()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getelapsed()", "org.apache.maven.lifecycle.internal.projectsegment.getsession()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getdownstreamprojects(mavenproject;boolean)", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub$1.pluginversionresolverstub$1(pluginversionresolverstub)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.convert(mojodescriptor)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getnumberofexceutions(projectbuildlist)", "org.apache.maven.lifecycle.internal.executionplanitem.waituntildone()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tostring()", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.resolvepluginversion(plugin;mavensession;mavenproject)", "org.apache.maven.lifecycle.internal.reactorcontext.reactorcontext(mavenexecutionresult;projectindex;classloader;reactorbuildstatus)", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.runwithcompletionservice(executorservice)", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub$1.getgroupid()", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.getmojoconfiguration(mojodescriptor)", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.getschedulablenewprocesses(mavenproject)", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean)", "org.apache.maven.lifecycle.internal.projectsegment.gettasksegment()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$000(lifecycleweavebuilder)", "org.apache.maven.lifecycle.internal.executionplanitem.setcomplete()", "org.apache.maven.lifecycle.mavenexecutionplan.containsphase(string)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.createexecutionplacecalculator(mojodescriptorcreator)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(string;string;collection)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.lifecycleexecutionplancalculatortest()", "org.apache.maven.lifecycle.mavenexecutionplan.waituntilalldone()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub$dependency.projectdependencygraphstub$dependency(projectdependencygraphstub;mavenproject;mavenproject)", "org.apache.maven.lifecycle.internal.stub.defaultschedulesstub.getschedulinglist()", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createmojodescriptor(string)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getprojectaexceutionplan()", "org.apache.maven.lifecycle.internal.buildlogitem.setcomplete()", "org.apache.maven.lifecycle.mavenexecutionplan.getnonthreadsafeplugins()", "org.apache.maven.lifecycle.internal.defaultlifecycleexecutionplancalculator.defaultlifecycleexecutionplancalculator(buildpluginmanager;defaultlifecycles;mojodescriptorcreator;lifecyclepluginresolver;defaultschedules)", "org.apache.maven.lifecycle.lifecycle.tostring()", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.tostring()", "org.apache.maven.lifecycle.internal.buildlogitem.adddependency(mavenproject;string)", "org.apache.maven.lifecycle.internal.stub.buildpluginmanagerstub.buildpluginmanagerstub()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub$dependency.addifdownstream(mavenproject;list)", "org.apache.maven.lifecycle.defaultlifecycles.getlifecycles()", "org.apache.maven.lifecycle.mavenexecutionplan.getdistinctphasesinorderofexecutionplanappearance(list)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.getmojodescriptor(string;mavensession;mavenproject)"]}, "mojodescriptor": {"distance": 0.9867, "methods": ["org.apache.maven.plugin.descriptor.mojodescriptor.getmojoconfiguration()", "org.apache.maven.plugin.descriptor.mojodescriptor.getplugindescriptor()", "org.apache.maven.plugin.descriptor.mojodescriptor.isforking()", "org.apache.maven.plugin.descriptor.mojodescriptor.mojodescriptor()", "org.apache.maven.plugin.descriptor.mojodescriptor.isthreadsafe()", "org.apache.maven.plugin.descriptor.mojodescriptor.getparameters()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencycollectionrequired()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencyresolutionrequired()", "org.apache.maven.plugin.descriptor.mojodescriptor.isaggregator()", "org.apache.maven.plugin.descriptor.mojodescriptor.setplugindescriptor(plugindescriptor)", "org.apache.maven.plugin.descriptor.mojodescriptor.getphase()", "org.apache.maven.plugin.descriptor.mojodescriptor.getgoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutegoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.setphase(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.setthreadsafe(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutephase()"]}, "reactorbuildstatus": {"distance": 0.8333, "methods": ["org.apache.maven.lifecycle.internal.reactorbuildstatus.ishalted()", "org.apache.maven.lifecycle.internal.reactorbuildstatus.reactorbuildstatus(projectdependencygraph)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.isblacklisted(mavenproject)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishaltedorblacklisted(mavenproject)"]}, "activation": {"distance": 0.84, "methods": ["org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.jdkversionprofileactivator$rangevalue(string;boolean)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrelationorder(string;rangevalue;boolean)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrange(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isinrange(string;list)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newproperties(string)", "org.apache.maven.model.activation.getjdk()", "org.apache.maven.model.activation.getos()", "org.apache.maven.model.activation.setfile(activationfile)", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$000(rangevalue)", "org.apache.maven.model.activation.getfile()", "org.apache.maven.model.profile.activation.fileprofileactivator.setpathtranslator(pathtranslator)", "org.apache.maven.model.activation.setproperty(activationproperty)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newprofile(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.addzerotokens(list;int)", "org.apache.maven.model.activation.getproperty()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.activation.isactivebydefault()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newprofile(string;string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.activation.activation()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newproperties(string;string)", "org.apache.maven.model.activation.setactivebydefault(boolean)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$100(rangevalue)", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isrange(string)", "org.apache.maven.model.profile.activation.fileprofileactivator$1.fileprofileactivator$1(fileprofileactivator;boolean;file)", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.activation.setjdk(string)", "org.apache.maven.model.activation.clone()"]}, "defaultmavenexecutionrequest": {"distance": 0.9895, "methods": ["org.apache.maven.execution.defaultmavenexecutionrequest.isthreadconfigurationpresent()", "org.apache.maven.execution.defaultmavenexecutionrequest.setgoals(list)", "org.apache.maven.execution.defaultmavenexecutionrequest.getusersettingsfile()", "org.apache.maven.execution.defaultmavenexecutionrequest.getgoals()", "org.apache.maven.execution.defaultmavenexecutionrequest.getplugingroups()", "org.apache.maven.execution.defaultmavenexecutionrequest.defaultmavenexecutionrequest()", "org.apache.maven.execution.defaultmavenexecutionrequest.getthreadcount()", "org.apache.maven.execution.defaultmavenexecutionrequest.setexecutionlistener(executionlistener)"]}, "plugindescriptor": {"distance": 0.9679, "methods": ["org.apache.maven.plugin.descriptor.plugindescriptor.getgroupid()", "org.apache.maven.plugin.descriptor.plugindescriptor.getplugin()", "org.apache.maven.plugin.descriptor.plugindescriptor.getversion()", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifactid()", "org.apache.maven.plugin.descriptor.plugindescriptor.setartifactid(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setplugin(plugin)", "org.apache.maven.plugin.descriptor.plugindescriptor.plugindescriptor()"]}, "defaultmodelpathtranslator": {"distance": 1.0, "methods": ["org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.path.defaultmodelpathtranslator.setpathtranslator(pathtranslator)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(model;file;modelbuildingrequest)", "org.apache.maven.model.path.defaultmodelpathtranslator.defaultmodelpathtranslator()"]}, "defaultmodelvalidator": {"distance": 2.0, "methods": ["org.apache.maven.model.validation.defaultmodelvalidator.validaterepository(modelproblemcollector;repository;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateboolean(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.equals(string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validatebannedcharacters(string;modelproblemcollector;severity;string;string;inputlocationtracker;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawdependencies(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawplugins(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateenum(string;modelproblemcollector;severity;string;string;inputlocationtracker;string[])", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnoexpression(string;modelproblemcollector;severity;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validatepluginversion(string;modelproblemcollector;string;string;inputlocationtracker;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(int;int)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.addviolation(modelproblemcollector;severity;string;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectiveplugindependencies(modelproblemcollector;plugin;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.getlocation(string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepositories(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(modelbuildingrequest;int)", "org.apache.maven.model.validation.defaultmodelvalidator.validateresources(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependency(modelproblemcollector;dependency;boolean;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.defaultmodelvalidator()", "org.apache.maven.model.validation.defaultmodelvalidator.hasexpression(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependencies(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateversion(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawmodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidator.validatenotnull(string;modelproblemcollector;severity;object;string;inputlocationtracker)"]}, "build": {"distance": 0.9167, "methods": ["org.apache.maven.model.build.clone()", "org.apache.maven.model.build.settestoutputdirectory(string)", "org.apache.maven.model.build.setsourcedirectory(string)", "org.apache.maven.model.build.settestsourcedirectory(string)", "org.apache.maven.model.build.getsourcedirectory()", "org.apache.maven.model.build.gettestsourcedirectory()", "org.apache.maven.model.build.setoutputdirectory(string)", "org.apache.maven.model.build.getextensions()", "org.apache.maven.model.build.setscriptsourcedirectory(string)", "org.apache.maven.model.build.getscriptsourcedirectory()", "org.apache.maven.model.build.build()", "org.apache.maven.model.build.addextension(extension)", "org.apache.maven.model.build.gettestoutputdirectory()", "org.apache.maven.model.build.getoutputdirectory()"]}, "profile": {"distance": 0.8462, "methods": ["org.apache.maven.model.profile.defaultprofileselector.addprofileactivator(profileactivator)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.jdkversionprofileactivator$rangevalue(string;boolean)", "org.apache.maven.model.profile.defaultprofileinjector.injectprofile(model;profile;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrelationorder(string;rangevalue;boolean)", "org.apache.maven.model.profile.profile()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrange(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isinrange(string;list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newproperties(string)", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$000(rangevalue)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.activation.fileprofileactivator.setpathtranslator(pathtranslator)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.profile.getsource()", "org.apache.maven.model.profile.clone()", "org.apache.maven.model.profile.getactivation()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newprofile(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.addzerotokens(list;int)", "org.apache.maven.model.profile.setbuild(buildbase)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.profile.setactivation(activation)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newprofile(string;string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newproperties(string;string)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergemodelbase(modelbase;modelbase)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$100(rangevalue)", "org.apache.maven.model.profile.defaultprofileinjector.defaultprofileinjector()", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isrange(string)", "org.apache.maven.model.profile.tostring()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger()", "org.apache.maven.model.profile.setid(string)", "org.apache.maven.model.profile.activation.fileprofileactivator$1.fileprofileactivator$1(fileprofileactivator;boolean;file)", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectdirectory()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.profile.getbuild()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger(1)", "org.apache.maven.model.profile.getid()"]}, "parent": {"distance": 0.9, "methods": ["org.apache.maven.model.parent.getgroupid()", "org.apache.maven.model.parent.setgroupid(string)", "org.apache.maven.model.parent.parent()", "org.apache.maven.model.parent.setartifactid(string)", "org.apache.maven.model.parent.getversion()", "org.apache.maven.model.parent.getartifactid()", "org.apache.maven.model.parent.setversion(string)", "org.apache.maven.model.parent.getlocation(object)"]}, "defaultprofileselector": {"distance": 1.0, "methods": ["org.apache.maven.model.profile.defaultprofileselector.addprofileactivator(profileactivator)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)"]}, "mavenproject": {"distance": 0.9926, "methods": ["org.apache.maven.project.mavenproject.getdependencies()", "org.apache.maven.project.mavenproject.tostring()", "org.apache.maven.project.mavenproject.getpluginmanagement()", "org.apache.maven.project.mavenproject.eq(object;object)", "org.apache.maven.project.mavenproject.setartifactid(string)", "org.apache.maven.project.mavenproject.getbuild()", "org.apache.maven.project.mavenproject.getbuildextensions()", "org.apache.maven.project.mavenproject.setmodel(model)", "org.apache.maven.project.mavenproject.mavenproject(model)", "org.apache.maven.project.mavenproject.getremoteprojectrepositories()", "org.apache.maven.project.mavenproject.addprojectreference(mavenproject)", "org.apache.maven.project.mavenproject.getmodelbuild()", "org.apache.maven.project.mavenproject.equals(object)", "org.apache.maven.project.mavenproject.getattachedartifacts()", "org.apache.maven.project.mavenproject.getartifactid()", "org.apache.maven.project.mavenproject.getversion()", "org.apache.maven.project.mavenproject.getartifact()", "org.apache.maven.project.mavenproject.getbuildplugins()", "org.apache.maven.project.mavenproject.mavenproject()", "org.apache.maven.project.mavenproject.getremotepluginrepositories()", "org.apache.maven.project.mavenproject.hashcode()", "org.apache.maven.project.mavenproject.getexecutionproject()", "org.apache.maven.project.mavenproject.isexecutionroot()", "org.apache.maven.project.mavenproject.getgroupid()", "org.apache.maven.project.mavenproject.getfile()", "org.apache.maven.project.mavenproject.getprojectreferenceid(string;string;string)", "org.apache.maven.project.mavenproject.getclassrealm()", "org.apache.maven.project.mavenproject.getname()", "org.apache.maven.project.mavenproject.setparent(mavenproject)", "org.apache.maven.project.mavenproject.getmodel()"]}, "defaultpluginversionrequest": {"distance": 0.8889, "methods": ["org.apache.maven.plugin.version.defaultpluginversionrequest.setrepositories(list)", "org.apache.maven.plugin.version.defaultpluginversionrequest.setrepositorysession(repositorysystemsession)", "org.apache.maven.plugin.version.defaultpluginversionrequest.setartifactid(string)", "org.apache.maven.plugin.version.defaultpluginversionrequest.setgroupid(string)", "org.apache.maven.plugin.version.defaultpluginversionrequest.defaultpluginversionrequest(plugin;repositorysystemsession;list)"]}, "reporting": {"distance": 0.8714, "methods": ["org.apache.maven.model.reporting.getexcludedefaults()", "org.apache.maven.model.reporting.getplugins()", "org.apache.maven.model.reporting.clone()", "org.apache.maven.model.reporting.reporting()", "org.apache.maven.model.reporting.setlocation(object;inputlocation)", "org.apache.maven.model.reporting.getlocation(object)", "org.apache.maven.model.reporting.setoutputdirectory(string)", "org.apache.maven.model.reporting.isexcludedefaults()", "org.apache.maven.model.reporting.getoutputdirectory()"]}, "trackablebase": {"distance": 1.125, "methods": ["org.apache.maven.settings.trackablebase.trackablebase()"]}, "defaultmodelbuildingrequest": {"distance": 0.9655, "methods": ["org.apache.maven.model.building.defaultmodelbuildingrequest.islocationtracking()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getinactiveprofileids()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setuserproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelbuildinglistener()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getsystemproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.istwophasebuilding()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getbuildstarttime()", "org.apache.maven.model.building.defaultmodelbuildingrequest.isprocessplugins()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setsystemproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.defaultmodelbuildingrequest()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getuserproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setvalidationlevel(int)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getprofiles()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelsource()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getpomfile()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelresolver()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setpomfile(file)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getvalidationlevel()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getactiveprofileids()"]}, "projectsorter": {"distance": 0.8333, "methods": ["org.apache.maven.project.projectsorter.getsortedprojects()", "org.apache.maven.project.projectsorter.projectsorter(list)", "org.apache.maven.project.projectsorter.isspecificversion(string)", "org.apache.maven.project.projectsorter.addedge(map;map;mavenproject;vertex;string;string;string;boolean;boolean)", "org.apache.maven.project.projectsorter.addedge(vertex;vertex;mavenproject;map;boolean;boolean)", "org.apache.maven.project.projectsorter.getid(mavenproject)"]}, "mojoexecution": {"distance": 0.875, "methods": ["org.apache.maven.plugin.mojoexecution.getlifecyclephase()", "org.apache.maven.plugin.mojoexecution.getartifactid()", "org.apache.maven.plugin.mojoexecution.getexecutionid()", "org.apache.maven.plugin.mojoexecution.getconfiguration()", "org.apache.maven.plugin.mojoexecution.mojoexecution(mojodescriptor;string;source)", "org.apache.maven.plugin.mojoexecution.getgoal()", "org.apache.maven.plugin.mojoexecution.getplugin()", "org.apache.maven.plugin.mojoexecution.getsource()", "org.apache.maven.plugin.mojoexecution.setconfiguration(xpp3dom)", "org.apache.maven.plugin.mojoexecution.getmojodescriptor()", "org.apache.maven.plugin.mojoexecution.setlifecyclephase(string)", "org.apache.maven.plugin.mojoexecution.getforkedexecutions()", "org.apache.maven.plugin.mojoexecution.getversion()", "org.apache.maven.plugin.mojoexecution.mojoexecution(plugin;string;string)", "org.apache.maven.plugin.mojoexecution.setmojodescriptor(mojodescriptor)", "org.apache.maven.plugin.mojoexecution.getgroupid()"]}, "repositorybase": {"distance": 0.8611, "methods": ["org.apache.maven.model.repositorybase.setname(string)", "org.apache.maven.model.repositorybase.getlocation(object)", "org.apache.maven.model.repositorybase.geturl()", "org.apache.maven.model.repositorybase.seturl(string)", "org.apache.maven.model.repositorybase.clone()", "org.apache.maven.model.repositorybase.getlayout()", "org.apache.maven.model.repositorybase.repositorybase()", "org.apache.maven.model.repositorybase.setid(string)", "org.apache.maven.model.repositorybase.getid()", "org.apache.maven.model.repositorybase.setlayout(string)"]}, "tasksegment": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.tasksegment.gettasks()", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean;object[])", "org.apache.maven.lifecycle.internal.tasksegment.isaggregating()", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean)"]}, "defaultprofilemanager": {"distance": 0.881, "methods": ["org.apache.maven.profiles.defaultprofilemanager.getactiveprofiles()", "org.apache.maven.profiles.defaultprofilemanager.addprofile(profile)", "org.apache.maven.profiles.defaultprofilemanager.explicitlyactivate(string)", "org.apache.maven.profiles.defaultprofilemanager.activateasdefault(string)", "org.apache.maven.profiles.defaultprofilemanager.defaultprofilemanager(plexuscontainer;properties)", "org.apache.maven.profiles.defaultprofilemanager.explicitlydeactivate(string)"]}, "inputlocation": {"distance": 0.8571, "methods": ["org.apache.maven.model.inputlocation.merge(inputlocation;inputlocation;boolean)", "org.apache.maven.model.inputlocation.inputlocation(int;int;inputsource)"]}, "defaultmodelnormalizer": {"distance": 1.0, "methods": ["org.apache.maven.model.normalization.defaultmodelnormalizer.injectdefaultvalues(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.mergeduplicates(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdependencydefaults(list)", "org.apache.maven.model.normalization.defaultmodelnormalizer.defaultmodelnormalizer()"]}, "resource": {"distance": 0.875, "methods": ["org.apache.maven.model.resource.<clinit>()", "org.apache.maven.model.resource.resource()", "org.apache.maven.model.resource.clone()", "org.apache.maven.model.resource.getfiltering()"]}, "extension": {"distance": 0.875, "methods": ["org.apache.maven.model.extension.extension()", "org.apache.maven.model.extension.getartifactid()", "org.apache.maven.model.extension.getversion()", "org.apache.maven.model.extension.getgroupid()", "org.apache.maven.model.extension.setartifactid(string)", "org.apache.maven.model.extension.setversion(string)", "org.apache.maven.model.extension.setgroupid(string)"]}, "settings": {"distance": 0.9668, "methods": ["org.apache.maven.settings.trackablebase.trackablebase()", "org.apache.maven.settings.runtimeinfo.<clinit>()", "org.apache.maven.settings.runtimeinfo.runtimeinfo(file)", "org.apache.maven.settings.settings.settings()"]}, "duplicateprojectexception": {"distance": 1.0, "methods": ["org.apache.maven.project.duplicateprojectexception.duplicateprojectexception(string;file;file;string)"]}, "projectsegment": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.projectsegment.gettransitiveupstreamprojects()", "org.apache.maven.lifecycle.internal.projectsegment.projectsegment(mavenproject;tasksegment;mavensession)", "org.apache.maven.lifecycle.internal.projectsegment.getimmediateupstreamprojects()", "org.apache.maven.lifecycle.internal.projectsegment.getproject()", "org.apache.maven.lifecycle.internal.projectsegment.getsession()", "org.apache.maven.lifecycle.internal.projectsegment.gettasksegment()"]}, "abstractstringbasedmodelinterpolator": {"distance": 0.8545, "methods": ["org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.seturlnormalizer(urlnormalizer)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createvaluesources(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.interpolateinternal(string;list;list;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.setpathtranslator(pathtranslator)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.abstractstringbasedmodelinterpolator()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.getinterpolator()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.<clinit>()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createpostprocessors(model;file;modelbuildingrequest)"]}, "plugin": {"distance": 0.9383, "methods": ["org.apache.maven.model.plugin.getextensions()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setplugingroups(list)", "org.apache.maven.model.plugin.getdependencies()", "org.apache.maven.model.plugin.getexecutions()", "org.apache.maven.plugin.descriptor.mojodescriptor.getmojoconfiguration()", "org.apache.maven.plugin.mojoexecution.getlifecyclephase()", "org.apache.maven.plugin.mojoexecution.getartifactid()", "org.apache.maven.model.plugin.clone()", "org.apache.maven.model.plugin.setversion(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.getplugindescriptor()", "org.apache.maven.plugin.mojoexecution$source.<clinit>()", "org.apache.maven.plugin.mojoexecution.getexecutionid()", "org.apache.maven.plugin.version.defaultpluginversionrequest.setrepositories(list)", "org.apache.maven.plugin.descriptor.plugindescriptor.getgroupid()", "org.apache.maven.model.plugin.adddependency(dependency)", "org.apache.maven.plugin.mojoexecution.getconfiguration()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setpom(model)", "org.apache.maven.plugin.descriptor.mojodescriptor.isforking()", "org.apache.maven.plugin.descriptor.plugindescriptor.getplugin()", "org.apache.maven.model.plugin.equals(object)", "org.apache.maven.plugin.descriptor.plugindescriptor.getversion()", "org.apache.maven.plugin.descriptor.mojodescriptor.mojodescriptor()", "org.apache.maven.plugin.mojoexecution.mojoexecution(mojodescriptor;string;source)", "org.apache.maven.model.plugin.defaultreportingconverter.issiteplugin(plugin)", "org.apache.maven.plugin.mojoexecution$source.mojoexecution$source(string;int)", "org.apache.maven.model.plugin.defaultreportingconverter.findsiteplugin(build)", "org.apache.maven.plugin.descriptor.mojodescriptor.isthreadsafe()", "org.apache.maven.model.plugin.isextensions()", "org.apache.maven.plugin.descriptor.mojodescriptor.getparameters()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setrepositories(list)", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.defaultreportconfigurationexpander()", "org.apache.maven.plugin.version.defaultpluginversionrequest.setrepositorysession(repositorysystemsession)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.defaultpluginconfigurationexpander()", "org.apache.maven.plugin.mojoexecution.getgoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencycollectionrequired()", "org.apache.maven.plugin.mojoexecution.getplugin()", "org.apache.maven.model.plugin.flushexecutionmap()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencyresolutionrequired()", "org.apache.maven.model.plugin.defaultreportingconverter.newdom(string;string)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifactid()", "org.apache.maven.plugin.descriptor.mojodescriptor.isaggregator()", "org.apache.maven.model.plugin.getgroupid()", "org.apache.maven.plugin.descriptor.plugindescriptor.setartifactid(string)", "org.apache.maven.model.plugin.plugin()", "org.apache.maven.model.plugin.getexecutionsasmap()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.defaultpluginprefixrequest(string;mavensession)", "org.apache.maven.plugin.descriptor.plugindescriptor.setplugin(plugin)", "org.apache.maven.plugin.mojoexecution.getsource()", "org.apache.maven.model.plugin.defaultreportingconverter.defaultreportingconverter()", "org.apache.maven.model.plugin.getartifactid()", "org.apache.maven.plugin.version.defaultpluginversionrequest.setartifactid(string)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expand(list)", "org.apache.maven.plugin.mojoexecution.setconfiguration(xpp3dom)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setprefix(string)", "org.apache.maven.model.plugin.defaultreportingconverter.adddom(xpp3dom;string;string)", "org.apache.maven.model.plugin.setdependencies(list)", "org.apache.maven.model.plugin.constructkey(string;string)", "org.apache.maven.plugin.version.defaultpluginversionrequest.setgroupid(string)", "org.apache.maven.model.plugin.setgroupid(string)", "org.apache.maven.model.plugin.getkey()", "org.apache.maven.plugin.descriptor.mojodescriptor.setplugindescriptor(plugindescriptor)", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setrepositorysession(repositorysystemsession)", "org.apache.maven.plugin.mojoexecution.getmojodescriptor()", "org.apache.maven.plugin.mojoexecution.setlifecyclephase(string)", "org.apache.maven.plugin.mojoexecution.getforkedexecutions()", "org.apache.maven.plugin.descriptor.mojodescriptor.getphase()", "org.apache.maven.model.plugin.setartifactid(string)", "org.apache.maven.plugin.mojoexecution.getversion()", "org.apache.maven.plugin.mojoexecution.mojoexecution(plugin;string;string)", "org.apache.maven.plugin.mojoexecution.setmojodescriptor(mojodescriptor)", "org.apache.maven.plugin.descriptor.plugindescriptor.plugindescriptor()", "org.apache.maven.plugin.descriptor.mojodescriptor.getgoal()", "org.apache.maven.model.plugin.addexecution(pluginexecution)", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutegoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.setphase(string)", "org.apache.maven.model.plugin.hashcode()", "org.apache.maven.plugin.descriptor.mojodescriptor.setthreadsafe(boolean)", "org.apache.maven.model.plugin.getversion()", "org.apache.maven.plugin.mojoexecution.getgroupid()", "org.apache.maven.model.plugin.defaultreportingconverter.convertreporting(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.plugin.version.defaultpluginversionrequest.defaultpluginversionrequest(plugin;repositorysystemsession;list)", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutephase()", "org.apache.maven.model.plugin.tostring()", "org.apache.maven.model.plugin.setexecutions(list)"]}, "defaultprofileactivationcontext": {"distance": 0.8727, "methods": ["org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectdirectory()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()"]}, "defaultpathtranslator": {"distance": 1.3333, "methods": ["org.apache.maven.model.path.defaultpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.path.defaultpathtranslator.defaultpathtranslator()"]}, "defaultmavenexecutionresult": {"distance": 0.9, "methods": ["org.apache.maven.execution.defaultmavenexecutionresult.addbuildsummary(buildsummary)", "org.apache.maven.execution.defaultmavenexecutionresult.defaultmavenexecutionresult()"]}, "mavensession": {"distance": 0.9461, "methods": ["org.apache.maven.execution.mavensession.getrequest()", "org.apache.maven.execution.mavensession.getgoals()", "org.apache.maven.execution.mavensession.clone()", "org.apache.maven.execution.mavensession.gettoplevelproject()", "org.apache.maven.execution.mavensession.getcurrentproject()", "org.apache.maven.execution.mavensession.getrepositorysession()", "org.apache.maven.execution.mavensession.mavensession(plexuscontainer;repositorysystemsession;mavenexecutionrequest;mavenexecutionresult)", "org.apache.maven.execution.mavensession.getprojectdependencygraph()", "org.apache.maven.execution.mavensession.setprojectdependencygraph(projectdependencygraph)", "org.apache.maven.execution.mavensession.setcurrentproject(mavenproject)", "org.apache.maven.execution.mavensession.setprojects(list)", "org.apache.maven.execution.mavensession.getprojects()", "org.apache.maven.execution.mavensession.getplugingroups()"]}, "dependency": {"distance": 0.9154, "methods": ["org.apache.maven.model.dependency.getexclusions()", "org.apache.maven.model.dependency.gettype()", "org.apache.maven.model.dependency.settype(string)", "org.apache.maven.model.dependency.setartifactid(string)", "org.apache.maven.model.dependency.getclassifier()", "org.apache.maven.model.dependency.getscope()", "org.apache.maven.model.dependency.setexclusions(list)", "org.apache.maven.model.dependency.getoptional()", "org.apache.maven.model.dependency.getgroupid()", "org.apache.maven.model.dependency.getlocation(object)", "org.apache.maven.model.dependency.getversion()", "org.apache.maven.model.dependency.getmanagementkey()", "org.apache.maven.model.dependency.setversion(string)", "org.apache.maven.model.dependency.getsystempath()", "org.apache.maven.model.dependency.tostring()", "org.apache.maven.model.dependency.dependency()", "org.apache.maven.model.dependency.getartifactid()", "org.apache.maven.model.dependency.setsystempath(string)", "org.apache.maven.model.dependency.setscope(string)", "org.apache.maven.model.dependency.setgroupid(string)", "org.apache.maven.model.dependency.setclassifier(string)"]}, "buildsummary": {"distance": 1.0, "methods": ["org.apache.maven.execution.buildsummary.buildsummary(mavenproject;long)", "org.apache.maven.execution.buildsummary.getproject()"]}, "modeldata": {"distance": 0.9103, "methods": ["org.apache.maven.model.building.modeldata.setartifactid(string)", "org.apache.maven.model.building.modeldata.getactiveprofiles()", "org.apache.maven.model.building.modeldata.setmodel(model)", "org.apache.maven.model.building.modeldata.setversion(string)", "org.apache.maven.model.building.modeldata.setactiveprofiles(list)", "org.apache.maven.model.building.modeldata.getid()", "org.apache.maven.model.building.modeldata.getmodel()", "org.apache.maven.model.building.modeldata.getversion()", "org.apache.maven.model.building.modeldata.modeldata(model)", "org.apache.maven.model.building.modeldata.getrawmodel()", "org.apache.maven.model.building.modeldata.setrawmodel(model)", "org.apache.maven.model.building.modeldata.getartifactid()", "org.apache.maven.model.building.modeldata.getgroupid()", "org.apache.maven.model.building.modeldata.setgroupid(string)"]}, "modelbase": {"distance": 0.931, "methods": ["org.apache.maven.model.modelbase.getdistributionmanagement()", "org.apache.maven.model.modelbase.setrepositories(list)", "org.apache.maven.model.modelbase.clone()", "org.apache.maven.model.modelbase.setproperties(properties)", "org.apache.maven.model.modelbase.setreporting(reporting)", "org.apache.maven.model.modelbase.setdistributionmanagement(distributionmanagement)", "org.apache.maven.model.modelbase.getlocation(object)", "org.apache.maven.model.modelbase.setdependencymanagement(dependencymanagement)", "org.apache.maven.model.modelbase.setdependencies(list)", "org.apache.maven.model.modelbase.setmodules(list)", "org.apache.maven.model.modelbase.setpluginrepositories(list)", "org.apache.maven.model.modelbase.setlocation(object;inputlocation)", "org.apache.maven.model.modelbase.getmodules()", "org.apache.maven.model.modelbase.adddependency(dependency)", "org.apache.maven.model.modelbase.addrepository(repository)", "org.apache.maven.model.modelbase.addproperty(string;string)", "org.apache.maven.model.modelbase.modelbase()", "org.apache.maven.model.modelbase.getpluginrepositories()", "org.apache.maven.model.modelbase.getdependencies()", "org.apache.maven.model.modelbase.getdependencymanagement()", "org.apache.maven.model.modelbase.getreporting()", "org.apache.maven.model.modelbase.getproperties()", "org.apache.maven.model.modelbase.getrepositories()"]}, "model": {"distance": 0.9735, "methods": ["org.apache.maven.model.building.defaultmodelbuilderfactory.newpathtranslator()", "org.apache.maven.model.plugin.getextensions()", "org.apache.maven.model.buildbase.addresource(resource)", "org.apache.maven.model.modelbase.getdistributionmanagement()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.access$300(stringsearchmodelinterpolatortest)", "org.apache.maven.model.building.defaultmodelbuildingrequest.islocationtracking()", "org.apache.maven.model.inputsource.getmodelid()", "org.apache.maven.model.io.defaultmodelreader.isstrict(map)", "org.apache.maven.model.distributionmanagement.setsnapshotrepository(deploymentrepository)", "org.apache.maven.model.merge.modelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileselector.addprofileactivator(profileactivator)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_contributors(model;model;boolean;map)", "org.apache.maven.model.model.getbuild()", "org.apache.maven.model.buildbase.getresources()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(reader;boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepository(modelproblemcollector;repository;string;modelbuildingrequest)", "org.apache.maven.model.building.modeldata.setartifactid(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_name(model;model;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmixedprotection.stringsearchmodelinterpolatortest$objectwithmixedprotection(list;list;list;string;1)", "org.apache.maven.model.merge.modelmerger.mergepluginmanagement(pluginmanagement;pluginmanagement;boolean;map)", "org.apache.maven.model.building.defaultmodelprocessor.read(inputstream;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory$stublifecyclebindingsinjector.defaultmodelbuilderfactory$stublifecyclebindingsinjector(1)", "org.apache.maven.model.building.defaultmodelbuilder.fireevent(model;modelbuildingrequest;modelproblemcollector;modelbuildingeventcatapult)", "org.apache.maven.model.validation.defaultmodelvalidatortest.read(string)", "org.apache.maven.model.io.defaultmodelreader.getsource(map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.jdkversionprofileactivator$rangevalue(string;boolean)", "org.apache.maven.model.building.modeldata.getactiveprofiles()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newurlnormalizer()", "org.apache.maven.model.path.defaultmodelurlnormalizer.defaultmodelurlnormalizer()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$2.abstractstringbasedmodelinterpolator$2(abstractstringbasedmodelinterpolator;boolean;file)", "org.apache.maven.model.model.seturl(string)", "org.apache.maven.model.profile.defaultprofileinjector.injectprofile(model;profile;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.buildbase.getfinalname()", "org.apache.maven.model.model.getversion()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;collection)", "org.apache.maven.model.model.getorganization()", "org.apache.maven.model.exclusion.getartifactid()", "org.apache.maven.model.plugin.getdependencies()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseplugin(xmlpullparser;boolean)", "org.apache.maven.model.parent.getgroupid()", "org.apache.maven.model.plugin.getexecutions()", "org.apache.maven.model.management.defaultdependencymanagementinjector.defaultdependencymanagementinjector()", "org.apache.maven.model.pluginconfiguration.clone()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testexpressionthatevaluatestonullreturnstheliteralstring()", "org.apache.maven.model.superpom.defaultsuperpomprovider.defaultsuperpomprovider()", "org.apache.maven.model.dependencymanagement.dependencymanagement()", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.urlnormalizingpostprocessor(urlnormalizer)", "org.apache.maven.model.building.modeldata.setmodel(model)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newpluginmanagementinjector()", "org.apache.maven.model.modelbase.setrepositories(list)", "org.apache.maven.model.configurationcontainer.setconfiguration(object)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testenvarexpressionthatevaluatestonullreturnstheliteralstring()", "org.apache.maven.model.interpolation.problemdetectingvaluesource.clearfeedback()", "org.apache.maven.model.resource.<clinit>()", "org.apache.maven.model.merge.modelmerger.mergebuild_outputdirectory(build;build;boolean;map)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.building.defaultmodelbuilder.interpolatemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.seturlnormalizer(urlnormalizer)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.createinterpolator()", "org.apache.maven.model.pluginexecution.addgoal(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedistributionmanagement(xmlpullparser;boolean)", "org.apache.maven.model.activationfile.setexists(string)", "org.apache.maven.model.merge.modelmerger.mergebuildbase(buildbase;buildbase;boolean;map)", "org.apache.maven.model.modelbase.clone()", "org.apache.maven.model.io.defaultmodelreader.read(reader;boolean;inputsource)", "org.apache.maven.model.distributionmanagement.setrepository(deploymentrepository)", "org.apache.maven.model.plugin.clone()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelnormalizer(modelnormalizer)", "org.apache.maven.model.merge.modelmerger.mergebuild(build;build;boolean;map)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createvaluesources(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newreportingconverter()", "org.apache.maven.model.merge.modelmerger.mergebuild_scriptsourcedirectory(build;build;boolean;map)", "org.apache.maven.model.parent.setgroupid(string)", "org.apache.maven.model.plugin.setversion(string)", "org.apache.maven.model.parent.parent()", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergereporting_plugins(reporting;reporting;boolean;map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrelationorder(string;rangevalue;boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.validateboolean(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.interpolation.pathtranslatingpostprocessor.pathtranslatingpostprocessor(list;collection;file;pathtranslator)", "org.apache.maven.model.modelbase.setproperties(properties)", "org.apache.maven.model.merge.modelmerger.modelmerger()", "org.apache.maven.model.merge.modelmerger.mergebuild_testoutputdirectory(build;build;boolean;map)", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.execute(string;object)", "org.apache.maven.model.path.defaulturlnormalizertest.defaulturlnormalizertest()", "org.apache.maven.model.building.defaultmodelproblemcollector.haserrors()", "org.apache.maven.model.inputsource.getlocation()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseexclusion(xmlpullparser;boolean)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.defaultinheritanceassembler$inheritancemodelmerger(1)", "org.apache.maven.model.building.defaultmodelbuilder.setsuperpomprovider(superpomprovider)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_finalname(buildbase;buildbase;boolean;map)", "org.apache.maven.model.buildtest.buildtest()", "org.apache.maven.model.activationproperty.setname(string)", "org.apache.maven.model.buildbase.getdefaultgoal()", "org.apache.maven.model.buildbase.setresources(list)", "org.apache.maven.model.profile.profile()", "org.apache.maven.model.parent.setartifactid(string)", "org.apache.maven.model.patternset.patternset()", "org.apache.maven.model.locator.defaultmodellocator.defaultmodellocator()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelurlnormalizer(modelurlnormalizer)", "org.apache.maven.model.dependency.getexclusions()", "org.apache.maven.model.activationproperty.setvalue(string)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$2.getvalue(string)", "org.apache.maven.model.dependency.gettype()", "org.apache.maven.model.modelbase.setreporting(reporting)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrange(string)", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.mergemanageddependencies(model)", "org.apache.maven.model.inputsource.setmodelid(string)", "org.apache.maven.model.building.modeldata.setversion(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsepluginexecution(xmlpullparser;boolean)", "org.apache.maven.model.extension.extension()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedependencymanagement(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.setup()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_mailinglists(model;model;boolean;map)", "org.apache.maven.model.distributionmanagement.setstatus(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string;inputlocationtracker)", "org.apache.maven.model.plugincontainer.getplugins()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_cimanagement(model;model;boolean;map)", "org.apache.maven.model.pluginconfiguration.setpluginmanagement(pluginmanagement)", "org.apache.maven.model.dependency.settype(string)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testbasedir()", "org.apache.maven.model.build.clone()", "org.apache.maven.model.extension.getartifactid()", "org.apache.maven.model.model.getparent()", "org.apache.maven.model.model.setgroupid(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsepluginmanagement(xmlpullparser;boolean)", "org.apache.maven.model.management.defaultdependencymanagementinjector.injectmanagement(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.setlicenses(list)", "org.apache.maven.model.fileset.clone()", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergemanagedbuildplugins(model)", "org.apache.maven.model.activationfile.getexists()", "org.apache.maven.model.building.defaultmodelbuilder.setpluginconfigurationexpander(pluginconfigurationexpander)", "org.apache.maven.model.plugin.adddependency(dependency)", "org.apache.maven.model.patternset.getlocation(object)", "org.apache.maven.model.dependency.setartifactid(string)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getinactiveprofileids()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isinrange(string;list)", "org.apache.maven.model.building.defaultmodelbuildingresult.setproblems(list)", "org.apache.maven.model.activationproperty.getvalue()", "org.apache.maven.model.dependency.getclassifier()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.stringsearchmodelinterpolator()", "org.apache.maven.model.buildbase.setdirectory(string)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(string)", "org.apache.maven.model.interpolation.buildtimestampvaluesource.buildtimestampvaluesource(date;string)", "org.apache.maven.model.building.defaultmodelprocessor.setmodellocator(modellocator)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setuserproperties(properties)", "org.apache.maven.model.superpom.defaultsuperpomprovider.setmodelprocessor(modelprocessor)", "org.apache.maven.model.model.setname(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedeploymentrepository(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.assertcolllectorstate(int;int;int;simpleproblemcollector)", "org.apache.maven.model.plugincontainertest.plugincontainertest()", "org.apache.maven.model.path.defaultmodelurlnormalizer.seturlnormalizer(urlnormalizer)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelbuildinglistener()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testenvars()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolateobject(object;model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithstringarrayfield.stringsearchmodelinterpolatortest$objectwithstringarrayfield(string[])", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_repositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer_inherited(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodel_inceptionyear(model;model;boolean;map)", "org.apache.maven.model.build.settestoutputdirectory(string)", "org.apache.maven.model.modelbase.setdistributionmanagement(distributionmanagement)", "org.apache.maven.model.reporting.getexcludedefaults()", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.defaultpluginmanagementinjector$managementmodelmerger(1)", "org.apache.maven.model.dependencytest.dependencytest()", "org.apache.maven.model.configurationcontainer.clone()", "org.apache.maven.model.plugincontainer.setlocation(object;inputlocation)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactiveexternalprofiles(list)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(model)", "org.apache.maven.model.building.filemodelsource.getlocation()", "org.apache.maven.model.validation.defaultmodelvalidator.equals(string;string)", "org.apache.maven.model.building.defaultmodelbuilderfactory.defaultmodelbuilderfactory()", "org.apache.maven.model.building.defaultmodelbuilder.readmodel(modelsource;file;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.pluginconfigurationtest.pluginconfigurationtest()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$3.getvalue(string)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testtworeferences()", "org.apache.maven.model.repositorybase.setname(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedependency(xmlpullparser;boolean)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getsystemproperties()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testbaseuri()", "org.apache.maven.model.building.simpleproblemcollector$1.<clinit>()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.istwophasebuilding()", "org.apache.maven.model.model.clonehook(model)", "org.apache.maven.model.building.defaultmodelbuildingresult.addmodelid(string)", "org.apache.maven.model.reporting.getplugins()", "org.apache.maven.model.merge.modelmerger.mergeplugin_extensions(plugin;plugin;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingresult.geteffectivemodel()", "org.apache.maven.model.building.defaultmodelbuilder.setreportconfigurationexpander(reportconfigurationexpander)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getbuildstarttime()", "org.apache.maven.model.validation.defaultmodelvalidatortest.validateraw(string)", "org.apache.maven.model.configurationcontainer.getinherited()", "org.apache.maven.model.repositorypolicy.setupdatepolicy(string)", "org.apache.maven.model.merge.modelmerger.mergeplugin_groupid(plugin;plugin;boolean;map)", "org.apache.maven.model.building.modeldata.setactiveprofiles(list)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmapfield.access$200(objectwithmapfield)", "org.apache.maven.model.building.modelproblemutils.toid(string;string;string)", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdefaultvalues(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuildingrequest.isprocessplugins()", "org.apache.maven.model.merge.modelmerger.mergebuild_sourcedirectory(build;build;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.setinheritanceassembler(inheritanceassembler)", "org.apache.maven.model.repositorypolicy.clone()", "org.apache.maven.model.patternset.clone()", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.activationproperty.activationproperty()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newproperties(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.evaluatearray(object)", "org.apache.maven.model.activation.getjdk()", "org.apache.maven.model.plugin.equals(object)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.interpolateinternal(string;list;list;modelproblemcollector)", "org.apache.maven.model.model.setprofiles(list)", "org.apache.maven.model.build.setsourcedirectory(string)", "org.apache.maven.model.activationfile.clone()", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.activation.getos()", "org.apache.maven.model.repository.clone()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivationproperty(xmlpullparser;boolean)", "org.apache.maven.model.path.defaulturlnormalizer.normalize(string)", "org.apache.maven.model.validation.defaultmodelvalidatortest.assertcontains(string;string)", "org.apache.maven.model.buildbase.clone()", "org.apache.maven.model.pluginmanagementtest.pluginmanagementtest()", "org.apache.maven.model.activation.setfile(activationfile)", "org.apache.maven.model.building.modeldata.getid()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.plugin.defaultreportingconverter.issiteplugin(plugin)", "org.apache.maven.model.validation.defaultmodelvalidator.validatebannedcharacters(string;modelproblemcollector;severity;string;string;inputlocationtracker;string)", "org.apache.maven.model.modelbase.getlocation(object)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.problemdetectingvaluesource(valuesource;string;string;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidatortest.validateeffective(string;int)", "org.apache.maven.model.modelbase.setdependencymanagement(dependencymanagement)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolateunprefixedbasedirexpression()", "org.apache.maven.model.building.simpleproblemcollector.add(severity;string;inputlocation;exception)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.gettrimmedvalue(string)", "org.apache.maven.model.buildbase.getfilters()", "org.apache.maven.model.buildbase.setfinalname(string)", "org.apache.maven.model.dependency.getscope()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$000(rangevalue)", "org.apache.maven.model.model.getlicenses()", "org.apache.maven.model.model.setmailinglists(list)", "org.apache.maven.model.building.defaultmodelbuilder.setprofileinjector(profileinjector)", "org.apache.maven.model.parent.getversion()", "org.apache.maven.model.merge.modelmerger.mergebuild_extensions(build;build;boolean;map)", "org.apache.maven.model.model.setartifactid(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.setrawmodel(string;model)", "org.apache.maven.model.dependency.setexclusions(list)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawdependencies(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.extension.getversion()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(reader)", "org.apache.maven.model.merge.modelmerger.mergemodel_scm(model;model;boolean;map)", "org.apache.maven.model.pluginexecution.getgoals()", "org.apache.maven.model.fileset.setdirectory(string)", "org.apache.maven.model.merge.mavenmodelmerger.getpluginkey(plugin)", "org.apache.maven.model.validation.defaultmodelvalidatortest.defaultmodelvalidatortest()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_profiles(model;model;boolean;map)", "org.apache.maven.model.plugin.defaultreportingconverter.findsiteplugin(build)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.defaultpluginmanagementinjector$managementmodelmerger()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$000()", "org.apache.maven.model.building.defaultmodelproblemcollector.defaultmodelproblemcollector(list)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawplugins(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.model.getid()", "org.apache.maven.model.activation.getfile()", "org.apache.maven.model.management.defaultpluginmanagementinjector.defaultpluginmanagementinjector()", "org.apache.maven.model.validation.defaultmodelvalidator.validateenum(string;modelproblemcollector;severity;string;string;inputlocationtracker;string[])", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnoexpression(string;modelproblemcollector;severity;string;inputlocationtracker)", "org.apache.maven.model.extension.getgroupid()", "org.apache.maven.model.exclusion.setgroupid(string)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$3.abstractstringbasedmodelinterpolator$3(abstractstringbasedmodelinterpolator;boolean;modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.model.dependency.getoptional()", "org.apache.maven.model.dependency.getgroupid()", "org.apache.maven.model.distributionmanagement.getrepository()", "org.apache.maven.model.plugin.isextensions()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newreportconfigurationexpander()", "org.apache.maven.model.modelbase.setdependencies(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.activation.fileprofileactivator.setpathtranslator(pathtranslator)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserepositorypolicy(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$100()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.deploymentrepository.deploymentrepository()", "org.apache.maven.model.profile.getsource()", "org.apache.maven.model.activation.setproperty(activationproperty)", "org.apache.maven.model.profile.clone()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmapfield.stringsearchmodelinterpolatortest$objectwithmapfield(map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(xmlpullparser;boolean)", "org.apache.maven.model.repository.setsnapshots(repositorypolicy)", "org.apache.maven.model.modeltest.modeltest()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldnotinterpolatedependencyversionwithinvalidreference()", "org.apache.maven.model.validation.defaultmodelvalidator.validatepluginversion(string;modelproblemcollector;string;string;inputlocationtracker;modelbuildingrequest)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.traverseobjectwithparents(class;object)", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.defaultreportconfigurationexpander()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setsystemproperties(properties)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newinstance()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_url(model;model;boolean;map)", "org.apache.maven.model.inputsource.setlocation(string)", "org.apache.maven.model.profile.getactivation()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.isqualifiedforinterpolation(field;class)", "org.apache.maven.model.reporting.clone()", "org.apache.maven.model.dependency.getlocation(object)", "org.apache.maven.model.building.defaultmodelbuildingrequest.defaultmodelbuildingrequest()", "org.apache.maven.model.building.defaultmodelbuilder.checkpluginversions(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelvalidator()", "org.apache.maven.model.model.setmodelversion(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newprofile(string)", "org.apache.maven.model.building.modeldata.getmodel()", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(int;int)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.addzerotokens(list;int)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolatemodel(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivationcontext(modelbuildingrequest)", "org.apache.maven.model.profile.setbuild(buildbase)", "org.apache.maven.model.io.defaultmodelreader.defaultmodelreader()", "org.apache.maven.model.plugincontainer.setplugins(list)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.checkfieldwithduplicate(xmlpullparser;string;string;set)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_modelversion(model;model;boolean;map)", "org.apache.maven.model.model.getinceptionyear()", "org.apache.maven.model.inputlocation.merge(inputlocation;inputlocation;boolean)", "org.apache.maven.model.model.setpomfile(file)", "org.apache.maven.model.building.simpleproblemcollector.getwarnings()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.setpathtranslator(pathtranslator)", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.<clinit>()", "org.apache.maven.model.building.defaultmodelbuildingresult.setactivepomprofiles(string;list)", "org.apache.maven.model.model.setmodelencoding(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_artifactid(model;model;boolean;map)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.abstractmodelinterpolatortest()", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.repositorybase.getlocation(object)", "org.apache.maven.model.repositorybase.geturl()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereporting(xmlpullparser;boolean)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelpathtranslator(modelpathtranslator)", "org.apache.maven.model.activation.getproperty()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelinterpolator(modelinterpolator)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.defaultpluginconfigurationexpander()", "org.apache.maven.model.profile.setactivation(activation)", "org.apache.maven.model.build.settestsourcedirectory(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.access$400(stringsearchmodelinterpolatortest;properties)", "org.apache.maven.model.normalization.defaultmodelnormalizer.mergeduplicates(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdependencydefaults(list)", "org.apache.maven.model.superpom.defaultsuperpomprovider.getsupermodel(string)", "org.apache.maven.model.building.defaultmodelproblemcollector.getproblems()", "org.apache.maven.model.dependency.getversion()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$1.getvalue(string)", "org.apache.maven.model.building.defaultmodelbuilder.readparent(model;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.modelbase.setmodules(list)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.<clinit>()", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_developers(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeplugin(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodel_groupid(model;model;boolean;map)", "org.apache.maven.model.repositorybase.seturl(string)", "org.apache.maven.model.dependency.getmanagementkey()", "org.apache.maven.model.building.modeldata.getversion()", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newpluginconfigurationexpander()", "org.apache.maven.model.plugin.flushexecutionmap()", "org.apache.maven.model.plugincontainer.addplugin(plugin)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementimporter(dependencymanagementimporter)", "org.apache.maven.model.pluginexecution.clone()", "org.apache.maven.model.distributionmanagement.getstatus()", "org.apache.maven.model.buildbase.gettestresources()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithstringarrayfield.access$000(objectwithstringarrayfield)", "org.apache.maven.model.merge.modelmerger.mergemodel_version(model;model;boolean;map)", "org.apache.maven.model.plugin.defaultreportingconverter.newdom(string;string)", "org.apache.maven.model.build.getsourcedirectory()", "org.apache.maven.model.io.defaultmodelreader.read(inputstream;map)", "org.apache.maven.model.modelbase.setpluginrepositories(list)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserepository(xmlpullparser;boolean)", "org.apache.maven.model.model.getmailinglists()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelvalidator(modelvalidator)", "org.apache.maven.model.modelbase.setlocation(object;inputlocation)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldnotthrowexceptiononreferencetononexistentvalue()", "org.apache.maven.model.activation.isactivebydefault()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newlifecyclebindingsinjector()", "org.apache.maven.model.buildbase.setfilters(list)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(inputstream)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolatesourcedirectoryreferencedfromresourcedirectorycorrectly()", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newprofile(string;string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.parent.getartifactid()", "org.apache.maven.model.exclusion.getlocation(object)", "org.apache.maven.model.configurationcontainer.setinherited(string)", "org.apache.maven.model.merge.modelmerger.mergereporting_outputdirectory(reporting;reporting;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getuserproperties()", "org.apache.maven.model.merge.modelmerger.mergepluginconfiguration_pluginmanagement(pluginconfiguration;pluginconfiguration;boolean;map)", "org.apache.maven.model.pluginexecution.setphase(string)", "org.apache.maven.model.plugin.getgroupid()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolatedependencyversiontosetsameasprojectversion()", "org.apache.maven.model.building.defaultmodelbuilder.assembleinheritance(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.assertproblemfree(simpleproblemcollector)", "org.apache.maven.model.modelbase.getmodules()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.getbooleanvalue(string;string;xmlpullparser;string)", "org.apache.maven.model.repository.setreleases(repositorypolicy)", "org.apache.maven.model.repositorybase.clone()", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementinjector(dependencymanagementinjector)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsebuildbase(xmlpullparser;boolean)", "org.apache.maven.model.parent.setversion(string)", "org.apache.maven.model.activation.activation()", "org.apache.maven.model.plugin.plugin()", "org.apache.maven.model.build.gettestsourcedirectory()", "org.apache.maven.model.plugin.getexecutionsasmap()", "org.apache.maven.model.model.getcimanagement()", "org.apache.maven.model.repositorybase.getlayout()", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newproperties(string;string)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.abstractstringbasedmodelinterpolator()", "org.apache.maven.model.building.defaultmodelbuildingresult.seteffectivemodel(model)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setvalidationlevel(int)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergemodelbase(modelbase;modelbase)", "org.apache.maven.model.model.getpomfile()", "org.apache.maven.model.model.model()", "org.apache.maven.model.modelbase.adddependency(dependency)", "org.apache.maven.model.dependencymanagement.getdependencies()", "org.apache.maven.model.pluginmanagement.pluginmanagement()", "org.apache.maven.model.plugincontainer.getpluginsasmap()", "org.apache.maven.model.dependency.setversion(string)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldnotthrowexceptiononreferencetovaluecontainingnakedexpression()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsemodel(xmlpullparser;boolean)", "org.apache.maven.model.activation.setactivebydefault(boolean)", "org.apache.maven.model.reporting.reporting()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$100(rangevalue)", "org.apache.maven.model.validation.defaultmodelvalidator.addviolation(modelproblemcollector;severity;string;string;string;inputlocationtracker)", "org.apache.maven.model.merge.mavenmodelmerger.getrepositorybasekey(repositorybase)", "org.apache.maven.model.dependency.getsystempath()", "org.apache.maven.model.validation.defaultmodelvalidatortest.validate(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectiveplugindependencies(modelproblemcollector;plugin;modelbuildingrequest)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.getfields(class)", "org.apache.maven.model.dependency.tostring()", "org.apache.maven.model.pluginexecution.tostring()", "org.apache.maven.model.profile.defaultprofileinjector.defaultprofileinjector()", "org.apache.maven.model.model.getmodelversion()", "org.apache.maven.model.building.defaultmodelbuilderfactory$stublifecyclebindingsinjector.injectlifecyclebindings(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.getscm()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivationfile(xmlpullparser;boolean)", "org.apache.maven.model.fileset.getdirectory()", "org.apache.maven.model.merge.modelmerger.mergebuildbase_directory(buildbase;buildbase;boolean;map)", "org.apache.maven.model.modelbase.addrepository(repository)", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_prerequisites(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelpathtranslator()", "org.apache.maven.model.extension.setartifactid(string)", "org.apache.maven.model.buildbase.getdirectory()", "org.apache.maven.model.building.defaultmodelbuilder.setpluginmanagementinjector(pluginmanagementinjector)", "org.apache.maven.model.model.setdevelopers(list)", "org.apache.maven.model.building.modeldata.modeldata(model)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$1.call()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newdependencymanagementinjector()", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.defaultdependencymanagementinjector$managementmodelmerger()", "org.apache.maven.model.exclusion.exclusion()", "org.apache.maven.model.pluginconfiguration.getpluginmanagement()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newprofileinjector()", "org.apache.maven.model.model.geturl()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.inheritance.defaultinheritanceassembler.getchildpathadjustment(model;model)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelprocessor(modelprocessor)", "org.apache.maven.model.repositorybase.repositorybase()", "org.apache.maven.model.distributionmanagement.getsnapshotrepository()", "org.apache.maven.model.plugin.defaultreportingconverter.defaultreportingconverter()", "org.apache.maven.model.inheritance.defaultinheritanceassembler.assemblemodelinheritance(model;model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.setversion(string)", "org.apache.maven.model.validation.defaultmodelvalidator.getlocation(string;inputlocationtracker)", "org.apache.maven.model.build.setoutputdirectory(string)", "org.apache.maven.model.pluginmanagement.clone()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.getinterpolator()", "org.apache.maven.model.interpolation.buildtimestampvaluesource.getvalue(string)", "org.apache.maven.model.pluginexecution.setgoals(list)", "org.apache.maven.model.building.defaultmodelprocessor.setmodelreader(modelreader)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.defaultinheritanceassembler$inheritancemodelmerger()", "org.apache.maven.model.plugin.getartifactid()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.merge.modelmerger.mergemodel_packaging(model;model;boolean;map)", "org.apache.maven.model.building.modeldata.getrawmodel()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$classwithfinalfield.stringsearchmodelinterpolatortest$classwithfinalfield()", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepositories(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getprofiles()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelsource()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isrange(string)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_distributionmanagement(modelbase;modelbase;boolean;map)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expand(list)", "org.apache.maven.model.building.modelbuildingeventcatapult$1.modelbuildingeventcatapult$1()", "org.apache.maven.model.model.getissuemanagement()", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(modelbuildingrequest;int)", "org.apache.maven.model.building.defaultmodelbuilder.importdependencymanagement(model;modelbuildingrequest;defaultmodelproblemcollector;collection)", "org.apache.maven.model.building.filemodelsource.filemodelsource(file)", "org.apache.maven.model.building.modeldata.setrawmodel(model)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_properties(modelbase;modelbase;boolean;map)", "org.apache.maven.model.plugincontainer.getlocation(object)", "org.apache.maven.model.scm.setconnection(string)", "org.apache.maven.model.profile.tostring()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getpomfile()", "org.apache.maven.model.distributionmanagement.distributionmanagement()", "org.apache.maven.model.merge.modelmerger.mergereporting_excludedefaults(reporting;reporting;boolean;map)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.<clinit>()", "org.apache.maven.model.repository.repository()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.getvaluelist()", "org.apache.maven.model.normalization.defaultmodelnormalizer.defaultmodelnormalizer()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger()", "org.apache.maven.model.profiletest.profiletest()", "org.apache.maven.model.building.defaultmodelbuilder.setreportingconverter(reportingconverter)", "org.apache.maven.model.merge.modelmerger.mergemodel_build(model;model;boolean;map)", "org.apache.maven.model.model.getname()", "org.apache.maven.model.inheritance.defaultinheritanceassembler.defaultinheritanceassembler()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseparent(xmlpullparser;boolean)", "org.apache.maven.model.plugintest.plugintest()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.createinterpolator()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult;collection)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_licenses(model;model;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivation(xmlpullparser;boolean)", "org.apache.maven.model.building.defaultmodelprocessor.defaultmodelprocessor()", "org.apache.maven.model.repositorybase.setid(string)", "org.apache.maven.model.plugin.defaultreportingconverter.adddom(xpp3dom;string;string)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_dependencymanagement(modelbase;modelbase;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.mavenxpp3reader()", "org.apache.maven.model.plugin.setdependencies(list)", "org.apache.maven.model.path.defaultpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.plugincontainer.plugincontainer()", "org.apache.maven.model.merge.modelmerger.getrepositorykey(repository)", "org.apache.maven.model.plugin.constructkey(string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateresources(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsebuild(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.createmodelbuildingrequest(properties)", "org.apache.maven.model.extension.setversion(string)", "org.apache.maven.model.model.setbuild(build)", "org.apache.maven.model.pluginexecution.setid(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.setup()", "org.apache.maven.model.building.defaultmodelbuilderfactorytest.getpom(string)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelresolver()", "org.apache.maven.model.plugin.setgroupid(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependency(modelproblemcollector;dependency;boolean;string;modelbuildingrequest)", "org.apache.maven.model.merge.modelmerger.merge(model;model;boolean;map)", "org.apache.maven.model.modelbase.addproperty(string;string)", "org.apache.maven.model.normalization.defaultmodelnormalizer$duplicatemerger.defaultmodelnormalizer$duplicatemerger()", "org.apache.maven.model.plugin.getkey()", "org.apache.maven.model.reporting.setlocation(object;inputlocation)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.build.getextensions()", "org.apache.maven.model.building.modelproblem$severity.<clinit>()", "org.apache.maven.model.modelbase.modelbase()", "org.apache.maven.model.building.defaultmodelbuilder.setprofileselector(profileselector)", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelproblemcollector.setrootmodel(model)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.getvalue(string)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newinheritanceassembler()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newprofileactivators()", "org.apache.maven.model.merge.modelmerger.mergemodelbase(modelbase;modelbase;boolean;map)", "org.apache.maven.model.modelbase.getpluginrepositories()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult)", "org.apache.maven.model.organization.getname()", "org.apache.maven.model.model.getgroupid()", "org.apache.maven.model.modelbase.getdependencies()", "org.apache.maven.model.building.defaultmodelbuilder.getsupermodel()", "org.apache.maven.model.merge.modelmerger.mergemodelbase_dependencies(modelbase;modelbase;boolean;map)", "org.apache.maven.model.fileset.fileset()", "org.apache.maven.model.management.defaultpluginmanagementinjector.injectmanagement(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.dependency.dependency()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelurlnormalizer()", "org.apache.maven.model.configurationcontainer.configurationcontainer()", "org.apache.maven.model.merge.modelmerger.mergemodel_description(model;model;boolean;map)", "org.apache.maven.model.building.modeldata.getartifactid()", "org.apache.maven.model.merge.modelmerger.mergereporting(reporting;reporting;boolean;map)", "org.apache.maven.model.path.defaultmodelpathtranslator.setpathtranslator(pathtranslator)", "org.apache.maven.model.path.defaultpathtranslator.defaultpathtranslator()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest)", "org.apache.maven.model.model.getartifactid()", "org.apache.maven.model.inputlocation.inputlocation(int;int;inputsource)", "org.apache.maven.model.profile.setid(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.isqualifiedforinterpolation(class)", "org.apache.maven.model.dependency.getartifactid()", "org.apache.maven.model.dependency.setsystempath(string)", "org.apache.maven.model.profile.activation.fileprofileactivator$1.fileprofileactivator$1(fileprofileactivator;boolean;file)", "org.apache.maven.model.repositorypolicy.repositorypolicy()", "org.apache.maven.model.plugin.setartifactid(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.getproblems()", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.reporting.getlocation(object)", "org.apache.maven.model.configurationcontainer.getconfiguration()", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string;inputlocationtracker)", "org.apache.maven.model.build.setscriptsourcedirectory(string)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer)", "org.apache.maven.model.model.setscm(scm)", "org.apache.maven.model.activationproperty.getname()", "org.apache.maven.model.building.simpleproblemcollector.getfatals()", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseresource(xmlpullparser;boolean)", "org.apache.maven.model.model.getdevelopers()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelprocessor()", "org.apache.maven.model.resource.resource()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_modules(modelbase;modelbase;boolean;map)", "org.apache.maven.model.distributionmanagement.getlocation(object)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(model;modelbuildingrequest)", "org.apache.maven.model.pluginexecution.pluginexecution()", "org.apache.maven.model.validation.defaultmodelvalidator.defaultmodelvalidator()", "org.apache.maven.model.building.modelproblem$severity.modelproblem$severity(string;int)", "org.apache.maven.model.model.clone()", "org.apache.maven.model.pluginexecutiontest.pluginexecutiontest()", "org.apache.maven.model.reporting.setoutputdirectory(string)", "org.apache.maven.model.exclusion.getgroupid()", "org.apache.maven.model.normalization.defaultmodelnormalizer$duplicatemerger.defaultmodelnormalizer$duplicatemerger(1)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.merge.modelmerger.mergeplugin_artifactid(plugin;plugin;boolean;map)", "org.apache.maven.model.configurationcontainer.getlocation(object)", "org.apache.maven.model.model.setparent(parent)", "org.apache.maven.model.scm.getconnection()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setpomfile(file)", "org.apache.maven.model.building.modelproblem$severity.values()", "org.apache.maven.model.merge.modelmerger.mergebuild_testsourcedirectory(build;build;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactorytest.defaultmodelbuilderfactorytest()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodellocator()", "org.apache.maven.model.repositorybase.getid()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelreader()", "org.apache.maven.model.inputsource.inputsource()", "org.apache.maven.model.validation.defaultmodelvalidator.hasexpression(string)", "org.apache.maven.model.plugincontainer.clone()", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.repositorypolicy.setenabled(string)", "org.apache.maven.model.exclusion.setartifactid(string)", "org.apache.maven.model.pluginexecution.getid()", "org.apache.maven.model.merge.modelmerger.mergemodelbase_reporting(modelbase;modelbase;boolean;map)", "org.apache.maven.model.build.getscriptsourcedirectory()", "org.apache.maven.model.model.getdescription()", "org.apache.maven.model.configurationcontainer.setlocation(object;inputlocation)", "org.apache.maven.model.building.simpleproblemcollector.geterrors()", "org.apache.maven.model.model.setpackaging(string)", "org.apache.maven.model.plugincontainer.flushpluginmap()", "org.apache.maven.model.repositorybase.setlayout(string)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectdirectory()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolateorganizationnamecorrectly()", "org.apache.maven.model.model.getprofiles()", "org.apache.maven.model.merge.modelmerger.mergebuildbase_defaultgoal(buildbase;buildbase;boolean;map)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.building.defaultmodelproblemcollector.hasfatalerrors()", "org.apache.maven.model.plugin.addexecution(pluginexecution)", "org.apache.maven.model.activationfile.activationfile()", "org.apache.maven.model.resource.clone()", "org.apache.maven.model.parent.getlocation(object)", "org.apache.maven.model.modelbase.getdependencymanagement()", "org.apache.maven.model.buildbase.buildbase()", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependencies(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.merge.modelmerger.mergemodel_parent(model;model;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmixedprotection.stringsearchmodelinterpolatortest$objectwithmixedprotection(list;list;list;string)", "org.apache.maven.model.reporting.isexcludedefaults()", "org.apache.maven.model.resource.getfiltering()", "org.apache.maven.model.building.defaultmodelbuilder.setlifecyclebindingsinjector(lifecyclebindingsinjector)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.model.tostring()", "org.apache.maven.model.validation.defaultmodelvalidatortest.assertviolations(simpleproblemcollector;int;int;int)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.stringsearchmodelinterpolator$interpolateobjectaction(object;list;list;stringsearchmodelinterpolator;modelproblemcollector)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(model;file;modelbuildingrequest)", "org.apache.maven.model.configurationcontainer.isinherited()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelinterpolator()", "org.apache.maven.model.dependencymanagement.setdependencies(list)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergeplugin(plugin;plugin;boolean;map)", "org.apache.maven.model.modelbase.getreporting()", "org.apache.maven.model.build.build()", "org.apache.maven.model.merge.modelmerger.mergeplugincontainer(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_issuemanagement(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$1.abstractstringbasedmodelinterpolator$1(abstractstringbasedmodelinterpolator;boolean;file)", "org.apache.maven.model.pluginconfiguration.pluginconfiguration()", "org.apache.maven.model.extension.setgroupid(string)", "org.apache.maven.model.plugin.hashcode()", "org.apache.maven.model.building.modeldata.getgroupid()", "org.apache.maven.model.merge.modelmerger.mergeplugin_version(plugin;plugin;boolean;map)", "org.apache.maven.model.building.modeldata.setgroupid(string)", "org.apache.maven.model.build.addextension(extension)", "org.apache.maven.model.validation.defaultmodelvalidator.validateversion(string;modelproblemcollector;severity;string;string;inputlocationtracker)", "org.apache.maven.model.path.defaulturlnormalizer.defaulturlnormalizer()", "org.apache.maven.model.plugin.getversion()", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawmodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.build.gettestoutputdirectory()", "org.apache.maven.model.building.defaultmodelbuilder.defaultmodelbuilder()", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.merge.mavenmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.scm.scm()", "org.apache.maven.model.organization.setname(string)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer_configuration(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseprofile(xmlpullparser;boolean)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_pluginrepositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.build.getoutputdirectory()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithlistfield.stringsearchmodelinterpolatortest$objectwithlistfield(list)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_filters(buildbase;buildbase;boolean;map)", "org.apache.maven.model.reporting.getoutputdirectory()", "org.apache.maven.model.plugin.defaultreportingconverter.convertreporting(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidatortest.validateraw(string;int)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldthrowexceptiononrecursivescmconnectionreference()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithlistfield.access$100(objectwithlistfield)", "org.apache.maven.model.activationproperty.clone()", "org.apache.maven.model.profile.getbuild()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newsuperpomprovider()", "org.apache.maven.model.building.modelproblemutils.toid(model)", "org.apache.maven.model.merge.modelmerger.mergeplugin_dependencies(plugin;plugin;boolean;map)", "org.apache.maven.model.model.getpackaging()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getvalidationlevel()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.model.setorganization(organization)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createpostprocessors(model;file;modelbuildingrequest)", "org.apache.maven.model.model.setcontributors(list)", "org.apache.maven.model.organization.organization()", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger(1)", "org.apache.maven.model.validation.defaultmodelvalidatortest.setup()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$1.stringsearchmodelinterpolatortest$1(stringsearchmodelinterpolatortest;properties;countdownlatch;stringsearchmodelinterpolator;model)", "org.apache.maven.model.model.getcontributors()", "org.apache.maven.model.merge.modelmerger.getresourcekey(resource)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.run()", "org.apache.maven.model.interpolation.pathtranslatingpostprocessor.execute(string;object)", "org.apache.maven.model.merge.modelmerger.mergepluginconfiguration(pluginconfiguration;pluginconfiguration;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newprofileselector()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getactiveprofileids()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelnormalizer()", "org.apache.maven.model.activation.setjdk(string)", "org.apache.maven.model.validation.defaultmodelvalidatortest.teardown()", "org.apache.maven.model.model.getprojectdirectory()", "org.apache.maven.model.path.defaultmodelpathtranslator.defaultmodelpathtranslator()", "org.apache.maven.model.plugin.tostring()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_organization(model;model;boolean;map)", "org.apache.maven.model.building.simpleproblemcollector.simpleproblemcollector()", "org.apache.maven.model.buildbase.settestresources(list)", "org.apache.maven.model.profile.getid()", "org.apache.maven.model.modelbase.getproperties()", "org.apache.maven.model.merge.mavenmodelmerger.mavenmodelmerger()", "org.apache.maven.model.activation.clone()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.initparser(xmlpullparser)", "org.apache.maven.model.dependency.setscope(string)", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.defaultdependencymanagementinjector$managementmodelmerger(1)", "org.apache.maven.model.composition.defaultdependencymanagementimporter.defaultdependencymanagementimporter()", "org.apache.maven.model.dependency.setgroupid(string)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.createmodelbuildingrequest(properties)", "org.apache.maven.model.building.defaultmodelbuildingresult.defaultmodelbuildingresult()", "org.apache.maven.model.dependency.setclassifier(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatenotnull(string;modelproblemcollector;severity;object;string;inputlocationtracker)", "org.apache.maven.model.building.defaultmodelbuilderfactory$stublifecyclebindingsinjector.defaultmodelbuilderfactory$stublifecyclebindingsinjector()", "org.apache.maven.model.configurationcontainer.unsetinheritanceapplied()", "org.apache.maven.model.plugin.setexecutions(list)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newdependencymanagementimporter()", "org.apache.maven.model.building.filemodelsource.getinputstream()", "org.apache.maven.model.modelbase.getrepositories()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.stringsearchmodelinterpolatortest()"]}, "defaultmodelurlnormalizer": {"distance": 1.0, "methods": ["org.apache.maven.model.path.defaultmodelurlnormalizer.defaultmodelurlnormalizer()", "org.apache.maven.model.path.defaultmodelurlnormalizer.seturlnormalizer(urlnormalizer)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(string)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(model;modelbuildingrequest)"]}, "mojoexecutor": {"distance": 1.2222, "methods": ["org.apache.maven.lifecycle.internal.mojoexecutor.newdependencycontext(mavensession;list)", "org.apache.maven.lifecycle.internal.mojoexecutor.toscopes(string)", "org.apache.maven.lifecycle.internal.mojoexecutor.collectdependencyrequirements(set;set;collection)", "org.apache.maven.lifecycle.internal.mojoexecutor.mojoexecutor()"]}, "reactorcontext": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.reactorcontext.getreactorbuildstatus()", "org.apache.maven.lifecycle.internal.reactorcontext.getoriginalcontextclassloader()", "org.apache.maven.lifecycle.internal.reactorcontext.getresult()", "org.apache.maven.lifecycle.internal.reactorcontext.getprojectindex()", "org.apache.maven.lifecycle.internal.reactorcontext.reactorcontext(mavenexecutionresult;projectindex;classloader;reactorbuildstatus)"]}}