{"basicresourcereferencemapper": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.mapper.basicresourcereferencemapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.getcompatibilityscore(request)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.canbehandled(url)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.basicresourcereferencemapper(ipageparametersencoder;iprovider)"]}, "mountedmapper": {"distance": 1.1429, "methods": ["org.apache.wicket.core.request.mapper.mountedmapper.checkpageclass(class)", "org.apache.wicket.core.request.mapper.mountedmapper.mountedmapper(string;iprovider)", "org.apache.wicket.core.request.mapper.mountedmapper.getrecreatemountedpagesafterexpiry()", "org.apache.wicket.core.request.mapper.mountedmapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.mountedmapper.mountedmapper(string;iprovider;ipageparametersencoder)", "org.apache.wicket.core.request.mapper.mountedmapper.getpageclass()", "org.apache.wicket.core.request.mapper.mountedmapper.getpathsegments(string[])"]}, "abstractbookmarkablemapper": {"distance": 0.9524, "methods": ["org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.processbookmarkable(class;pageparameters)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.abstractbookmarkablemapper()", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.getpageinfo(ipagerequesthandler)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.checkpageinstance(irequestablepage)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.maprequest(request)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.checkpageclass(class)"]}, "abstractbookmarkablemapper$urlinfo": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.getpagecomponentinfo()", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.abstractbookmarkablemapper$urlinfo(pagecomponentinfo;class;pageparameters)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.getpageclass()", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.cleanpageparameters(pageparameters)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.getpageparameters()"]}, "abstractresource": {"distance": 1.25, "methods": ["org.apache.wicket.request.resource.abstractresource.abstractresource()"]}, "resourcereferenceregistry": {"distance": 0.9394, "methods": ["org.apache.wicket.request.resource.resourcereferenceregistry.resourcereferenceregistry()", "org.apache.wicket.request.resource.resourcereferenceregistry.resourcereferenceregistry(iresourcereferencefactory)", "org.apache.wicket.request.resource.resourcereferenceregistry.setautoaddedcapacity(int)", "org.apache.wicket.request.resource.resourcereferenceregistry.registerresourcereference(resourcereference)", "org.apache.wicket.request.resource.resourcereferenceregistry._registerresourcereference(resourcereference)"]}, "websession": {"distance": 1.25, "methods": ["org.apache.wicket.protocol.http.websession.websession(request)"]}, "webapplication": {"distance": 0.9725, "methods": ["org.apache.wicket.protocol.http.webapplication.hasfilterfactorymanager()", "org.apache.wicket.protocol.http.webapplication.newwebresponse(webrequest;httpservletresponse)", "org.apache.wicket.protocol.http.webapplication.newsession(request;response)", "org.apache.wicket.protocol.http.webapplication.logstarted()", "org.apache.wicket.protocol.http.webapplication.createwebrequest(httpservletrequest;string)", "org.apache.wicket.protocol.http.webapplication.getandremovebufferedresponse(string;url)", "org.apache.wicket.protocol.http.webapplication.getajaxrequesttargetlisteners()", "org.apache.wicket.protocol.http.webapplication.outputdevelopmentmodewarning()", "org.apache.wicket.protocol.http.webapplication.init()", "org.apache.wicket.protocol.http.webapplication.getservletcontext()", "org.apache.wicket.protocol.http.webapplication.storebufferedresponse(string;url;bufferedwebresponse)", "org.apache.wicket.protocol.http.webapplication.get()", "org.apache.wicket.protocol.http.webapplication.setwicketfilter(wicketfilter)", "org.apache.wicket.protocol.http.webapplication.newwebrequest(httpservletrequest;string)", "org.apache.wicket.protocol.http.webapplication.renderxmldecl(webpage;boolean)", "org.apache.wicket.protocol.http.webapplication.hasbufferedresponse(string;url)", "org.apache.wicket.protocol.http.webapplication.setajaxrequesttargetprovider(icontextprovider)", "org.apache.wicket.protocol.http.webapplication.createwebresponse(webrequest;httpservletresponse)", "org.apache.wicket.protocol.http.webapplication.setservletcontext(servletcontext)", "org.apache.wicket.protocol.http.webapplication.webapplication()", "org.apache.wicket.protocol.http.webapplication.internaldestroy()", "org.apache.wicket.protocol.http.webapplication.getapplicationkey()", "org.apache.wicket.protocol.http.webapplication.getmimetype(string)", "org.apache.wicket.protocol.http.webapplication.internalinit()"]}, "requestloggerrequestcyclelistener": {"distance": 1.0, "methods": ["org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onrequesthandlerresolved(requestcycle;irequesthandler)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onbeginrequest(requestcycle)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.isrequestloggingenabled()", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onrequesthandlerscheduled(requestcycle;irequesthandler)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onendrequest(requestcycle)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onexceptionrequesthandlerresolved(requestcycle;irequesthandler;exception)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.requestloggerrequestcyclelistener()"]}, "storedresponsesmap": {"distance": 1.0, "methods": ["org.apache.wicket.protocol.http.storedresponsesmap.removeeldestentry(entry)", "org.apache.wicket.protocol.http.storedresponsesmap.remove(object)", "org.apache.wicket.protocol.http.storedresponsesmap.storedresponsesmap(int;duration)", "org.apache.wicket.protocol.http.storedresponsesmap.put(string;object)"]}, "headerbufferingwebresponse": {"distance": 0.8772, "methods": ["org.apache.wicket.protocol.http.headerbufferingwebresponse.getmetaresponse()", "org.apache.wicket.protocol.http.headerbufferingwebresponse.stopbuffering()", "org.apache.wicket.protocol.http.headerbufferingwebresponse.setdateheader(string;time)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.headerbufferingwebresponse(webresponse)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.writemetadata(webresponse)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.setheader(string;string)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.flush()"]}, "pagecomponentinfo": {"distance": 0.8333, "methods": ["org.apache.wicket.request.mapper.info.pagecomponentinfo.pagecomponentinfo(pageinfo;componentinfo)", "org.apache.wicket.request.mapper.info.pagecomponentinfo.tostring()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.getcomponentinfo()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.getpageinfo()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.parse(string)"]}, "pageinfo": {"distance": 1.0, "methods": ["org.apache.wicket.request.mapper.info.pageinfo.pageinfo()", "org.apache.wicket.request.mapper.info.pageinfo.tostring()", "org.apache.wicket.request.mapper.info.pageinfo.getpageid()", "org.apache.wicket.request.mapper.info.pageinfo.parse(string)", "org.apache.wicket.request.mapper.info.pageinfo.pageinfo(integer)"]}, "componentinfo": {"distance": 1.0, "methods": ["org.apache.wicket.request.mapper.info.componentinfo.getcomponentpath()", "org.apache.wicket.request.mapper.info.componentinfo.encodecomponentpath(charsequence)", "org.apache.wicket.request.mapper.info.componentinfo.getlistenerinterface()", "org.apache.wicket.request.mapper.info.componentinfo.getrendercount()", "org.apache.wicket.request.mapper.info.componentinfo.decodecomponentpath(charsequence)", "org.apache.wicket.request.mapper.info.componentinfo.tostring()", "org.apache.wicket.request.mapper.info.componentinfo.isnumber(string)", "org.apache.wicket.request.mapper.info.componentinfo.getbehaviorid()", "org.apache.wicket.request.mapper.info.componentinfo.parse(string)", "org.apache.wicket.request.mapper.info.componentinfo.componentinfo(integer;string;string;integer)"]}, "group": {"distance": 1.0, "methods": ["org.apache.wicket.util.parse.metapattern.group.group(metapattern)", "org.apache.wicket.util.parse.metapattern.group.bind(int)", "org.apache.wicket.util.parse.metapattern.group.tostring()", "org.apache.wicket.util.parse.metapattern.group.get(matcher)"]}, "metapattern": {"distance": 1.2325, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.getvalue()", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.matcher()", "org.apache.wicket.util.parse.metapattern.metapattern.matcher(charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.getkey()", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(string)", "org.apache.wicket.util.parse.metapattern.metapattern.matcher(charsequence;int)", "org.apache.wicket.util.parse.metapattern.optionalmetapattern.tostring()", "org.apache.wicket.util.parse.metapattern.optionalmetapattern.optionalmetapattern(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.variableassignmentparser(charsequence;metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.variableassignmentparser(charsequence)", "org.apache.wicket.util.parse.metapattern.groupalreadyboundexception.groupalreadyboundexception()", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.metapatternparser(metapattern;charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getname()", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(list)", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.tagnameparser(charsequence)", "org.apache.wicket.util.parse.metapattern.group.group(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.metapattern.<clinit>()", "org.apache.wicket.util.parse.metapattern.metapattern.bind(int)", "org.apache.wicket.util.parse.metapattern.metapattern.compile(int)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.setpattern(metapattern)", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(metapattern[])", "org.apache.wicket.util.parse.metapattern.group.bind(int)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.metapatternparser(charsequence)", "org.apache.wicket.util.parse.metapattern.metapattern.tostring()", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getnamespace()", "org.apache.wicket.util.parse.metapattern.optionalmetapattern.optionalmetapattern(metapattern[])", "org.apache.wicket.util.parse.metapattern.group.tostring()", "org.apache.wicket.util.parse.metapattern.group.get(matcher)"]}, "feedbackcollector": {"distance": 0.8333, "methods": ["org.apache.wicket.feedback.feedbackcollector.feedbackcollector()", "org.apache.wicket.feedback.feedbackcollector.feedbackcollector(component)", "org.apache.wicket.feedback.feedbackcollector.collect()", "org.apache.wicket.feedback.feedbackcollector.collect(ifeedbackmessagefilter)"]}, "feedbackmessages": {"distance": 0.8095, "methods": ["org.apache.wicket.feedback.feedbackmessages.messages(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.clear(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.feedbackmessages()", "org.apache.wicket.feedback.feedbackmessages.detach()"]}, "urlresourcestream": {"distance": 0.9143, "methods": ["org.apache.wicket.core.util.resource.urlresourcestream.geturl()", "org.apache.wicket.core.util.resource.urlresourcestream.getdata(boolean)", "org.apache.wicket.core.util.resource.urlresourcestream.urlresourcestream(url)", "org.apache.wicket.core.util.resource.urlresourcestream.getinputstream()", "org.apache.wicket.core.util.resource.urlresourcestream.tostring()", "org.apache.wicket.core.util.resource.urlresourcestream.updatecontentlength()", "org.apache.wicket.core.util.resource.urlresourcestream.locationasstring()", "org.apache.wicket.core.util.resource.urlresourcestream.lastmodifiedtime()"]}, "abstractrepeater": {"distance": 1.0556, "methods": ["org.apache.wicket.markup.repeater.abstractrepeater.abstractrepeater(string;imodel)", "org.apache.wicket.markup.repeater.abstractrepeater.onbeforerender()"]}, "sqltimestampconverter": {"distance": 1.1667, "methods": ["org.apache.wicket.util.convert.converter.sqltimestampconverter.sqltimestampconverter()", "org.apache.wicket.util.convert.converter.sqltimestampconverter.sqltimestampconverter(int;int)"]}, "abstractconverter": {"distance": 1.3333, "methods": ["org.apache.wicket.util.convert.converter.abstractconverter.abstractconverter()"]}, "bigdecimalconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.bigdecimalconverter.bigdecimalconverter()"]}, "javaserializer": {"distance": 1.0, "methods": ["org.apache.wicket.serialize.java.javaserializer.javaserializer(string)"]}, "filecleaningtracker": {"distance": 1.0333, "methods": ["org.apache.wicket.util.file.filecleaningtracker.filecleaningtracker()", "org.apache.wicket.util.file.filecleaningtracker.exitwhenfinished()"]}, "file": {"distance": 1.0714, "methods": ["org.apache.wicket.util.file.files.getlocalfilefromurl(string)", "org.apache.wicket.core.util.file.webapplicationpath.webapplicationpath(servletcontext;string)", "org.apache.wicket.util.file.files.getlastmodified(file)", "org.apache.wicket.util.file.filecleaner.filecleaner()", "org.apache.wicket.util.file.filecleaningtracker.filecleaningtracker()", "org.apache.wicket.util.file.filecleaningtracker.exitwhenfinished()", "org.apache.wicket.util.file.filecleaner.destroy()", "org.apache.wicket.util.file.files.getlocalfilefromurl(url)", "org.apache.wicket.core.util.file.webapplicationpath.find(class;string)"]}, "urldecoder": {"distance": 1.5, "methods": ["org.apache.wicket.util.encoding.urldecoder.decode(string;charset)", "org.apache.wicket.util.encoding.urldecoder.decode(string;string)"]}, "urlencoder": {"distance": 1.6667, "methods": ["org.apache.wicket.util.encoding.urlencoder.encode(string;string)", "org.apache.wicket.util.encoding.urlencoder.encode(string;charset)"]}, "tagnameparser": {"distance": 1.3333, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getname()", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.tagnameparser(charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getnamespace()"]}, "initializer": {"distance": 1.0, "methods": ["org.apache.wicket.extensions.initializer.tostring()", "org.apache.wicket.initializer.init(application)", "org.apache.wicket.extensions.initializer.init(application)", "org.apache.wicket.extensions.initializer.initializer()", "org.apache.wicket.initializer.initializer()", "org.apache.wicket.extensions.initializer.destroy(application)", "org.apache.wicket.initializer.tostring()", "org.apache.wicket.initializer.destroy(application)"]}, "componenttag": {"distance": 0.96, "methods": ["org.apache.wicket.markup.componenttag.setflag(int;boolean)", "org.apache.wicket.markup.componenttag.hasbehaviors()", "org.apache.wicket.markup.componenttag.getattributes()", "org.apache.wicket.markup.componenttag.getuserdata(string)", "org.apache.wicket.markup.componenttag.isclose()", "org.apache.wicket.markup.componenttag.gettype()", "org.apache.wicket.markup.componenttag.getopentag()", "org.apache.wicket.markup.componenttag.<clinit>()", "org.apache.wicket.markup.componenttag.getpos()", "org.apache.wicket.markup.componenttag.isautocomponenttag()", "org.apache.wicket.markup.componenttag.getnamespace()", "org.apache.wicket.markup.componenttag.isautolinkenabled()", "org.apache.wicket.markup.componenttag.getid()", "org.apache.wicket.markup.componenttag.setid(string)", "org.apache.wicket.markup.componenttag.ismodified()", "org.apache.wicket.markup.componenttag.getflag(int)", "org.apache.wicket.markup.componenttag.isopen()", "org.apache.wicket.markup.componenttag.getname()", "org.apache.wicket.markup.componenttag.componenttag(xmltag)", "org.apache.wicket.markup.componenttag.syntheticclosetagstring()", "org.apache.wicket.markup.componenttag.requiresclosetag()", "org.apache.wicket.markup.componenttag.setmodified(boolean)", "org.apache.wicket.markup.componenttag.mutable()", "org.apache.wicket.markup.componenttag.writeoutput(response;boolean;string)", "org.apache.wicket.markup.componenttag.getattribute(string)", "org.apache.wicket.markup.componenttag.closes(markupelement)", "org.apache.wicket.markup.componenttag.makeimmutable()", "org.apache.wicket.markup.componenttag.setautocomponenttag(boolean)", "org.apache.wicket.markup.componenttag.getxmltag()", "org.apache.wicket.markup.componenttag.hasnoclosetag()", "org.apache.wicket.markup.componenttag.isopenclose()", "org.apache.wicket.markup.componenttag.copypropertiesto(componenttag)", "org.apache.wicket.markup.componenttag.setopentag(componenttag)", "org.apache.wicket.markup.componenttag.onbeforerender(component;markupstream)", "org.apache.wicket.markup.componenttag.isignore()"]}, "markupfactory": {"distance": 0.9444, "methods": ["org.apache.wicket.markup.markupfactory.loadmarkup(markupcontainer;markupresourcestream;boolean)", "org.apache.wicket.markup.markupfactory.newmarkupparser(markupresourcestream)", "org.apache.wicket.markup.markupfactory.getmarkupcache()", "org.apache.wicket.markup.markupfactory.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.markupfactory.hasmarkupcache()", "org.apache.wicket.markup.markupfactory.onappendmarkupfilter(imarkupfilter)", "org.apache.wicket.markup.markupfactory.get()", "org.apache.wicket.markup.markupfactory.<clinit>()", "org.apache.wicket.markup.markupfactory.getmarkuploader()", "org.apache.wicket.markup.markupfactory.newxmlpullparser()", "org.apache.wicket.markup.markupfactory.markupfactory()", "org.apache.wicket.markup.markupfactory.checkmarkuptype(markupcontainer)", "org.apache.wicket.markup.markupfactory.getmarkup(markupcontainer;class;boolean)", "org.apache.wicket.markup.markupfactory.getcontainerclass(markupcontainer;class)", "org.apache.wicket.markup.markupfactory.getmarkupresourcestreamprovider(markupcontainer)", "org.apache.wicket.markup.markupfactory.getmarkup(markupcontainer;boolean)"]}, "markupparser": {"distance": 1.25, "methods": ["org.apache.wicket.markup.markupparser.initializemarkupfilters(markup)", "org.apache.wicket.markup.markupparser.getmarkupfilters()", "org.apache.wicket.markup.markupparser.markupparser(ixmlpullparser;markupresourcestream)"]}, "markupparser$markupfilterlist": {"distance": 1.25, "methods": ["org.apache.wicket.markup.markupparser$markupfilterlist.firstindexofclass(class)", "org.apache.wicket.markup.markupparser$markupfilterlist.add(imarkupfilter)", "org.apache.wicket.markup.markupparser$markupfilterlist.onadd(imarkupfilter)", "org.apache.wicket.markup.markupparser$markupfilterlist.add(imarkupfilter;class)", "org.apache.wicket.markup.markupparser$markupfilterlist.markupparser$markupfilterlist(markupparser)"]}, "markupresourcestream": {"distance": 0.9505, "methods": ["org.apache.wicket.markup.markupresourcestream.getcachekey()", "org.apache.wicket.markup.markupresourcestream.getcontainerinfo()", "org.apache.wicket.markup.markupresourcestream.getresource()", "org.apache.wicket.markup.markupresourcestream.markupresourcestream(iresourcestream;containerinfo;class)", "org.apache.wicket.markup.markupresourcestream.tostring()", "org.apache.wicket.markup.markupresourcestream.lastmodifiedtime()", "org.apache.wicket.markup.markupresourcestream.setdoctype(charsequence)", "org.apache.wicket.markup.markupresourcestream.locationasstring()", "org.apache.wicket.markup.markupresourcestream.<clinit>()", "org.apache.wicket.markup.markupresourcestream.setwicketnamespace(string)", "org.apache.wicket.markup.markupresourcestream.setencoding(string)", "org.apache.wicket.markup.markupresourcestream.getwicketnamespace()", "org.apache.wicket.markup.markupresourcestream.setcachekey(string)"]}, "markuptype": {"distance": 1.1667, "methods": ["org.apache.wicket.markup.markuptype.getextension()", "org.apache.wicket.markup.markuptype.<clinit>()", "org.apache.wicket.markup.markuptype.getmimetype()", "org.apache.wicket.markup.markuptype.markuptype(string;string)"]}, "abstractmarkupparser": {"distance": 0.9375, "methods": ["org.apache.wicket.markup.abstractmarkupparser.getmarkupfilters()", "org.apache.wicket.markup.abstractmarkupparser.handlerawtext(string)", "org.apache.wicket.markup.abstractmarkupparser.abstractmarkupparser(ixmlpullparser;markupresourcestream)", "org.apache.wicket.markup.abstractmarkupparser.parsemarkup()", "org.apache.wicket.markup.abstractmarkupparser.getnexttag()", "org.apache.wicket.markup.abstractmarkupparser.parse()", "org.apache.wicket.markup.abstractmarkupparser.postprocess(markup)", "org.apache.wicket.markup.abstractmarkupparser.<clinit>()"]}, "containerinfo": {"distance": 0.84, "methods": ["org.apache.wicket.markup.containerinfo.getcontainerclass()", "org.apache.wicket.markup.containerinfo.containerinfo(markupcontainer)", "org.apache.wicket.markup.containerinfo.containerinfo(class;locale;string;string;markuptype)"]}, "defaultpagefactory": {"distance": 1.3333, "methods": ["org.apache.wicket.session.defaultpagefactory.processpage(irequestablepage;pageparameters)", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;object)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.defaultpagefactory.isbookmarkable(class)", "org.apache.wicket.session.defaultpagefactory.newpage(constructor;pageparameters)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.defaultpagefactory.newpage(class)"]}, "classvisitfilter": {"distance": 1.0, "methods": ["org.apache.wicket.util.visit.classvisitfilter.visitobject(object)", "org.apache.wicket.util.visit.classvisitfilter.visitchildren(object)", "org.apache.wicket.util.visit.classvisitfilter.classvisitfilter(class)"]}, "enclosurehandler": {"distance": 1.4286, "methods": ["org.apache.wicket.markup.parser.filter.enclosurehandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.enclosurehandler.enclosurehandler()", "org.apache.wicket.markup.parser.filter.enclosurehandler.enclosurehandler(markupresourcestream)"]}, "relativepathprefixhandler": {"distance": 1.6, "methods": ["org.apache.wicket.markup.parser.filter.relativepathprefixhandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.relativepathprefixhandler(markupresourcestream)", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.relativepathprefixhandler()"]}, "styleandscriptidentifier": {"distance": 1.0, "methods": ["org.apache.wicket.markup.parser.filter.styleandscriptidentifier.postprocess(markup)", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.styleandscriptidentifier()", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.<clinit>()", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.shouldprocess(componenttag)", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.oncomponenttag(componenttag)"]}, "conditionalcommentfilter": {"distance": 1.5, "methods": ["org.apache.wicket.markup.parser.filter.conditionalcommentfilter.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.conditionalcommentfilter()", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.<clinit>()", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.postprocess(markup)", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.onspecialtag(htmlspecialtag)"]}, "htmlhandler": {"distance": 1.3333, "methods": ["org.apache.wicket.markup.parser.filter.htmlhandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.htmlhandler.requiresclosetag(string)", "org.apache.wicket.markup.parser.filter.htmlhandler.<clinit>()", "org.apache.wicket.markup.parser.filter.htmlhandler.htmlhandler()", "org.apache.wicket.markup.parser.filter.htmlhandler.hasequaltagname(componenttag;componenttag)", "org.apache.wicket.markup.parser.filter.htmlhandler.postprocess(markup)"]}, "inlineenclosurehandler": {"distance": 1.6, "methods": ["org.apache.wicket.markup.parser.filter.inlineenclosurehandler.getattribute(componenttag;markupstream)", "org.apache.wicket.markup.parser.filter.inlineenclosurehandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.inlineenclosurehandler.inlineenclosurehandler(markupresourcestream)", "org.apache.wicket.markup.parser.filter.inlineenclosurehandler.inlineenclosurehandler()", "org.apache.wicket.markup.parser.filter.inlineenclosurehandler.getinlineenclosureattributename(markupstream)"]}, "openclosetagexpander": {"distance": 0.8333, "methods": ["org.apache.wicket.markup.parser.filter.openclosetagexpander.openclosetagexpander()", "org.apache.wicket.markup.parser.filter.openclosetagexpander.<clinit>()", "org.apache.wicket.markup.parser.filter.openclosetagexpander.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.openclosetagexpander.nextelement()"]}, "wicketlinktaghandler": {"distance": 1.1333, "methods": ["org.apache.wicket.markup.parser.filter.wicketlinktaghandler.wicketlinktaghandler(markupresourcestream)", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.wicketlinktaghandler()", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.setautomaticlinking(boolean)"]}, "wicketmessagetaghandler": {"distance": 2.0, "methods": ["org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.wicketmessagetaghandler()", "org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.wicketmessagetaghandler(markupresourcestream)", "org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.getwicketmessageattrname()"]}, "delegatelogdata": {"distance": 1.0, "methods": ["org.apache.wicket.request.handler.logger.delegatelogdata.delegatelogdata(ilogdata)"]}, "abstracttime": {"distance": 1.0833, "methods": ["org.apache.wicket.util.time.abstracttime.totimestring()", "org.apache.wicket.util.time.abstracttime.<clinit>()", "org.apache.wicket.util.time.abstracttime.totimestring(calendar)", "org.apache.wicket.util.time.abstracttime.after(abstracttimevalue)", "org.apache.wicket.util.time.abstracttime.abstracttime(long)"]}, "duration": {"distance": 1.1111, "methods": ["org.apache.wicket.util.time.duration.hours()", "org.apache.wicket.util.time.duration.minutes(double)", "org.apache.wicket.util.time.duration.milliseconds(long)", "org.apache.wicket.util.time.duration.hours(int)", "org.apache.wicket.util.time.duration.duration(long)", "org.apache.wicket.util.time.duration.hours(double)", "org.apache.wicket.util.time.duration.sleep()", "org.apache.wicket.util.time.duration.seconds(double)", "org.apache.wicket.util.time.duration.valueof(string)", "org.apache.wicket.util.time.duration.unitstring(double;string;locale)", "org.apache.wicket.util.time.duration.milliseconds(double)", "org.apache.wicket.util.time.duration.tostring()", "org.apache.wicket.util.time.duration.minutes()", "org.apache.wicket.util.time.duration.<clinit>()", "org.apache.wicket.util.time.duration.minutes(int)", "org.apache.wicket.util.time.duration.valueof(string;locale)", "org.apache.wicket.util.time.duration.days(int)", "org.apache.wicket.util.time.duration.seconds()", "org.apache.wicket.util.time.duration.tostring(locale)", "org.apache.wicket.util.time.duration.days()", "org.apache.wicket.util.time.duration.seconds(int)", "org.apache.wicket.util.time.duration.days(double)"]}, "time": {"distance": 1.0171, "methods": ["org.apache.wicket.util.time.time.valueof(calendar;string)", "org.apache.wicket.util.time.duration.hours()", "org.apache.wicket.util.time.duration.minutes(double)", "org.apache.wicket.util.time.time.todatestring()", "org.apache.wicket.util.time.duration.milliseconds(long)", "org.apache.wicket.util.time.time.<clinit>()", "org.apache.wicket.util.time.duration.hours(int)", "org.apache.wicket.util.time.duration.duration(long)", "org.apache.wicket.util.time.time.fromnow()", "org.apache.wicket.util.time.duration.hours(double)", "org.apache.wicket.util.time.duration.sleep()", "org.apache.wicket.util.time.time.valueof(string)", "org.apache.wicket.util.time.abstracttimevalue.abstracttimevalue(long)", "org.apache.wicket.util.time.time.time(long)", "org.apache.wicket.util.time.durationtest.durationtest()", "org.apache.wicket.util.time.abstracttime.totimestring()", "org.apache.wicket.util.time.duration.seconds(double)", "org.apache.wicket.util.time.time.tostring()", "org.apache.wicket.util.time.duration.valueof(string)", "org.apache.wicket.util.time.duration.unitstring(double;string;locale)", "org.apache.wicket.util.time.duration.milliseconds(double)", "org.apache.wicket.util.time.abstracttime.<clinit>()", "org.apache.wicket.util.time.duration.tostring()", "org.apache.wicket.util.time.duration.minutes()", "org.apache.wicket.util.time.time.subtract(time)", "org.apache.wicket.util.time.duration.<clinit>()", "org.apache.wicket.util.time.abstracttime.totimestring(calendar)", "org.apache.wicket.util.time.duration.minutes(int)", "org.apache.wicket.util.time.duration.valueof(string;locale)", "org.apache.wicket.util.time.duration.days(int)", "org.apache.wicket.util.time.time.elapsedsince()", "org.apache.wicket.util.time.duration.seconds()", "org.apache.wicket.util.time.time.add(duration)", "org.apache.wicket.util.time.abstracttime.after(abstracttimevalue)", "org.apache.wicket.util.time.time.millis(long)", "org.apache.wicket.util.time.time.todatestring(calendar)", "org.apache.wicket.util.time.abstracttimevalue.getmilliseconds()", "org.apache.wicket.util.time.duration.tostring(locale)", "org.apache.wicket.util.time.duration.days()", "org.apache.wicket.util.time.time.now()", "org.apache.wicket.util.time.duration.seconds(int)", "org.apache.wicket.util.time.abstracttime.abstracttime(long)", "org.apache.wicket.util.time.time.valueof(date)", "org.apache.wicket.util.time.duration.days(double)"]}, "abstractresourcestream": {"distance": 0.9375, "methods": ["org.apache.wicket.util.resource.abstractresourcestream.getlocale()", "org.apache.wicket.util.resource.abstractresourcestream.getstyle()", "org.apache.wicket.util.resource.abstractresourcestream.setstyle(string)", "org.apache.wicket.util.resource.abstractresourcestream.setvariation(string)", "org.apache.wicket.util.resource.abstractresourcestream.abstractresourcestream()", "org.apache.wicket.util.resource.abstractresourcestream.getvariation()", "org.apache.wicket.util.resource.abstractresourcestream.setlocale(locale)"]}, "stringresourcestream": {"distance": 1.0, "methods": ["org.apache.wicket.util.resource.stringresourcestream.tostring()", "org.apache.wicket.util.resource.stringresourcestream.getstring()", "org.apache.wicket.util.resource.stringresourcestream.stringresourcestream(charsequence;string)", "org.apache.wicket.util.resource.stringresourcestream.stringresourcestream(charsequence)"]}, "abstractstringresourcestream": {"distance": 0.9778, "methods": ["org.apache.wicket.util.resource.abstractstringresourcestream.abstractstringresourcestream(string)", "org.apache.wicket.util.resource.abstractstringresourcestream.getinputstream()", "org.apache.wicket.util.resource.abstractstringresourcestream.getcharset()"]}, "pageaccesssynchronizer": {"distance": 1.0, "methods": ["org.apache.wicket.page.pageaccesssynchronizer.pageaccesssynchronizer(duration)", "org.apache.wicket.page.pageaccesssynchronizer.<clinit>()", "org.apache.wicket.page.pageaccesssynchronizer.unlockallpages()", "org.apache.wicket.page.pageaccesssynchronizer.internalunlockpages(integer)", "org.apache.wicket.page.pageaccesssynchronizer.lockpage(int)", "org.apache.wicket.page.pageaccesssynchronizer.access$200()", "org.apache.wicket.page.pageaccesssynchronizer.adapt(ipagemanager)"]}, "label": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.basic.label.label(string;serializable)", "org.apache.wicket.markup.html.basic.label.label(string;imodel)", "org.apache.wicket.markup.html.basic.label.oncomponenttag(componenttag)", "org.apache.wicket.markup.html.basic.label.oncomponenttagbody(markupstream;componenttag)", "org.apache.wicket.markup.html.basic.label.label(string)"]}, "multilinelabel": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.basic.multilinelabel.multilinelabel(string;string)", "org.apache.wicket.markup.html.basic.multilinelabel.multilinelabel(string;imodel)"]}, "webpagerenderer": {"distance": 1.0, "methods": ["org.apache.wicket.request.handler.render.webpagerenderer.getandremovebufferedresponse(url)", "org.apache.wicket.request.handler.render.webpagerenderer.neverredirect(redirectpolicy)", "org.apache.wicket.request.handler.render.webpagerenderer.isajax(requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.renderpage(url;requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.<clinit>()", "org.apache.wicket.request.handler.render.webpagerenderer.shouldredirecttotargeturl(boolean;redirectpolicy;boolean;boolean;boolean;boolean;boolean)", "org.apache.wicket.request.handler.render.webpagerenderer.storebufferedresponse(url;bufferedwebresponse)", "org.apache.wicket.request.handler.render.webpagerenderer.notnewandnotstatelesspage(boolean;boolean)", "org.apache.wicket.request.handler.render.webpagerenderer.redirectto(url;requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.shouldrenderpageandwriteresponse(boolean;boolean;boolean;redirectpolicy;boolean;boolean;boolean;boolean)", "org.apache.wicket.request.handler.render.webpagerenderer.alwaysredirect(redirectpolicy)", "org.apache.wicket.request.handler.render.webpagerenderer.respond(requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.webpagerenderer(renderpagerequesthandler)", "org.apache.wicket.request.handler.render.webpagerenderer.bindsessionifneeded()"]}, "resourcestreamlocator": {"distance": 1.0, "methods": ["org.apache.wicket.core.util.resource.locator.resourcestreamlocator.locate(class;string;string;string;locale;string;boolean)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.locate(class;string)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.resourcestreamlocator(list)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.newresourcenameiterator(string;locale;string;string;string;boolean)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.newresourcenameiterator(string;locale;string;string;iterable;boolean)"]}, "resourcenameiterator": {"distance": 0.9286, "methods": ["org.apache.wicket.core.util.resource.locator.resourcenameiterator.getstyle()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.getlocale()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.next()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.prepend(object;char)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.resourcenameiterator(string;string;string;locale;iterable;boolean)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.tostring()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.newlocaleresourcenameiterator(locale;boolean)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.newstyleandvariationresourcenameiterator(string;string)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.hasnext()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.newextensionresourcenameiterator(iterable)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.getvariation()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.getextension()"]}, "applicationsettings": {"distance": 0.9231, "methods": ["org.apache.wicket.settings.def.applicationsettings.setaccessdeniedpage(class)", "org.apache.wicket.settings.def.applicationsettings.getfeedbackmessagecleanupfilter()", "org.apache.wicket.settings.def.applicationsettings.checkpageclass(class)", "org.apache.wicket.settings.def.applicationsettings.getclassresolver()", "org.apache.wicket.settings.def.applicationsettings.setinternalerrorpage(class)", "org.apache.wicket.settings.def.applicationsettings.setpageexpirederrorpage(class)", "org.apache.wicket.settings.def.applicationsettings.applicationsettings()", "org.apache.wicket.settings.def.applicationsettings.setfeedbackmessagecleanupfilter(ifeedbackmessagefilter)"]}, "debugsettings": {"distance": 0.9333, "methods": ["org.apache.wicket.settings.def.debugsettings.isoutputcomponentpath()", "org.apache.wicket.settings.def.debugsettings.islineprecisereportingonnewcomponentenabled()", "org.apache.wicket.settings.def.debugsettings.debugsettings()", "org.apache.wicket.settings.def.debugsettings.setajaxdebugmodeenabled(boolean)", "org.apache.wicket.settings.def.debugsettings.setdevelopmentutilitiesenabled(boolean)", "org.apache.wicket.settings.def.debugsettings.islineprecisereportingonaddcomponentenabled()", "org.apache.wicket.settings.def.debugsettings.setcomponentusecheck(boolean)", "org.apache.wicket.settings.def.debugsettings.isoutputmarkupcontainerclassname()", "org.apache.wicket.settings.def.debugsettings.getcomponentusecheck()", "org.apache.wicket.settings.def.debugsettings.isdevelopmentutilitiesenabled()"]}, "exceptionsettings": {"distance": 1.0, "methods": ["org.apache.wicket.settings.def.exceptionsettings.getunexpectedexceptiondisplay()", "org.apache.wicket.settings.def.exceptionsettings.exceptionsettings()", "org.apache.wicket.settings.def.exceptionsettings.setunexpectedexceptiondisplay(unexpectedexceptiondisplay)"]}, "resourcesettings": {"distance": 0.9749, "methods": ["org.apache.wicket.settings.def.resourcesettings.getresourcewatcher(boolean)", "org.apache.wicket.settings.def.resourcesettings.getresourcefinders()", "org.apache.wicket.settings.def.resourcesettings.getresourcestreamlocator()", "org.apache.wicket.settings.def.resourcesettings.getresourcepollfrequency()", "org.apache.wicket.settings.def.resourcesettings.isencodejsessionid()", "org.apache.wicket.settings.def.resourcesettings.resourcesettings(application)", "org.apache.wicket.settings.def.resourcesettings.setresourcepollfrequency(duration)", "org.apache.wicket.settings.def.resourcesettings.setfilecleaner(ifilecleaner)", "org.apache.wicket.settings.def.resourcesettings.setcachingstrategy(iresourcecachingstrategy)", "org.apache.wicket.settings.def.resourcesettings.setuseminifiedresources(boolean)", "org.apache.wicket.settings.def.resourcesettings.getfilecleaner()", "org.apache.wicket.settings.def.resourcesettings.addresourcefactory(string;iresourcefactory)", "org.apache.wicket.settings.def.resourcesettings.setjavascriptcompressor(ijavascriptcompressor)", "org.apache.wicket.settings.def.resourcesettings.getheaderitemcomparator()"]}, "securitysettings": {"distance": 0.9495, "methods": ["org.apache.wicket.settings.def.securitysettings.getenforcemounts()", "org.apache.wicket.settings.def.securitysettings.getauthorizationstrategy()", "org.apache.wicket.settings.def.securitysettings.<clinit>()", "org.apache.wicket.settings.def.securitysettings.securitysettings()"]}, "frameworksettings": {"distance": 0.8333, "methods": ["org.apache.wicket.settings.def.frameworksettings.getdetachlistener()", "org.apache.wicket.settings.def.frameworksettings.frameworksettings(application)"]}, "pagesettings": {"distance": 0.8214, "methods": ["org.apache.wicket.settings.def.pagesettings.pagesettings()", "org.apache.wicket.settings.def.pagesettings.getrecreatemountedpagesafterexpiry()", "org.apache.wicket.settings.def.pagesettings.getcomponentresolvers()", "org.apache.wicket.settings.def.pagesettings.addcomponentresolver(icomponentresolver)", "org.apache.wicket.settings.def.pagesettings.getversionpagesbydefault()"]}, "markupsettings": {"distance": 0.9333, "methods": ["org.apache.wicket.settings.def.markupsettings.getstripcomments()", "org.apache.wicket.settings.def.markupsettings.markupsettings()", "org.apache.wicket.settings.def.markupsettings.setstripwickettags(boolean)", "org.apache.wicket.settings.def.markupsettings.getstripwickettags()", "org.apache.wicket.settings.def.markupsettings.getautomaticlinking()", "org.apache.wicket.settings.def.markupsettings.getcompresswhitespace()", "org.apache.wicket.settings.def.markupsettings.getthrowexceptiononmissingxmldeclaration()", "org.apache.wicket.settings.def.markupsettings.getdefaultmarkupencoding()", "org.apache.wicket.settings.def.markupsettings.getmarkupfactory()"]}, "requestcyclesettings": {"distance": 0.9231, "methods": ["org.apache.wicket.settings.def.requestcyclesettings.getexceptionretrycount()", "org.apache.wicket.settings.def.requestcyclesettings.getresponserequestencoding()", "org.apache.wicket.settings.def.requestcyclesettings.requestcyclesettings()", "org.apache.wicket.settings.def.requestcyclesettings.getbufferresponse()", "org.apache.wicket.settings.def.requestcyclesettings.getrenderstrategy()", "org.apache.wicket.settings.def.requestcyclesettings.gettimeout()", "org.apache.wicket.settings.def.requestcyclesettings.getresponsefilters()", "org.apache.wicket.settings.def.requestcyclesettings.addresponsefilter(iresponsefilter)"]}, "listenerinterfacelogdata": {"distance": 1.0139, "methods": ["org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.trytogetcomponentclass(ipageandcomponentprovider)", "org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.trytogetcomponentpath(ipageandcomponentprovider)", "org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.trytogetformsubmittingcomponent(ipageandcomponentprovider)", "org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.listenerinterfacelogdata(ipageandcomponentprovider;requestlistenerinterface;integer)"]}, "pagelogdata": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.handler.logger.pagelogdata.pagelogdata(ipageprovider)", "org.apache.wicket.core.request.handler.logger.pagelogdata.trytogetpageclass(ipageprovider)"]}, "abstracterrorpage": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.pages.abstracterrorpage.isversioned()", "org.apache.wicket.markup.html.pages.abstracterrorpage.abstracterrorpage()"]}, "exceptionerrorpage": {"distance": 1.1667, "methods": ["org.apache.wicket.markup.html.pages.exceptionerrorpage.getstacktrace(throwable)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.exceptionerrorpage(throwable;page)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.geterrormessage(throwable)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.outputthrowable(throwable;stringbuilder;boolean)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.converttolist(throwable)"]}, "webapplicationpath": {"distance": 1.25, "methods": ["org.apache.wicket.core.util.file.webapplicationpath.webapplicationpath(servletcontext;string)", "org.apache.wicket.core.util.file.webapplicationpath.find(class;string)"]}, "conversionexception": {"distance": 0.9423, "methods": ["org.apache.wicket.util.convert.conversionexception.conversionexception(string)", "org.apache.wicket.util.convert.conversionexception.conversionexception(string;throwable)"]}, "inthashmap$entry": {"distance": 0.8667, "methods": ["org.apache.wicket.util.collections.inthashmap$entry.inthashmap$entry(int;object;entry)"]}, "inthashmap": {"distance": 0.9167, "methods": ["org.apache.wicket.util.collections.inthashmap.resize(int)", "org.apache.wicket.util.collections.inthashmap.inthashmap()", "org.apache.wicket.util.collections.inthashmap.addentry(int;object;int)", "org.apache.wicket.util.collections.inthashmap.init()", "org.apache.wicket.util.collections.inthashmap.indexfor(int;int)", "org.apache.wicket.util.collections.inthashmap.transfer(entry[])", "org.apache.wicket.util.collections.inthashmap.put(int;object)"]}, "componentstringresourceloader": {"distance": 0.8333, "methods": ["org.apache.wicket.resource.loader.componentstringresourceloader.componentstringresourceloader()"]}, "initializerstringresourceloader": {"distance": 1.5, "methods": ["org.apache.wicket.resource.loader.initializerstringresourceloader.initializerstringresourceloader(list)"]}, "abstractclassresolver": {"distance": 1.0, "methods": ["org.apache.wicket.application.abstractclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.abstractclassresolver.abstractclassresolver()", "org.apache.wicket.application.abstractclassresolver.resolveclass(string)", "org.apache.wicket.application.abstractclassresolver.getresources(string)"]}, "basewickettester$testfilterconfig": {"distance": 1.0, "methods": ["org.apache.wicket.util.tester.basewickettester$testfilterconfig.getservletcontext()", "org.apache.wicket.util.tester.basewickettester$testfilterconfig.basewickettester$testfilterconfig(basewickettester)"]}, "wickettester": {"distance": 0.8649, "methods": ["org.apache.wicket.util.tester.wickettester.wickettester(webapplication)", "org.apache.wicket.util.tester.wickettester.wickettester()"]}, "dummyhomepage": {"distance": 1.5, "methods": ["org.apache.wicket.util.tester.dummyhomepage.dummyhomepage()"]}, "autolinkresolver": {"distance": 0.9, "methods": ["org.apache.wicket.markup.resolver.autolinkresolver.autolinkresolver()"]}, "htmlheaderresolver": {"distance": 1.5, "methods": ["org.apache.wicket.markup.resolver.htmlheaderresolver.htmlheaderresolver()", "org.apache.wicket.markup.resolver.htmlheaderresolver.resolve(markupcontainer;markupstream;componenttag)", "org.apache.wicket.markup.resolver.htmlheaderresolver.newhtmlheadercontainer(string)"]}, "abstractlink": {"distance": 0.875, "methods": ["org.apache.wicket.markup.html.link.abstractlink.abstractlink(string)", "org.apache.wicket.markup.html.link.abstractlink.ondetach()", "org.apache.wicket.markup.html.link.abstractlink.abstractlink(string;imodel)"]}, "link": {"distance": 0.9583, "methods": ["org.apache.wicket.markup.html.link.abstractlink.abstractlink(string)", "org.apache.wicket.markup.html.link.link.link(string)", "org.apache.wicket.markup.html.link.abstractlink.ondetach()", "org.apache.wicket.markup.html.link.abstractlink.abstractlink(string;imodel)"]}, "defaultmarkupsourcingstrategy": {"distance": 1.5, "methods": ["org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.get()", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.oncomponenttagbody(component;markupstream;componenttag)", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.<clinit>()", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.defaultmarkupsourcingstrategy()", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.oncomponenttag(component;componenttag)", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.getmarkup(markupcontainer;component)"]}, "webrequest": {"distance": 1.125, "methods": ["org.apache.wicket.request.http.webrequest.isajax()", "org.apache.wicket.request.http.webrequest.webrequest()"]}, "webresponse": {"distance": 1.0, "methods": ["org.apache.wicket.request.http.webresponse.disablecaching()", "org.apache.wicket.request.http.webresponse.webresponse()"]}, "debugbar": {"distance": 2.0, "methods": ["org.apache.wicket.devutils.debugbar.debugbar.getcontributors(application)", "org.apache.wicket.devutils.debugbar.debugbar.registercontributor(idebugbarcontributor;application)", "org.apache.wicket.devutils.debugbar.debugbarinitializer.destroy(application)", "org.apache.wicket.devutils.debugbar.debugbarinitializer.init(application)", "org.apache.wicket.devutils.debugbar.debugbarinitializer.tostring()", "org.apache.wicket.devutils.debugbar.debugbarinitializer.debugbarinitializer()"]}, "listview": {"distance": 0.9545, "methods": ["org.apache.wicket.markup.html.list.listview.onpopulate()", "org.apache.wicket.markup.html.list.listview.getviewsize()", "org.apache.wicket.markup.html.list.listview.listview(string;imodel)"]}, "abortwithhttperrorcodeexception": {"distance": 1.3333, "methods": ["org.apache.wicket.request.http.flow.abortwithhttperrorcodeexception.abortwithhttperrorcodeexception(int;string)"]}, "xmltag$textsegment": {"distance": 1.5, "methods": ["org.apache.wicket.markup.parser.xmltag$textsegment.xmltag$textsegment(charsequence;int;int;int)"]}, "abstractmarkupfilter": {"distance": 0.9583, "methods": ["org.apache.wicket.markup.parser.abstractmarkupfilter.postprocess(markup)", "org.apache.wicket.markup.parser.abstractmarkupfilter.setnextfilter(imarkupfilter)", "org.apache.wicket.markup.parser.abstractmarkupfilter.getwicketnamespace()", "org.apache.wicket.markup.parser.abstractmarkupfilter.getwicketnamespace(markupstream)", "org.apache.wicket.markup.parser.abstractmarkupfilter.nextelement()", "org.apache.wicket.markup.parser.abstractmarkupfilter.getnextfilter()", "org.apache.wicket.markup.parser.abstractmarkupfilter.onspecialtag(htmlspecialtag)", "org.apache.wicket.markup.parser.abstractmarkupfilter.abstractmarkupfilter()", "org.apache.wicket.markup.parser.abstractmarkupfilter.abstractmarkupfilter(markupresourcestream)"]}, "xmlpullparser": {"distance": 0.881, "methods": ["org.apache.wicket.markup.parser.xmlpullparser.xmlpullparser()", "org.apache.wicket.markup.parser.xmlpullparser.getinputfrompositionmarker(int)", "org.apache.wicket.markup.parser.xmlpullparser.specialtaghandling(string;int;int)", "org.apache.wicket.markup.parser.xmlpullparser.parsetagtext(xmltag;string)", "org.apache.wicket.markup.parser.xmlpullparser.getdoctype()", "org.apache.wicket.markup.parser.xmlpullparser.parse(inputstream;string)", "org.apache.wicket.markup.parser.xmlpullparser.next()", "org.apache.wicket.markup.parser.xmlpullparser.setpositionmarker()", "org.apache.wicket.markup.parser.xmlpullparser.getelement()", "org.apache.wicket.markup.parser.xmlpullparser.getencoding()"]}, "xmltag": {"distance": 0.8856, "methods": ["org.apache.wicket.markup.parser.xmltag.makeimmutable()", "org.apache.wicket.markup.parser.xmltag.getattributes()", "org.apache.wicket.markup.parser.xmltag.closes(xmltag)", "org.apache.wicket.markup.parser.xmltag.setopentag(xmltag)", "org.apache.wicket.markup.parser.xmltag.isclose()", "org.apache.wicket.markup.parser.xmltag.isopenclose()", "org.apache.wicket.markup.parser.xmltag.ismutable()", "org.apache.wicket.markup.parser.xmltag.gettype()", "org.apache.wicket.markup.parser.xmltag.copypropertiesto(xmltag)", "org.apache.wicket.markup.parser.xmltag.<clinit>()", "org.apache.wicket.markup.parser.xmltag.isopen()", "org.apache.wicket.markup.parser.xmltag.mutable()", "org.apache.wicket.markup.parser.xmltag.getpos()", "org.apache.wicket.markup.parser.xmltag.xmltag()", "org.apache.wicket.markup.parser.xmltag.getnamespace()", "org.apache.wicket.markup.parser.xmltag.xmltag(textsegment;tagtype)", "org.apache.wicket.markup.parser.xmltag.getname()"]}, "requestcycle": {"distance": 0.9608, "methods": ["org.apache.wicket.request.cycle.requestcycle.renderurl(url;irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.getlisteners()", "org.apache.wicket.request.cycle.requestcycle.set(requestcycle)", "org.apache.wicket.request.cycle.requestcycle.geturlrenderer()", "org.apache.wicket.request.cycle.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.request.cycle.requestcycle.detach()", "org.apache.wicket.request.cycle.requestcycle.onendrequest()", "org.apache.wicket.request.cycle.requestcycle.setrequest(request)", "org.apache.wicket.request.cycle.requestcycle.getresponse()", "org.apache.wicket.request.cycle.requestcycle.getrequesthandlerscheduledaftercurrent()", "org.apache.wicket.request.cycle.requestcycle.handleexception(exception)", "org.apache.wicket.request.cycle.requestcycle.getrequest()", "org.apache.wicket.request.cycle.requestcycle.ondetach()", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.get()", "org.apache.wicket.request.cycle.requestcycle.urlfor(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.executeexceptionrequesthandler(irequesthandler;int)", "org.apache.wicket.request.cycle.requestcycle.find(class)", "org.apache.wicket.request.cycle.requestcycle.getexceptionretrycount()", "org.apache.wicket.request.cycle.requestcycle.getactiverequesthandler()", "org.apache.wicket.request.cycle.requestcycle.schedulerequesthandleraftercurrent(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.requestcycle(requestcyclecontext)", "org.apache.wicket.request.cycle.requestcycle.newurlrenderer()", "org.apache.wicket.request.cycle.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.request.cycle.requestcycle.oninternaldetach()", "org.apache.wicket.request.cycle.requestcycle.execute(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.getoriginalresponse()", "org.apache.wicket.request.cycle.requestcycle.resolverequesthandler()", "org.apache.wicket.request.cycle.requestcycle.onbeginrequest()", "org.apache.wicket.request.cycle.requestcycle.processrequestanddetach()", "org.apache.wicket.request.cycle.requestcycle.setresponse(response)", "org.apache.wicket.request.cycle.requestcycle.processrequest()"]}, "requestcyclecontext": {"distance": 0.8571, "methods": ["org.apache.wicket.request.cycle.requestcyclecontext.getresponse()", "org.apache.wicket.request.cycle.requestcyclecontext.getrequestmapper()", "org.apache.wicket.request.cycle.requestcyclecontext.getexceptionmapper()", "org.apache.wicket.request.cycle.requestcyclecontext.getrequest()", "org.apache.wicket.request.cycle.requestcyclecontext.setrequestmapper(irequestmapper)", "org.apache.wicket.request.cycle.requestcyclecontext.requestcyclecontext(request;response;irequestmapper;iexceptionmapper)", "org.apache.wicket.request.cycle.requestcyclecontext.setexceptionmapper(iexceptionmapper)"]}, "requestcyclelistenercollection": {"distance": 1.0625, "methods": ["org.apache.wicket.request.cycle.requestcyclelistenercollection.onrequesthandlerscheduled(requestcycle;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onrequesthandlerexecuted(requestcycle;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onexception(requestcycle;exception)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.ondetach(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onurlmapped(requestcycle;irequesthandler;url)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onrequesthandlerresolved(requestcycle;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.requestcyclelistenercollection()", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onbeginrequest(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onendrequest(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onexceptionrequesthandlerresolved(requestcycle;irequesthandler;exception)"]}, "requesthandlerstack": {"distance": 0.8125, "methods": ["org.apache.wicket.request.requesthandlerstack.detach()", "org.apache.wicket.request.requesthandlerstack.execute(irequesthandler)", "org.apache.wicket.request.requesthandlerstack.getactive()", "org.apache.wicket.request.requesthandlerstack.schedule(irequesthandler)", "org.apache.wicket.request.requesthandlerstack.resolvehandler(runtimeexception)", "org.apache.wicket.request.requesthandlerstack.next()", "org.apache.wicket.request.requesthandlerstack.requesthandlerstack()"]}, "url$queryparameter": {"distance": 1.0667, "methods": ["org.apache.wicket.request.url$queryparameter.getvalue()", "org.apache.wicket.request.url$queryparameter.tostring(charset)", "org.apache.wicket.request.url$queryparameter.url$queryparameter(string;string)", "org.apache.wicket.request.url$queryparameter.getname()", "org.apache.wicket.request.url$queryparameter.equals(object)"]}, "url": {"distance": 0.9593, "methods": ["org.apache.wicket.request.url.setcharset(charset)", "org.apache.wicket.request.url.url(list;list)", "org.apache.wicket.request.url.url()", "org.apache.wicket.request.url.iscontextabsolute()", "org.apache.wicket.request.url.url(list;list;charset)", "org.apache.wicket.request.url.getport()", "org.apache.wicket.request.url.getqueryparametervalue(string)", "org.apache.wicket.request.url.islastsegmentempty(list)", "org.apache.wicket.request.url.parse(charsequence;charset)", "org.apache.wicket.request.url.getqueryparameters()", "org.apache.wicket.request.url.parse(charsequence;charset;boolean)", "org.apache.wicket.request.url.decodeparameter(string;charset)", "org.apache.wicket.request.url.parsequeryparameter(string;charset)", "org.apache.wicket.request.url.concatsegments(list)", "org.apache.wicket.request.url.equals(object)", "org.apache.wicket.request.url.getqueryparameter(string)", "org.apache.wicket.request.url.decodesegment(string;charset)", "org.apache.wicket.request.url.url(url)", "org.apache.wicket.request.url.url(charset)", "org.apache.wicket.request.url.isatleastonesegmentreal(list)", "org.apache.wicket.request.url.tostring(charset)", "org.apache.wicket.request.url.islastsegmentempty()", "org.apache.wicket.request.url.encodesegment(string;charset)", "org.apache.wicket.request.url.tostring(stringmode;charset)", "org.apache.wicket.request.url.getpath(charset)", "org.apache.wicket.request.url.setprotocol(string)", "org.apache.wicket.request.url.parse(charsequence)", "org.apache.wicket.request.url.setport(integer)", "org.apache.wicket.request.url.access$000(string;charset)", "org.apache.wicket.request.url.getcharset()", "org.apache.wicket.request.url.getprotocol()", "org.apache.wicket.request.url.encodeparameter(string;charset)", "org.apache.wicket.request.url.sethost(string)", "org.apache.wicket.request.url.getsegments()", "org.apache.wicket.request.url.isfull()", "org.apache.wicket.request.url.islastsegmentreal()", "org.apache.wicket.request.url.getquerystring(charset)", "org.apache.wicket.request.url.gethost()", "org.apache.wicket.request.url.resolverelative(url)", "org.apache.wicket.request.url.tostring()"]}, "servletwebrequest": {"distance": 0.9136, "methods": ["org.apache.wicket.protocol.http.servlet.servletwebrequest.getcontainerrequest()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getcontextpath()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getheader(string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.access$000(servletwebrequest)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getpostparameters()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getcontextrelativeurl(string;string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getcharset()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getfilterpath()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.shouldpreserveclienturl()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.generatepostparameters()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getlocale()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getpostrequestparameters()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.geturl()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getclienturl()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.setparameters(url)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.servletwebrequest(httpservletrequest;string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.servletwebrequest(httpservletrequest;string;url)"]}, "errorattributes": {"distance": 0.8333, "methods": ["org.apache.wicket.protocol.http.servlet.errorattributes.of(httpservletrequest;string)", "org.apache.wicket.protocol.http.servlet.errorattributes.errorattributes(integer;string;string;string;class;throwable)", "org.apache.wicket.protocol.http.servlet.errorattributes.getrequesturi()"]}, "bufferedresponserequesthandler": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.handler.bufferedresponserequesthandler.respond(irequestcycle)", "org.apache.wicket.core.request.handler.bufferedresponserequesthandler.detach(irequestcycle)", "org.apache.wicket.core.request.handler.bufferedresponserequesthandler.bufferedresponserequesthandler(bufferedwebresponse)"]}, "renderpagerequesthandler": {"distance": 0.825, "methods": ["org.apache.wicket.core.request.handler.renderpagerequesthandler.getpageclass()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getredirectpolicy()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.respond(irequestcycle)", "org.apache.wicket.core.request.handler.renderpagerequesthandler.<clinit>()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getpage()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.ispageinstancecreated()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getpageprovider()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.detach(irequestcycle)", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getpageparameters()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.renderpagerequesthandler(ipageprovider)", "org.apache.wicket.core.request.handler.renderpagerequesthandler.renderpagerequesthandler(ipageprovider;redirectpolicy)"]}, "dateconverter": {"distance": 0.9167, "methods": ["org.apache.wicket.util.convert.converter.dateconverter.dateconverter()"]}, "fullybufferedreader": {"distance": 0.8438, "methods": ["org.apache.wicket.util.io.fullybufferedreader.find(char;int)", "org.apache.wicket.util.io.fullybufferedreader.getsubstring(int)", "org.apache.wicket.util.io.fullybufferedreader.getposition()", "org.apache.wicket.util.io.fullybufferedreader.setposition(int)", "org.apache.wicket.util.io.fullybufferedreader.charat(int)", "org.apache.wicket.util.io.fullybufferedreader.countlinesto(int)", "org.apache.wicket.util.io.fullybufferedreader.findoutofquotes(char;int)", "org.apache.wicket.util.io.fullybufferedreader.find(char)", "org.apache.wicket.util.io.fullybufferedreader.getsubstring(int;int)", "org.apache.wicket.util.io.fullybufferedreader.fullybufferedreader(string)", "org.apache.wicket.util.io.fullybufferedreader.getcolumnnumber()", "org.apache.wicket.util.io.fullybufferedreader.getlinenumber()", "org.apache.wicket.util.io.fullybufferedreader.fullybufferedreader(reader)", "org.apache.wicket.util.io.fullybufferedreader.size()", "org.apache.wicket.util.io.fullybufferedreader.setpositionmarker(int)", "org.apache.wicket.util.io.fullybufferedreader.findoutofquotes(char;int;char)"]}, "mockhttpsession": {"distance": 0.9549, "methods": ["org.apache.wicket.protocol.http.mock.mockhttpsession.mockhttpsession(servletcontext)"]}, "mockservletcontext": {"distance": 0.9615, "methods": ["org.apache.wicket.protocol.http.mock.mockservletcontext.getmimetype(string)", "org.apache.wicket.protocol.http.mock.mockservletcontext.mockservletcontext(application;string)", "org.apache.wicket.protocol.http.mock.mockservletcontext.getresource(string)"]}, "mockhttpservletresponse": {"distance": 0.9568, "methods": ["org.apache.wicket.protocol.http.mock.mockhttpservletresponse.formatdate(long)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.senderror(int)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.mockhttpservletresponse(mockhttpservletrequest)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setheader(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.initialize()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.formatdate(stringbuilder;calendar;boolean)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.encodeurl(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getredirectlocation()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getwriter()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setdateheader(string;long)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.senderror(int;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.sendredirect(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.encoderedirecturl(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setcontenttype(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.isredirect()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.append2digits(stringbuilder;int)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getcookies()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getstatus()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.reset()"]}, "mockhttpservletrequest": {"distance": 0.9804, "methods": ["org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setserverport(int)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.seturl(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setservername(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setparameter(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getlocales()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setscheme(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.geturl()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getquerystring()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.addcookies(iterable)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcookies()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.initialize()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getparametervalues(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getfilterprefix()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getrequesturi()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getheader(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcharacterencoding()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.issecure()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.mockhttpservletrequest(application;httpsession;servletcontext)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getscheme()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcharset()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setpath(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getservletpath()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setattribute(string;object)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.addheader(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.addparameter(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getlocale(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.seturl(url)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setdefaultheaders()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getlocale()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getparametermap()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcontextpath()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getservername()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getserverport()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setsecure(boolean)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getattribute(string)"]}, "form": {"distance": 1.0023, "methods": ["org.apache.wicket.markup.html.form.form.ondetach()", "org.apache.wicket.markup.html.form.form.getmethod()", "org.apache.wicket.markup.html.form.form.getrootform()", "org.apache.wicket.markup.html.form.autolabeltaghandler.oncomponenttag(componenttag)", "org.apache.wicket.markup.html.form.form$2.form$2(form)", "org.apache.wicket.markup.html.form.form.onformsubmitted()", "org.apache.wicket.markup.html.form.autolabeltaghandler.autolabeltaghandler(markupresourcestream)", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar$componentinitializer.uploadprogressbar$componentinitializer()", "org.apache.wicket.markup.html.form.form.form(string;imodel)", "org.apache.wicket.markup.html.form.form.form(string)", "org.apache.wicket.markup.html.form.form.getstatelesshint()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar$componentinitializer.init(application)", "org.apache.wicket.markup.html.form.form.onbeforerender()", "org.apache.wicket.markup.html.form.form.findsubmittingbutton()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadstatusresource.uploadstatusresource()", "org.apache.wicket.markup.html.form.autolabelresolver.autolabelresolver()", "org.apache.wicket.markup.html.form.autolabeltextresolver.autolabeltextresolver()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.access$000()"]}, "uploadprogressbar": {"distance": 1.0278, "methods": ["org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.access$000()"]}, "priorityfirstcomparator": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.priorityfirstcomparator.priorityfirstcomparator(boolean)"]}, "resourceaggregator": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.resourceaggregator.resourceaggregator(iheaderresponse)", "org.apache.wicket.markup.head.resourceaggregator.wasrendered(object)", "org.apache.wicket.markup.head.resourceaggregator.renderheaderitems()", "org.apache.wicket.markup.head.resourceaggregator.close()", "org.apache.wicket.markup.head.resourceaggregator.markrendered(object)", "org.apache.wicket.markup.head.resourceaggregator.rendercombinedeventscripts()"]}, "converterlocator": {"distance": 0.8333, "methods": ["org.apache.wicket.converterlocator.set(class;iconverter)", "org.apache.wicket.converterlocator.converterlocator()"]}, "component": {"distance": 1.001, "methods": ["org.apache.wicket.component.initmodel()", "org.apache.wicket.component.detachmodels()", "org.apache.wicket.component.getmodelimpl()", "org.apache.wicket.component.internalonafterconfigure()", "org.apache.wicket.component.addstatechange()", "org.apache.wicket.component.detachchildren()", "org.apache.wicket.component.isvisibilityallowed()", "org.apache.wicket.component.notifybehaviorscomponentbeforerender()", "org.apache.wicket.component.getrenderbodyonly()", "org.apache.wicket.component.fireinitialize()", "org.apache.wicket.component.getrequestflag(short)", "org.apache.wicket.component.isinitialized()", "org.apache.wicket.component.rendered()", "org.apache.wicket.component.isenabledinhierarchy()", "org.apache.wicket.component.render()", "org.apache.wicket.component.setid(string)", "org.apache.wicket.component.setmarkup(imarkupfragment)", "org.apache.wicket.component.markrendering(boolean)", "org.apache.wicket.component.getstatelesshint()", "org.apache.wicket.component.newmarkupsourcingstrategy()", "org.apache.wicket.component.data_start()", "org.apache.wicket.component.getmarkupattributes()", "org.apache.wicket.component.getpagerelativepath()", "org.apache.wicket.component.component(string;imodel)", "org.apache.wicket.component.isactionauthorized(action)", "org.apache.wicket.component.getlocale()", "org.apache.wicket.component.clearvisibleinhierarchycache()", "org.apache.wicket.component.isenabled()", "org.apache.wicket.component.renderclosingcomponenttag(markupstream;componenttag;boolean)", "org.apache.wicket.component.isversioned()", "org.apache.wicket.component.checkhierarchychange(component)", "org.apache.wicket.component.onvisiblestatechanged()", "org.apache.wicket.component.onbeforerenderchildren()", "org.apache.wicket.component.isstateless()", "org.apache.wicket.component.getapplication()", "org.apache.wicket.component.internalbeforerender()", "org.apache.wicket.component.removechildren()", "org.apache.wicket.component.isenableallowed()", "org.apache.wicket.component.onafterrender()", "org.apache.wicket.component.data_get(int)", "org.apache.wicket.component.setoutputmarkupid(boolean)", "org.apache.wicket.component.needtorendertag(componenttag)", "org.apache.wicket.component.getdefaultmodelobjectasstring()", "org.apache.wicket.component.determinevisibility()", "org.apache.wicket.component.renderhead(iheaderresponse)", "org.apache.wicket.component.getvariation()", "org.apache.wicket.component.data_insert(int;object)", "org.apache.wicket.component.internalonremove()", "org.apache.wicket.component.findparent(class)", "org.apache.wicket.component.detachmodel()", "org.apache.wicket.component.setvisible(boolean)", "org.apache.wicket.component.rendercomponenttag(componenttag)", "org.apache.wicket.component.setrequestflag(short;boolean)", "org.apache.wicket.component.getdefaultmodel()", "org.apache.wicket.component.isauto()", "org.apache.wicket.component.getmetadata()", "org.apache.wicket.component.cancalllistenerinterface(method)", "org.apache.wicket.component.setauto(boolean)", "org.apache.wicket.component.getrequestcycle()", "org.apache.wicket.component.beforerender()", "org.apache.wicket.component.getmarkuptag()", "org.apache.wicket.component.setmodelimpl(imodel)", "org.apache.wicket.component.configure()", "org.apache.wicket.component.getpage()", "org.apache.wicket.component.afterrender()", "org.apache.wicket.component.setparent(markupcontainer)", "org.apache.wicket.component.getbehaviors(class)", "org.apache.wicket.component.get(string)", "org.apache.wicket.component.getresponse()", "org.apache.wicket.component.getparent()", "org.apache.wicket.component.onconfigure()", "org.apache.wicket.component.internalrender()", "org.apache.wicket.component.setrenderbodyonly(boolean)", "org.apache.wicket.component.getstyle()", "org.apache.wicket.component.getmarkup()", "org.apache.wicket.component.internaldetach()", "org.apache.wicket.component.notifybehaviorscomponentrendered()", "org.apache.wicket.component.isvisibleinhierarchy()", "org.apache.wicket.component.clearenabledinhierarchycache()", "org.apache.wicket.component.data_length()", "org.apache.wicket.component.setflag(int;boolean)", "org.apache.wicket.component.renderhead(component;iheaderresponse)", "org.apache.wicket.component.getdefaultmodelobject()", "org.apache.wicket.component.getmetadata(metadatakey)", "org.apache.wicket.component.setmetadata(metadatakey;serializable)", "org.apache.wicket.component.onbeforerender()", "org.apache.wicket.component.detach()", "org.apache.wicket.component.internalprepareforrender(boolean)", "org.apache.wicket.component.onremove()", "org.apache.wicket.component.internalrendercomponent()", "org.apache.wicket.component.getmarkupsourcingstrategy()", "org.apache.wicket.component.tostring()", "org.apache.wicket.component.getrequest()", "org.apache.wicket.component.urlfor(requestlistenerinterface;pageparameters)", "org.apache.wicket.component.getsession()", "org.apache.wicket.component.isrenderallowed()", "org.apache.wicket.component.getdefaultmodelobjectasstring(object)", "org.apache.wicket.component.setrenderallowed()", "org.apache.wicket.component.getid()", "org.apache.wicket.component.findpage()", "org.apache.wicket.component.replacecomponenttagbody(markupstream;componenttag;charsequence)", "org.apache.wicket.component.internalmarkrendering(boolean)", "org.apache.wicket.component.getpath()", "org.apache.wicket.component.internalrenderhead(htmlheadercontainer)", "org.apache.wicket.component.detachfeedback()", "org.apache.wicket.component.ondetach()", "org.apache.wicket.component.component(string)", "org.apache.wicket.component.isvisible()", "org.apache.wicket.component.wrap(imodel)", "org.apache.wicket.component.onafterrenderchildren()", "org.apache.wicket.component.getbehaviors()", "org.apache.wicket.component.setescapemodelstrings(boolean)", "org.apache.wicket.component.tostring(boolean)", "org.apache.wicket.component.setversioned(boolean)", "org.apache.wicket.component.oncomponenttag(componenttag)", "org.apache.wicket.component.oninitialize()", "org.apache.wicket.component.getflag(int)", "org.apache.wicket.component.ispreparedforrender()", "org.apache.wicket.component.setrenderallowed(boolean)"]}, "application": {"distance": 0.9921, "methods": ["org.apache.wicket.application.getmarkupsettings()", "org.apache.wicket.application.getpagerendererprovider()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.notify(icomponentonbeforerenderlistener)", "org.apache.wicket.application.componentonbeforerenderlistenercollection.componentonbeforerenderlistenercollection()", "org.apache.wicket.application.newsharedresources(resourcereferenceregistry)", "org.apache.wicket.application.getrequestlogger()", "org.apache.wicket.application.componentinstantiationlistenercollection$1.notify(object)", "org.apache.wicket.application.componentinstantiationlistenercollection$1.componentinstantiationlistenercollection$1(componentinstantiationlistenercollection;component)", "org.apache.wicket.application.createrequestcycle(request;response)", "org.apache.wicket.application.usesdevelopmentconfig()", "org.apache.wicket.application.setpagemanagerprovider(ipagemanagerprovider)", "org.apache.wicket.application.getrequestcyclelisteners()", "org.apache.wicket.application.newmappercontext()", "org.apache.wicket.application.validateinit()", "org.apache.wicket.application.componentinitializationlistenercollection.oninitialize(component)", "org.apache.wicket.application.componentinitializationlistenercollection$1.componentinitializationlistenercollection$1(componentinitializationlistenercollection;component)", "org.apache.wicket.application.application()", "org.apache.wicket.application.componentonafterrenderlistenercollection$1.componentonafterrenderlistenercollection$1(componentonafterrenderlistenercollection;component)", "org.apache.wicket.application.componentinstantiationlistenercollection.oninstantiation(component)", "org.apache.wicket.application.componentonafterrenderlistenercollection.onafterrender(component)", "org.apache.wicket.application.setname(string)", "org.apache.wicket.application.getinitializers()", "org.apache.wicket.application.newconverterlocator()", "org.apache.wicket.application.getcomponentinstantiationlisteners()", "org.apache.wicket.application.getcomponentinitializationlisteners()", "org.apache.wicket.application.setsessionstoreprovider(iprovider)", "org.apache.wicket.application.getmappercontext()", "org.apache.wicket.application.getpagefactory()", "org.apache.wicket.application.headercontributorlistenercollection.headercontributorlistenercollection()", "org.apache.wicket.application.setrequestcycleprovider(irequestcycleprovider)", "org.apache.wicket.application.configure()", "org.apache.wicket.application.componentinstantiationlistenercollection$1.notify(icomponentinstantiationlistener)", "org.apache.wicket.application.getsessionstoreprovider()", "org.apache.wicket.application.getdebugsettings()", "org.apache.wicket.application.getpagemanagerprovider()", "org.apache.wicket.application.fetchcreateandsetsession(requestcycle)", "org.apache.wicket.application.internaldestroy()", "org.apache.wicket.application.initinitializers()", "org.apache.wicket.application.getsharedresources()", "org.apache.wicket.application.setpagerendererprovider(ipagerendererprovider)", "org.apache.wicket.application.componentinitializationlistenercollection.componentinitializationlistenercollection()", "org.apache.wicket.application.getrootrequestmapper()", "org.apache.wicket.application.defaultclassresolver.getclassloader()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.componentonbeforerenderlistenercollection$1(componentonbeforerenderlistenercollection;component)", "org.apache.wicket.application.abstractclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.setrootrequestmapper(irequestmapper)", "org.apache.wicket.application.getpagesettings()", "org.apache.wicket.application.load(properties)", "org.apache.wicket.application.getheadercontributorlisteners()", "org.apache.wicket.application.getcomponentonafterrenderlisteners()", "org.apache.wicket.application.internalgetpagemanager()", "org.apache.wicket.application.componentonafterrenderlistenercollection.componentonafterrenderlistenercollection()", "org.apache.wicket.application.setmetadata(metadatakey;object)", "org.apache.wicket.application.getapplicationsettings()", "org.apache.wicket.application.getsessionstore()", "org.apache.wicket.application.abstractclassresolver.abstractclassresolver()", "org.apache.wicket.application.init()", "org.apache.wicket.application.internalinit()", "org.apache.wicket.application.getrequestloggersettings()", "org.apache.wicket.application.get()", "org.apache.wicket.application.addinitializer(string)", "org.apache.wicket.application.getpagemanagercontext()", "org.apache.wicket.application.initializecomponents()", "org.apache.wicket.application.newresourcebundles(resourcereferenceregistry)", "org.apache.wicket.application.getsecuritysettings()", "org.apache.wicket.application.newresourcereferenceregistry()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.notify(object)", "org.apache.wicket.application.exists()", "org.apache.wicket.application.destroyinitializers()", "org.apache.wicket.application.decorateheaderresponse(iheaderresponse)", "org.apache.wicket.application.getcomponentpreonbeforerenderlisteners()", "org.apache.wicket.application.getframeworksettings()", "org.apache.wicket.application.initapplication()", "org.apache.wicket.application.getcomponentpostonbeforerenderlisteners()", "org.apache.wicket.application.abstractclassresolver.resolveclass(string)", "org.apache.wicket.application.defaultclassresolver.defaultclassresolver()", "org.apache.wicket.application.getexceptionsettings()", "org.apache.wicket.application.getrequestcycleprovider()", "org.apache.wicket.application.checksettingsavailable()", "org.apache.wicket.application.ondestroy()", "org.apache.wicket.application.getexceptionmapperprovider()", "org.apache.wicket.application.componentinstantiationlistenercollection.componentinstantiationlistenercollection()", "org.apache.wicket.application.newpagefactory()", "org.apache.wicket.application.getname()", "org.apache.wicket.application.componentonbeforerenderlistenercollection.onbeforerender(component)", "org.apache.wicket.application.abstractclassresolver.getresources(string)", "org.apache.wicket.application.getresourcesettings()", "org.apache.wicket.application.getrequestcyclesettings()", "org.apache.wicket.application.getmetadata(metadatakey)"]}, "requestlistenerinterface": {"distance": 0.9143, "methods": ["org.apache.wicket.requestlistenerinterface.getmethod()", "org.apache.wicket.requestlistenerinterface.isrenderpageafterinvocation()", "org.apache.wicket.requestlistenerinterface.isincluderendercount()", "org.apache.wicket.requestlistenerinterface.getlistenerinterfaceclass()", "org.apache.wicket.requestlistenerinterface.registerrequestlistenerinterface(requestlistenerinterface)", "org.apache.wicket.requestlistenerinterface.getname()", "org.apache.wicket.requestlistenerinterface.register()", "org.apache.wicket.requestlistenerinterface.invoke(irequestablecomponent)", "org.apache.wicket.requestlistenerinterface.forname(string)", "org.apache.wicket.requestlistenerinterface.internalinvoke(component;object)"]}, "session": {"distance": 0.9878, "methods": ["org.apache.wicket.session.detachfeedback()", "org.apache.wicket.session.defaultpagefactory.processpage(irequestablepage;pageparameters)", "org.apache.wicket.session.getid()", "org.apache.wicket.session.getsessionstore()", "org.apache.wicket.session.bind()", "org.apache.wicket.session.session(request)", "org.apache.wicket.session.internaldetach()", "org.apache.wicket.session.getauthorizationstrategy()", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;object)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.updateid()", "org.apache.wicket.session.getapplication()", "org.apache.wicket.session.exists()", "org.apache.wicket.session.detach()", "org.apache.wicket.session.defaultpagefactory.isbookmarkable(class)", "org.apache.wicket.session.get()", "org.apache.wicket.session.getlocale()", "org.apache.wicket.session.defaultpagefactory.newpage(constructor;pageparameters)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.getfeedbackmessages()", "org.apache.wicket.session.istemporary()", "org.apache.wicket.session.getmetadata(metadatakey)", "org.apache.wicket.session.getstyle()", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.getpagemanager()", "org.apache.wicket.session.nextpageid()"]}, "markupcontainer": {"distance": 0.9628, "methods": ["org.apache.wicket.markupcontainer.children_remove(int)", "org.apache.wicket.markupcontainer.autoadd(component;markupstream)", "org.apache.wicket.markupcontainer.getmarkup(component)", "org.apache.wicket.markupcontainer.tostring()", "org.apache.wicket.markupcontainer.removechildren()", "org.apache.wicket.markupcontainer.access$000(markupcontainer)", "org.apache.wicket.markupcontainer.detachchildren()", "org.apache.wicket.markupcontainer.children_get(int;boolean)", "org.apache.wicket.markupcontainer.getid(object)", "org.apache.wicket.markupcontainer.add(component[])", "org.apache.wicket.markupcontainer.children_add(component)", "org.apache.wicket.markupcontainer.children_remove(component)", "org.apache.wicket.markupcontainer.children_get(int)", "org.apache.wicket.markupcontainer.onvisiblestatechanged()", "org.apache.wicket.markupcontainer.access$100(markupcontainer;int)", "org.apache.wicket.markupcontainer.iterator()", "org.apache.wicket.markupcontainer.removedcomponent(component)", "org.apache.wicket.markupcontainer.markupcontainer(string;imodel)", "org.apache.wicket.markupcontainer.getassociatedmarkup()", "org.apache.wicket.markupcontainer.rendernext(markupstream)", "org.apache.wicket.markupcontainer.visitchildren(ivisitor)", "org.apache.wicket.markupcontainer.children_indexof(component)", "org.apache.wicket.markupcontainer.onrender()", "org.apache.wicket.markupcontainer.tostring(boolean)", "org.apache.wicket.markupcontainer.copychildren()", "org.apache.wicket.markupcontainer.put(component)", "org.apache.wicket.markupcontainer.renderall(markupstream;componenttag)", "org.apache.wicket.markupcontainer.remove(component)", "org.apache.wicket.markupcontainer.children_get(string)", "org.apache.wicket.markupcontainer.rendercomponenttagbody(markupstream;componenttag)", "org.apache.wicket.markupcontainer.children_size()", "org.apache.wicket.markupcontainer.internalmarkrendering(boolean)", "org.apache.wicket.markupcontainer.get(string)", "org.apache.wicket.markupcontainer.visitchildren(class;ivisitor)", "org.apache.wicket.markupcontainer.oncomponenttagbody(markupstream;componenttag)", "org.apache.wicket.markupcontainer.onbeforerenderchildren()", "org.apache.wicket.markupcontainer.onafterrenderchildren()", "org.apache.wicket.markupcontainer.internalinitialize()", "org.apache.wicket.markupcontainer.addedcomponent(component)"]}, "metadatakey": {"distance": 1.25, "methods": ["org.apache.wicket.metadatakey.get(metadataentry[])", "org.apache.wicket.metadatakey.set(metadataentry[];object)", "org.apache.wicket.metadatakey.metadatakey()", "org.apache.wicket.metadatakey.equals(object)"]}, "restartresponseatinterceptpageexception$interceptdata": {"distance": 1.5, "methods": ["org.apache.wicket.restartresponseatinterceptpageexception$interceptdata.get()", "org.apache.wicket.restartresponseatinterceptpageexception$interceptdata.<clinit>()"]}, "resourcebundles": {"distance": 0.875, "methods": ["org.apache.wicket.resourcebundles.resourcebundles(resourcereferenceregistry)"]}, "page": {"distance": 0.9821, "methods": ["org.apache.wicket.page.renderpage()", "org.apache.wicket.page.getrendercount()", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.pageaccesssynchronizer$pagelock(int;thread)", "org.apache.wicket.page.setstatelesshint(boolean)", "org.apache.wicket.page.onrender()", "org.apache.wicket.page.wascreatedbookmarkable()", "org.apache.wicket.page.internalonafterconfigure()", "org.apache.wicket.page.componentrendered(component)", "org.apache.wicket.page.pagemanagerdecorator.commitrequest()", "org.apache.wicket.page.pagemanagerdecorator.supportsversioning()", "org.apache.wicket.page.pagemanagerdecorator.touchpage(imanageablepage)", "org.apache.wicket.page.ispagestateless()", "org.apache.wicket.page.pageaccesssynchronizer$2.commitrequest()", "org.apache.wicket.page.getstatelesshint()", "org.apache.wicket.page.defaultpagemanagercontext$1.defaultpagemanagercontext$1(defaultpagemanagercontext)", "org.apache.wicket.page.getautoindex()", "org.apache.wicket.page.pageaccesssynchronizer$1.pageaccesssynchronizer$1(pageaccesssynchronizer)", "org.apache.wicket.page.setnextavailableid()", "org.apache.wicket.page.defaultpagemanagercontext.defaultpagemanagercontext()", "org.apache.wicket.page.pageaccesssynchronizer.pageaccesssynchronizer(duration)", "org.apache.wicket.page.ondetach()", "org.apache.wicket.page.internalprepareforrender(boolean)", "org.apache.wicket.page.pageaccesssynchronizer$2.touchpage(imanageablepage)", "org.apache.wicket.page.init()", "org.apache.wicket.page.checkrendering(markupcontainer)", "org.apache.wicket.page.componentadded(component)", "org.apache.wicket.page.onafterrender()", "org.apache.wicket.page.<clinit>()", "org.apache.wicket.page.dirty()", "org.apache.wicket.page.tostring()", "org.apache.wicket.page.setnumericid(int)", "org.apache.wicket.page.pagemanagerdecorator.getpage(int)", "org.apache.wicket.page.pageaccesssynchronizer.<clinit>()", "org.apache.wicket.page.getpageclass()", "org.apache.wicket.page.pageaccesssynchronizer$1.createinstance()", "org.apache.wicket.page.pageaccesssynchronizer$2.pageaccesssynchronizer$2(pageaccesssynchronizer;ipagemanager)", "org.apache.wicket.page.componentstatechanging(component)", "org.apache.wicket.page.hasinvisibletransparentchild(markupcontainer;component)", "org.apache.wicket.page.pageaccesssynchronizer.unlockallpages()", "org.apache.wicket.page.pageaccesssynchronizer.internalunlockpages(integer)", "org.apache.wicket.page.detachmodels()", "org.apache.wicket.page.getpageparameters()", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.markreleased(boolean)", "org.apache.wicket.page.pageaccesssynchronizer$2.getpage(int)", "org.apache.wicket.page.page()", "org.apache.wicket.page.setfreezepageid(boolean)", "org.apache.wicket.page.access$000(page)", "org.apache.wicket.page.getid()", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.access$100(pagelock)", "org.apache.wicket.page.getpageid()", "org.apache.wicket.page.page(pageparameters;imodel)", "org.apache.wicket.page.setwascreatedbookmarkable(boolean)", "org.apache.wicket.page.page(pageparameters)", "org.apache.wicket.page.componentremoved(component)", "org.apache.wicket.page.onbeforerender()", "org.apache.wicket.page.pageaccesssynchronizer.lockpage(int)", "org.apache.wicket.page.dirty(boolean)", "org.apache.wicket.page.pagemanagerdecorator.pagemanagerdecorator(ipagemanager)", "org.apache.wicket.page.pageaccesssynchronizer.access$200()", "org.apache.wicket.page.pageaccesssynchronizer.adapt(ipagemanager)", "org.apache.wicket.page.peekpagestateless()", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.access$000(pagelock)", "org.apache.wicket.page.isbookmarkable()"]}, "mocksessionstore": {"distance": 0.8533, "methods": ["org.apache.wicket.mock.mocksessionstore.getsessionid(request;boolean)", "org.apache.wicket.mock.mocksessionstore.mocksessionstore()", "org.apache.wicket.mock.mocksessionstore.bind(request;session)", "org.apache.wicket.mock.mocksessionstore.registerunboundlistener(unboundlistener)", "org.apache.wicket.mock.mocksessionstore.cleanup()", "org.apache.wicket.mock.mocksessionstore.destroy()", "org.apache.wicket.mock.mocksessionstore.lookup(request)"]}, "changelistenerset": {"distance": 2.0, "methods": ["org.apache.wicket.util.listener.changelistenerset.changelistenerset()"]}, "listenercollection": {"distance": 0.8333, "methods": ["org.apache.wicket.util.listener.listenercollection.add(object)", "org.apache.wicket.util.listener.listenercollection.reversednotifyignoringexceptions(inotifier)", "org.apache.wicket.util.listener.listenercollection.listenercollection()", "org.apache.wicket.util.listener.listenercollection.notify(inotifier)", "org.apache.wicket.util.listener.listenercollection.isallowingduplicates()", "org.apache.wicket.util.listener.listenercollection.iterator()", "org.apache.wicket.util.listener.listenercollection.reversednotify(inotifier)"]}, "htmlheadercontainer$headerstreamstate": {"distance": 1.0, "methods": ["org.apache.wicket.markup.html.internal.htmlheadercontainer$headerstreamstate.htmlheadercontainer$headerstreamstate(markupstream;componenttag)", "org.apache.wicket.markup.html.internal.htmlheadercontainer$headerstreamstate.getmarkupstream()", "org.apache.wicket.markup.html.internal.htmlheadercontainer$headerstreamstate.htmlheadercontainer$headerstreamstate(markupstream;componenttag;1)", "org.apache.wicket.markup.html.internal.htmlheadercontainer$headerstreamstate.getopentag()"]}, "htmlheadercontainer": {"distance": 0.9524, "methods": ["org.apache.wicket.markup.html.internal.htmlheadercontainer.newheaderresponse()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.getmarkup()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.ondetach()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.oncomponenttagbody(markupstream;componenttag)", "org.apache.wicket.markup.html.internal.htmlheadercontainer.getcleanresponse(stringresponse)", "org.apache.wicket.markup.html.internal.htmlheadercontainer.getheaderresponse()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.renderheadertagbody(headerstreamstate)", "org.apache.wicket.markup.html.internal.htmlheadercontainer.htmlheadercontainer(string)"]}, "task": {"distance": 0.8095, "methods": ["org.apache.wicket.util.thread.task.access$302(task;boolean)", "org.apache.wicket.util.thread.task.access$100(task)", "org.apache.wicket.util.thread.task.stop()", "org.apache.wicket.util.thread.task.access$000(task)", "org.apache.wicket.util.thread.task.interrupt()", "org.apache.wicket.util.thread.task.task(string)", "org.apache.wicket.util.thread.task.getlog()", "org.apache.wicket.util.thread.task.run(duration;icode)"]}, "securepackageresourceguard": {"distance": 0.8125, "methods": ["org.apache.wicket.markup.html.securepackageresourceguard.clearcache()", "org.apache.wicket.markup.html.securepackageresourceguard.securepackageresourceguard(concurrentmap)", "org.apache.wicket.markup.html.securepackageresourceguard.addpattern(string)"]}, "webmarkupcontainer": {"distance": 1.3333, "methods": ["org.apache.wicket.markup.html.webmarkupcontainer.webmarkupcontainer(string;imodel)", "org.apache.wicket.markup.html.webmarkupcontainer.webmarkupcontainer(string)"]}, "webpage": {"distance": 1.1429, "methods": ["org.apache.wicket.markup.html.webpage.setheaders(webresponse)", "org.apache.wicket.markup.html.webpage.onafterrender()", "org.apache.wicket.markup.html.webpage.configureresponse(webresponse)", "org.apache.wicket.markup.html.webpage.webpage(pageparameters)", "org.apache.wicket.markup.html.webpage.<clinit>()", "org.apache.wicket.markup.html.webpage.webpage()", "org.apache.wicket.markup.html.webpage.getmarkuptype()", "org.apache.wicket.markup.html.webpage.commoninit()", "org.apache.wicket.markup.html.webpage.renderxmldecl()", "org.apache.wicket.markup.html.webpage.dirty(boolean)", "org.apache.wicket.markup.html.webpage.validateheaders()", "org.apache.wicket.markup.html.webpage.onrender()"]}, "packageresourceguard": {"distance": 0.8125, "methods": ["org.apache.wicket.markup.html.packageresourceguard.packageresourceguard()"]}}