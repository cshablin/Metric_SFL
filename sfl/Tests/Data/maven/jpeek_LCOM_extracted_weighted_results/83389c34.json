{"scm": {"distance": 0.875, "methods": ["org.apache.maven.model.scm.getconnection()", "org.apache.maven.model.scm.settag(string)", "org.apache.maven.model.scm.setconnection(string)", "org.apache.maven.model.scm.gettag()", "org.apache.maven.model.scm.clone()", "org.apache.maven.model.scm.seturl(string)", "org.apache.maven.model.scm.geturl()", "org.apache.maven.model.scm.setdeveloperconnection(string)", "org.apache.maven.model.scm.getdeveloperconnection()", "org.apache.maven.model.scm.scm()"]}, "artifactresolutionresult": {"distance": 0.9194, "methods": ["org.apache.maven.artifact.resolver.artifactresolutionresult.hasversionrangeviolations()", "org.apache.maven.artifact.resolver.artifactresolutionresult.hascirculardependencyexceptions()", "org.apache.maven.artifact.resolver.artifactresolutionresult.getmissingartifacts()", "org.apache.maven.artifact.resolver.artifactresolutionresult.hasexceptions()", "org.apache.maven.artifact.resolver.artifactresolutionresult.hasmetadataresolutionexceptions()", "org.apache.maven.artifact.resolver.artifactresolutionresult.setartifacts(set)", "org.apache.maven.artifact.resolver.artifactresolutionresult.setartifactresolutionnodes(set)", "org.apache.maven.artifact.resolver.artifactresolutionresult.addmissingartifact(artifact)", "org.apache.maven.artifact.resolver.artifactresolutionresult.hasmissingartifacts()", "org.apache.maven.artifact.resolver.artifactresolutionresult.haserrorartifactexceptions()", "org.apache.maven.artifact.resolver.artifactresolutionresult.getartifactresolutionnodes()", "org.apache.maven.artifact.resolver.artifactresolutionresult.getartifacts()", "org.apache.maven.artifact.resolver.artifactresolutionresult.setoriginatingartifact(artifact)", "org.apache.maven.artifact.resolver.artifactresolutionresult.artifactresolutionresult()", "org.apache.maven.artifact.resolver.artifactresolutionresult.addartifact(artifact)", "org.apache.maven.artifact.resolver.artifactresolutionresult.initlist(list)"]}, "comparableversion$stringitem": {"distance": 1.0, "methods": ["org.apache.maven.artifact.versioning.comparableversion$stringitem.isnull()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparableversion$stringitem(string;boolean)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.tostring()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparablequalifier(string)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.<clinit>()"]}, "reportplugin": {"distance": 0.9167, "methods": ["org.apache.maven.model.reportplugin.getconfiguration()", "org.apache.maven.model.reportplugin.getartifactid()", "org.apache.maven.model.reportplugin.getversion()", "org.apache.maven.model.reportplugin.constructkey(string;string)", "org.apache.maven.model.reportplugin.getreportsets()", "org.apache.maven.model.reportplugin.setartifactid(string)", "org.apache.maven.model.reportplugin.clone()", "org.apache.maven.model.reportplugin.setreportsets(list)", "org.apache.maven.model.reportplugin.setversion(string)", "org.apache.maven.model.reportplugin.isinherited()", "org.apache.maven.model.reportplugin.setgroupid(string)", "org.apache.maven.model.reportplugin.getkey()", "org.apache.maven.model.reportplugin.setconfiguration(object)", "org.apache.maven.model.reportplugin.getgroupid()", "org.apache.maven.model.reportplugin.getinherited()", "org.apache.maven.model.reportplugin.reportplugin()"]}, "mavenexecutionplan": {"distance": 0.9778, "methods": ["org.apache.maven.lifecycle.mavenexecutionplan.getmojoexecutions()", "org.apache.maven.lifecycle.mavenexecutionplan.forceallcomplete()", "org.apache.maven.lifecycle.mavenexecutionplan.waituntilalldone()", "org.apache.maven.lifecycle.mavenexecutionplan.mavenexecutionplan(set;set;list;defaultlifecycles)", "org.apache.maven.lifecycle.mavenexecutionplan.getdistinctphasesinorderofexecutionplanappearance(list)", "org.apache.maven.lifecycle.mavenexecutionplan.getexecutionplanitems()", "org.apache.maven.lifecycle.mavenexecutionplan.getrequiredresolutionscopes()", "org.apache.maven.lifecycle.mavenexecutionplan.getrequiredcollectionscopes()", "org.apache.maven.lifecycle.mavenexecutionplan.containsphase(string)", "org.apache.maven.lifecycle.mavenexecutionplan.findlastinphase(string)", "org.apache.maven.lifecycle.mavenexecutionplan.size()", "org.apache.maven.lifecycle.mavenexecutionplan.iterator()"]}, "artifactresolutionrequest": {"distance": 0.963, "methods": ["org.apache.maven.artifact.resolver.artifactresolutionrequest.gettransferlistener()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setmirrors(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getmirrors()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setresolvetransitively(boolean)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setmanagedversionmap(map)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.isforceupdate()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setresolveroot(boolean)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getservers()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getcache()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.settransferlistener(artifacttransferlistener)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getremoterepositories()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.artifactresolutionrequest()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setlocalrepository(artifactrepository)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setproxies(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setservers(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getcollectionfilter()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setresolutionfilter(artifactfilter)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setartifact(artifact)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getartifact()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setoffline(boolean)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.artifactresolutionrequest(repositoryrequest)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setartifactdependencies(set)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.isresolvetransitively()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.isoffline()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setremoterepositories(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getartifactdependencies()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getlisteners()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getlocalrepository()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getmanagedversionmap()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.isresolveroot()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getproxies()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setcache(repositorycache)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setcollectionfilter(artifactfilter)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setforceupdate(boolean)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getresolutionfilter()"]}, "mavenmodelmerger": {"distance": 1.0294, "methods": ["org.apache.maven.model.merge.mavenmodelmerger.mergedistributionmanagement_repository(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getpluginkey(plugin)", "org.apache.maven.model.merge.mavenmodelmerger.getrepositorybasekey(repositorybase)", "org.apache.maven.model.merge.mavenmodelmerger.mergedistributionmanagement_site(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_filters(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_artifactid(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_mailinglists(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;string;string)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_modelversion(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_licenses(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.concatpath(string;string)", "org.apache.maven.model.merge.mavenmodelmerger.mergescm_connection(scm;scm;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergesite_url(site;site;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mavenmodelmerger()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_name(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getreportsetkey(reportset)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergescm_developerconnection(scm;scm;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_modules(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_organization(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergepluginexecution_goals(pluginexecution;pluginexecution;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getextensionkey(extension)", "org.apache.maven.model.merge.mavenmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_contributors(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_cimanagement(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_repositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_url(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_profiles(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getreportpluginkey(reportplugin)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_developers(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergedistributionmanagement_snapshotrepository(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_prerequisites(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergescm_url(scm;scm;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getdependencykey(dependency)", "org.apache.maven.model.merge.mavenmodelmerger.getpluginexecutionkey(pluginexecution)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_issuemanagement(model;model;boolean;map)"]}, "mavenmetadatasource": {"distance": 1.1143, "methods": ["org.apache.maven.project.artifact.mavenmetadatasource.createdependencyartifact(artifactfactory;dependency;string;artifactfilter)", "org.apache.maven.project.artifact.mavenmetadatasource.retrieverelocatedproject(artifact;metadataresolutionrequest)", "org.apache.maven.project.artifact.mavenmetadatasource.getprojectbuilder()", "org.apache.maven.project.artifact.mavenmetadatasource.geteffectivescope(string;string)", "org.apache.maven.project.artifact.mavenmetadatasource.retrieve(metadataresolutionrequest)", "org.apache.maven.project.artifact.mavenmetadatasource.createdependencyartifact(dependency;artifact;artifact)", "org.apache.maven.project.artifact.mavenmetadatasource.getsystemproperties()", "org.apache.maven.project.artifact.mavenmetadatasource.createdependencyfilter(dependency;artifactfilter)", "org.apache.maven.project.artifact.mavenmetadatasource.mavenmetadatasource()", "org.apache.maven.project.artifact.mavenmetadatasource.aggregaterepositories(list;list)"]}, "buildbase": {"distance": 0.9167, "methods": ["org.apache.maven.model.buildbase.addresource(resource)", "org.apache.maven.model.buildbase.clone()", "org.apache.maven.model.buildbase.setresources(list)", "org.apache.maven.model.buildbase.getdefaultgoal()", "org.apache.maven.model.buildbase.getfinalname()", "org.apache.maven.model.buildbase.getfilters()", "org.apache.maven.model.buildbase.gettestresources()", "org.apache.maven.model.buildbase.buildbase()", "org.apache.maven.model.buildbase.getresources()", "org.apache.maven.model.buildbase.setfilters(list)", "org.apache.maven.model.buildbase.settestresources(list)", "org.apache.maven.model.buildbase.setfinalname(string)", "org.apache.maven.model.buildbase.setdirectory(string)", "org.apache.maven.model.buildbase.setdefaultgoal(string)", "org.apache.maven.model.buildbase.getdirectory()"]}, "defaultmodelbuildingevent": {"distance": 1.0, "methods": ["org.apache.maven.model.building.defaultmodelbuildingevent.getmodel()", "org.apache.maven.model.building.defaultmodelbuildingevent.defaultmodelbuildingevent(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuildingevent.getrequest()"]}, "defaultmavenexecutionrequest": {"distance": 0.9891, "methods": ["org.apache.maven.execution.defaultmavenexecutionrequest.setgoals(list)", "org.apache.maven.execution.defaultmavenexecutionrequest.setlocalrepositorypath(file)", "org.apache.maven.execution.defaultmavenexecutionrequest.getservers()", "org.apache.maven.execution.defaultmavenexecutionrequest.setshowerrors(boolean)", "org.apache.maven.execution.defaultmavenexecutionrequest.defaultmavenexecutionrequest()", "org.apache.maven.execution.defaultmavenexecutionrequest.getlocalrepository()", "org.apache.maven.execution.defaultmavenexecutionrequest.getrepositorycache()", "org.apache.maven.execution.defaultmavenexecutionrequest.setexecutionlistener(executionlistener)", "org.apache.maven.execution.defaultmavenexecutionrequest.setplugingroups(list)", "org.apache.maven.execution.defaultmavenexecutionrequest.setlocalrepository(artifactrepository)", "org.apache.maven.execution.defaultmavenexecutionrequest.setremoterepositories(list)", "org.apache.maven.execution.defaultmavenexecutionrequest.gettransferlistener()", "org.apache.maven.execution.defaultmavenexecutionrequest.setpluginartifactrepositories(list)", "org.apache.maven.execution.defaultmavenexecutionrequest.getusersettingsfile()", "org.apache.maven.execution.defaultmavenexecutionrequest.setprojectpresent(boolean)", "org.apache.maven.execution.defaultmavenexecutionrequest.getmirrors()", "org.apache.maven.execution.defaultmavenexecutionrequest.setbasedirectory(file)", "org.apache.maven.execution.defaultmavenexecutionrequest.getbasedirectory()", "org.apache.maven.execution.defaultmavenexecutionrequest.getsystemproperties()", "org.apache.maven.execution.defaultmavenexecutionrequest.getuserproperties()", "org.apache.maven.execution.defaultmavenexecutionrequest.isupdatesnapshots()", "org.apache.maven.execution.defaultmavenexecutionrequest.getplugingroups()", "org.apache.maven.execution.defaultmavenexecutionrequest.getproxies()", "org.apache.maven.execution.defaultmavenexecutionrequest.getremoterepositories()", "org.apache.maven.execution.defaultmavenexecutionrequest.isoffline()", "org.apache.maven.execution.defaultmavenexecutionrequest.getpluginartifactrepositories()", "org.apache.maven.execution.defaultmavenexecutionrequest.getgoals()", "org.apache.maven.execution.defaultmavenexecutionrequest.setsystemproperties(properties)", "org.apache.maven.execution.defaultmavenexecutionrequest.setpom(file)"]}, "buildlogitem$dependencylogentry": {"distance": 1.25, "methods": ["org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getexecutionplanitem()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getmessage()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getelapsed()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;string)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tostring()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodedescription(long)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodekey()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;executionplanitem;long;long;string)"]}, "activation": {"distance": 0.84, "methods": ["org.apache.maven.settings.activation.getfile()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrange(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isinrange(string;list)", "org.apache.maven.model.activation.setactivebydefault(boolean)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.activation.isactivebydefault()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newprofile(string;string)", "org.apache.maven.settings.activation.isactivebydefault()", "org.apache.maven.model.activation.getfile()", "org.apache.maven.settings.activation.getos()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.addzerotokens(list;int)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.jdkversionprofileactivator$rangevalue(string;boolean)", "org.apache.maven.model.activation.getjdk()", "org.apache.maven.model.activation.activation()", "org.apache.maven.model.activation.getos()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$100(rangevalue)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isrange(string)", "org.apache.maven.settings.activation.activation()", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.settings.activation.setactivebydefault(boolean)", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.activation.setproperty(activationproperty)", "org.apache.maven.settings.activation.getjdk()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newproperties(string;string)", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.activation.setjdk(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrelationorder(string;rangevalue;boolean)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newproperties(string)", "org.apache.maven.model.activation.getproperty()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.settings.activation.getproperty()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newprofile(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$000(rangevalue)", "org.apache.maven.model.activation.clone()"]}, "executionplanitem": {"distance": 0.8438, "methods": ["org.apache.maven.lifecycle.internal.executionplanitem.getmojoexecution()", "org.apache.maven.lifecycle.internal.executionplanitem.executionplanitem(mojoexecution;schedule)", "org.apache.maven.lifecycle.internal.executionplanitem.setcomplete()", "org.apache.maven.lifecycle.internal.executionplanitem.ensurecomplete()", "org.apache.maven.lifecycle.internal.executionplanitem.forcecomplete()", "org.apache.maven.lifecycle.internal.executionplanitem.notifylisteners()", "org.apache.maven.lifecycle.internal.executionplanitem.getschedule()", "org.apache.maven.lifecycle.internal.executionplanitem.getlifecyclephase()", "org.apache.maven.lifecycle.internal.executionplanitem.waituntildone()"]}, "defaultrepositorymetadatamanager": {"distance": 0.9, "methods": ["org.apache.maven.artifact.repository.metadata.defaultrepositorymetadatamanager.defaultrepositorymetadatamanager()"]}, "repositorybase": {"distance": 0.8611, "methods": ["org.apache.maven.model.repositorybase.getname()", "org.apache.maven.settings.repositorybase.getlayout()", "org.apache.maven.model.repositorybase.clone()", "org.apache.maven.model.repositorybase.geturl()", "org.apache.maven.settings.repositorybase.repositorybase()", "org.apache.maven.settings.repositorybase.seturl(string)", "org.apache.maven.settings.repositorybase.getname()", "org.apache.maven.model.repositorybase.getid()", "org.apache.maven.model.repositorybase.setname(string)", "org.apache.maven.settings.repositorybase.getid()", "org.apache.maven.model.repositorybase.getlayout()", "org.apache.maven.model.repositorybase.setlayout(string)", "org.apache.maven.model.repositorybase.repositorybase()", "org.apache.maven.settings.repositorybase.geturl()", "org.apache.maven.model.repositorybase.seturl(string)", "org.apache.maven.settings.repositorybase.setid(string)", "org.apache.maven.model.repositorybase.setid(string)"]}, "defaultartifactfiltermanager": {"distance": 1.0, "methods": ["org.apache.maven.defaultartifactfiltermanager.defaultartifactfiltermanager()", "org.apache.maven.defaultartifactfiltermanager.<clinit>()"]}, "resource": {"distance": 0.875, "methods": ["org.apache.maven.model.resource.isfiltering()", "org.apache.maven.model.resource.<clinit>()", "org.apache.maven.model.resource.setfiltering(string)", "org.apache.maven.model.resource.resource()", "org.apache.maven.model.resource.clone()", "org.apache.maven.model.resource.getfiltering()"]}, "defaultrepositorylayout": {"distance": 1.3333, "methods": ["org.apache.maven.artifact.repository.layout.defaultrepositorylayout.formatasdirectory(string)", "org.apache.maven.artifact.repository.layout.defaultrepositorylayout.defaultrepositorylayout()", "org.apache.maven.artifact.repository.layout.defaultrepositorylayout.pathof(artifact)"]}, "settings": {"distance": 0.9668, "methods": ["org.apache.maven.settings.settingsutils.convertrepositorypolicy(repositorypolicy)", "org.apache.maven.settings.repositorypolicy.setchecksumpolicy(string)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.gettrimmedvalue(string)", "org.apache.maven.settings.activation.getfile()", "org.apache.maven.settings.settings.getprofiles()", "org.apache.maven.settings.pomconstructionwithsettingstest.pomconstructionwithsettingstest()", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.parserepository(xmlpullparser;boolean)", "org.apache.maven.settings.repositorypolicy.setenabled(boolean)", "org.apache.maven.settings.repositorybase.getlayout()", "org.apache.maven.settings.repository.getsnapshots()", "org.apache.maven.settings.settings.setactiveprofiles(list)", "org.apache.maven.settings.settings.settings()", "org.apache.maven.settings.repositorypolicy.getchecksumpolicy()", "org.apache.maven.settings.repository.setsnapshots(repositorypolicy)", "org.apache.maven.settings.identifiablebase.setid(string)", "org.apache.maven.settings.profile.getproperties()", "org.apache.maven.settings.repositorypolicy.repositorypolicy()", "org.apache.maven.settings.pomconstructionwithsettingstest.setup()", "org.apache.maven.settings.repositorybase.repositorybase()", "org.apache.maven.settings.repositorybase.seturl(string)", "org.apache.maven.settings.activation.isactivebydefault()", "org.apache.maven.settings.pomconstructionwithsettingstest.buildpom(string)", "org.apache.maven.settings.repositorypolicy.getupdatepolicy()", "org.apache.maven.settings.pomconstructionwithsettingstest.readsettingsfile(file)", "org.apache.maven.settings.profile.addproperty(string;string)", "org.apache.maven.settings.repositorybase.getname()", "org.apache.maven.settings.activation.getos()", "org.apache.maven.settings.runtimeinfo.<clinit>()", "org.apache.maven.settings.identifiablebase.getid()", "org.apache.maven.settings.activation.activation()", "org.apache.maven.settings.identifiablebase.identifiablebase()", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.settingsxpp3reader()", "org.apache.maven.settings.activation.setactivebydefault(boolean)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.read(xmlpullparser;boolean)", "org.apache.maven.settings.repositorybase.getid()", "org.apache.maven.settings.settingsutils.convertfromsettingsprofile(profile)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.parserepositorypolicy(xmlpullparser;boolean)", "org.apache.maven.settings.activation.getjdk()", "org.apache.maven.settings.repositorypolicy.isenabled()", "org.apache.maven.settings.runtimeinfo.runtimeinfo(file)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.getbooleanvalue(string;string;xmlpullparser;string)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.parseactivation(xmlpullparser;boolean)", "org.apache.maven.settings.profile.getrepositories()", "org.apache.maven.settings.profile.setpluginrepositories(list)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.parsesettings(xmlpullparser;boolean)", "org.apache.maven.settings.repositorybase.geturl()", "org.apache.maven.settings.settings.setprofiles(list)", "org.apache.maven.settings.profile.profile()", "org.apache.maven.settings.repository.setreleases(repositorypolicy)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.checkfieldwithduplicate(xmlpullparser;string;string;set)", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.read(reader)", "org.apache.maven.settings.trackablebase.trackablebase()", "org.apache.maven.settings.profile.getactivation()", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.read(reader;boolean)", "org.apache.maven.settings.repositorybase.setid(string)", "org.apache.maven.settings.crypto.defaultsettingsdecrypter.defaultsettingsdecrypter()", "org.apache.maven.settings.settingsutils.convertfromsettingsrepository(repository)", "org.apache.maven.settings.profile.getpluginrepositories()", "org.apache.maven.settings.repository.getreleases()", "org.apache.maven.settings.io.xpp3.settingsxpp3reader.parseprofile(xmlpullparser;boolean)", "org.apache.maven.settings.activation.getproperty()", "org.apache.maven.settings.profile.setrepositories(list)", "org.apache.maven.settings.pomconstructionwithsettingstest.teardown()", "org.apache.maven.settings.repository.repository()", "org.apache.maven.settings.settings.getactiveprofiles()", "org.apache.maven.settings.settings.setmodelencoding(string)", "org.apache.maven.settings.profile.setactivation(activation)"]}, "lifecycledependencyresolver": {"distance": 2.0, "methods": ["org.apache.maven.lifecycle.internal.lifecycledependencyresolver.getdependencyartifacts(mavenproject;set)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.getprojects(mavenproject;mavensession;boolean)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.getprojectdependencies(mavenproject;collection;collection;mavensession;boolean;set)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.lifecycledependencyresolver(projectdependenciesresolver;logger)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.resolveprojectdependencies(mavenproject;collection;collection;mavensession;boolean;set)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.updateprojectartifacts(mavenproject;set)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.resolvedependencies(boolean;mavenproject;mavensession;mavenexecutionplan;set)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.resolvedependencies(boolean;mavensession;mavenexecutionplan;list;set)"]}, "defaultmavenexecutionresult": {"distance": 0.9, "methods": ["org.apache.maven.execution.defaultmavenexecutionresult.addbuildsummary(buildsummary)", "org.apache.maven.execution.defaultmavenexecutionresult.defaultmavenexecutionresult()"]}, "mavensession": {"distance": 0.9366, "methods": ["org.apache.maven.execution.mavensession.getcurrentproject()", "org.apache.maven.execution.mavensession.getexecutionrootdirectory()", "org.apache.maven.execution.mavensession.setprojectdependencygraph(projectdependencygraph)", "org.apache.maven.execution.mavensession.mavensession(plexuscontainer;mavenexecutionrequest;mavenexecutionresult;mavenproject)", "org.apache.maven.execution.mavensession.getplugingroups()", "org.apache.maven.execution.mavensession.clone()", "org.apache.maven.execution.mavensession.mavensession(plexuscontainer;mavenexecutionrequest;mavenexecutionresult)", "org.apache.maven.execution.mavensession.getrequest()", "org.apache.maven.execution.mavensession.getgoals()", "org.apache.maven.execution.mavensession.getlocalrepository()", "org.apache.maven.execution.mavensession.getrepositorycache()", "org.apache.maven.execution.mavensession.getexecutionproperties()", "org.apache.maven.execution.mavensession.getprojectdependencygraph()", "org.apache.maven.execution.mavensession.setcurrentproject(mavenproject)", "org.apache.maven.execution.mavensession.setprojects(list)", "org.apache.maven.execution.mavensession.getprojects()", "org.apache.maven.execution.mavensession.mavensession(plexuscontainer;mavenexecutionrequest;mavenexecutionresult;list)", "org.apache.maven.execution.mavensession.isoffline()", "org.apache.maven.execution.mavensession.gettoplevelproject()"]}, "localartifactrepository": {"distance": 2.0, "methods": ["org.apache.maven.repository.localartifactrepository.localartifactrepository()"]}, "flatrepositorylayout": {"distance": 1.3333, "methods": ["org.apache.maven.artifact.repository.layout.flatrepositorylayout.flatrepositorylayout()"]}, "tasksegment": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.tasksegment.gettasks()", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean;object[])", "org.apache.maven.lifecycle.internal.tasksegment.isaggregating()", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean)"]}, "defaultprojectdependenciesresolver": {"distance": 1.3333, "methods": ["org.apache.maven.defaultprojectdependenciesresolver.defaultprojectdependenciesresolver()", "org.apache.maven.defaultprojectdependenciesresolver.resolveimpl(collection;collection;collection;mavensession;set)", "org.apache.maven.defaultprojectdependenciesresolver.getignorableartifacts(collection)", "org.apache.maven.defaultprojectdependenciesresolver.resolve(collection;collection;mavensession)", "org.apache.maven.defaultprojectdependenciesresolver.resolve(mavenproject;collection;mavensession)"]}, "versioning": {"distance": 0.9, "methods": ["org.apache.maven.artifact.versioning.comparableversion.parseitem(boolean;string)", "org.apache.maven.artifact.versioning.comparableversion$listitem.comparableversion$listitem(1)", "org.apache.maven.artifact.versioning.comparableversion.parseversion(string)", "org.apache.maven.artifact.versioning.defaultartifactversion.parseversion(string)", "org.apache.maven.artifact.versioning.versionrange.cloneof()", "org.apache.maven.artifact.versioning.versionrange.versionrange(artifactversion;list)", "org.apache.maven.artifact.versioning.comparableversion$integeritem.isnull()", "org.apache.maven.artifact.versioning.comparableversion$listitem.tostring()", "org.apache.maven.artifact.versioning.comparableversion$integeritem.<clinit>()", "org.apache.maven.artifact.versioning.versionrange.getrecommendedversion()", "org.apache.maven.artifact.versioning.defaultartifactversion.defaultartifactversion(string)", "org.apache.maven.artifact.versioning.comparableversion.comparableversion(string)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.isnull()", "org.apache.maven.artifact.versioning.comparableversion$integeritem.comparableversion$integeritem(string)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparableversion$stringitem(string;boolean)", "org.apache.maven.artifact.versioning.defaultartifactversion.getnextintegertoken(stringtokenizer)", "org.apache.maven.artifact.versioning.managedversionmap.managedversionmap(map)", "org.apache.maven.artifact.versioning.versionrange.createfromversionspec(string)", "org.apache.maven.artifact.versioning.comparableversion$listitem.normalize()", "org.apache.maven.artifact.versioning.comparableversion$integeritem.comparableversion$integeritem()", "org.apache.maven.artifact.versioning.comparableversion$integeritem.tostring()", "org.apache.maven.artifact.versioning.defaultartifactversion.tostring()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.tostring()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparablequalifier(string)", "org.apache.maven.artifact.versioning.versionrange.createfromversion(string)", "org.apache.maven.artifact.versioning.comparableversion$listitem.comparableversion$listitem()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.<clinit>()"]}, "artifactrepositorypolicy": {"distance": 1.0, "methods": ["org.apache.maven.artifact.repository.artifactrepositorypolicy.ordinalofupdatepolicy(string)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.artifactrepositorypolicy(artifactrepositorypolicy)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.artifactrepositorypolicy()", "org.apache.maven.artifact.repository.artifactrepositorypolicy.setchecksumpolicy(string)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.artifactrepositorypolicy(boolean;string;string)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.merge(artifactrepositorypolicy)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.getupdatepolicy()", "org.apache.maven.artifact.repository.artifactrepositorypolicy.isenabled()", "org.apache.maven.artifact.repository.artifactrepositorypolicy.getchecksumpolicy()", "org.apache.maven.artifact.repository.artifactrepositorypolicy.setupdatepolicy(string)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.ordinalofchecksumpolicy(string)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.setenabled(boolean)"]}, "defaultlifecyclebindingsinjector$lifecyclebindingsmerger": {"distance": 1.5, "methods": ["org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.defaultlifecyclebindingsinjector$lifecyclebindingsmerger()", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.merge(model;model)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.defaultlifecyclebindingsinjector$lifecyclebindingsmerger(1)"]}, "snapshottransformation": {"distance": 1.1667, "methods": ["org.apache.maven.repository.legacy.resolver.transform.snapshottransformation.transformforresolve(artifact;repositoryrequest)", "org.apache.maven.repository.legacy.resolver.transform.snapshottransformation.snapshottransformation()"]}, "pluginexecution": {"distance": 0.9273, "methods": ["org.apache.maven.model.pluginexecution.setid(string)", "org.apache.maven.model.pluginexecution.clone()", "org.apache.maven.model.pluginexecution.getgoals()", "org.apache.maven.model.pluginexecution.tostring()", "org.apache.maven.model.pluginexecution.getid()", "org.apache.maven.model.pluginexecution.getphase()", "org.apache.maven.model.pluginexecution.addgoal(string)", "org.apache.maven.model.pluginexecution.setphase(string)", "org.apache.maven.model.pluginexecution.setgoals(list)", "org.apache.maven.model.pluginexecution.pluginexecution()"]}, "defaultlifecycles": {"distance": 0.8889, "methods": ["org.apache.maven.lifecycle.defaultlifecycles.get(string)", "org.apache.maven.lifecycle.defaultlifecycles.defaultlifecycles(map;logger)", "org.apache.maven.lifecycle.defaultlifecycles.getphasetolifecyclemap()", "org.apache.maven.lifecycle.defaultlifecycles.getlifecycles()"]}, "defaultartifact": {"distance": 0.9547, "methods": ["org.apache.maven.artifact.defaultartifact.defaultartifact(string;string;versionrange;string;string;string;artifacthandler;boolean)", "org.apache.maven.artifact.defaultartifact.getrepository()", "org.apache.maven.artifact.defaultartifact.empty(string)", "org.apache.maven.artifact.defaultartifact.hashcode()", "org.apache.maven.artifact.defaultartifact.setrepository(artifactrepository)", "org.apache.maven.artifact.defaultartifact.getscope()", "org.apache.maven.artifact.defaultartifact.getversion()", "org.apache.maven.artifact.defaultartifact.getdependencyfilter()", "org.apache.maven.artifact.defaultartifact.setfile(file)", "org.apache.maven.artifact.defaultartifact.validateidentity()", "org.apache.maven.artifact.defaultartifact.getversionrange()", "org.apache.maven.artifact.defaultartifact.defaultartifact(string;string;string;string;string;string;artifacthandler)", "org.apache.maven.artifact.defaultartifact.getavailableversions()", "org.apache.maven.artifact.defaultartifact.getgroupid()", "org.apache.maven.artifact.defaultartifact.getartifacthandler()", "org.apache.maven.artifact.defaultartifact.isrelease()", "org.apache.maven.artifact.defaultartifact.gettype()", "org.apache.maven.artifact.defaultartifact.tostring()", "org.apache.maven.artifact.defaultartifact.getdependencytrail()", "org.apache.maven.artifact.defaultartifact.getartifactid()", "org.apache.maven.artifact.defaultartifact.setrelease(boolean)", "org.apache.maven.artifact.defaultartifact.setdownloadurl(string)", "org.apache.maven.artifact.defaultartifact.getbaseversioninternal()", "org.apache.maven.artifact.defaultartifact.isresolved()", "org.apache.maven.artifact.defaultartifact.getdependencyconflictid()", "org.apache.maven.artifact.defaultartifact.setbaseversion(string)", "org.apache.maven.artifact.defaultartifact.setresolved(boolean)", "org.apache.maven.artifact.defaultartifact.appendartifacttypeclassifierstring(stringbuilder)", "org.apache.maven.artifact.defaultartifact.getbaseversion()", "org.apache.maven.artifact.defaultartifact.selectversion(string)", "org.apache.maven.artifact.defaultartifact.setresolvedversion(string)", "org.apache.maven.artifact.defaultartifact.setdependencytrail(list)", "org.apache.maven.artifact.defaultartifact.selectversionfromnewrangeifavailable()", "org.apache.maven.artifact.defaultartifact.getfile()", "org.apache.maven.artifact.defaultartifact.isoptional()", "org.apache.maven.artifact.defaultartifact.setbaseversioninternal(string)", "org.apache.maven.artifact.defaultartifact.getclassifier()", "org.apache.maven.artifact.defaultartifact.hasclassifier()", "org.apache.maven.artifact.defaultartifact.getdownloadurl()", "org.apache.maven.artifact.defaultartifact.getid()", "org.apache.maven.artifact.defaultartifact.issnapshot()", "org.apache.maven.artifact.defaultartifact.setavailableversions(list)", "org.apache.maven.artifact.defaultartifact.setdependencyfilter(artifactfilter)"]}, "buildercommon": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.buildercommon.getkey(mavenproject)", "org.apache.maven.lifecycle.internal.buildercommon.attachtothread(mavenproject)", "org.apache.maven.lifecycle.internal.buildercommon.resolvebuildplan(mavensession;mavenproject;tasksegment;set)", "org.apache.maven.lifecycle.internal.buildercommon.buildercommon(lifecycledebuglogger;lifecycleexecutionplancalculator;lifecycledependencyresolver)"]}, "pluginparameterexpressionevaluator": {"distance": 0.9, "methods": ["org.apache.maven.plugin.pluginparameterexpressionevaluator.evaluate(string;class)", "org.apache.maven.plugin.pluginparameterexpressionevaluator.pluginparameterexpressionevaluator(mavensession;mojoexecution)", "org.apache.maven.plugin.pluginparameterexpressionevaluator.striptokens(string)", "org.apache.maven.plugin.pluginparameterexpressionevaluator.evaluate(string)"]}, "projectbuildingexception": {"distance": 1.0, "methods": ["org.apache.maven.project.projectbuildingexception.projectbuildingexception(string;string;file;throwable)", "org.apache.maven.project.projectbuildingexception.createmessage(string;string;file)"]}, "reactorbuildstatus": {"distance": 0.8333, "methods": ["org.apache.maven.lifecycle.internal.reactorbuildstatus.isblacklisted(mavenproject)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishaltedorblacklisted(mavenproject)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishalted()", "org.apache.maven.lifecycle.internal.reactorbuildstatus.reactorbuildstatus(projectdependencygraph)"]}, "defaultmodelvalidator": {"distance": 2.0, "methods": ["org.apache.maven.model.validation.defaultmodelvalidator.validateversion(string;modelproblemcollector;severity;string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatepluginversion(string;modelproblemcollector;string;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validatenotnull(string;modelproblemcollector;severity;object;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateresources(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawmodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidator.validateboolean(string;modelproblemcollector;severity;string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.equals(string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateenum(string;modelproblemcollector;severity;string;string;string[])", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnoexpression(string;modelproblemcollector;severity;string)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(int;int)", "org.apache.maven.model.validation.defaultmodelvalidator.addviolation(modelproblemcollector;severity;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string)", "org.apache.maven.model.validation.defaultmodelvalidator.defaultmodelvalidator()", "org.apache.maven.model.validation.defaultmodelvalidator.hasexpression(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepository(modelproblemcollector;repository;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawdependencies(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawplugins(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepositories(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(modelbuildingrequest;int)", "org.apache.maven.model.validation.defaultmodelvalidator.addviolation(modelproblemcollector;severity;string;string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependencies(modelproblemcollector;list;boolean;modelbuildingrequest)"]}, "metadata": {"distance": 0.9111, "methods": ["org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.defaultmetadataresolutionrequest(artifactresolutionrequest)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getresolutionrepositories()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getservers()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getrelocatedartifact()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getartifacts()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isresolvemanagedversions()", "org.apache.maven.artifact.repository.metadata.defaultrepositorymetadatamanager.defaultrepositorymetadatamanager()", "org.apache.maven.artifact.repository.metadata.io.defaultmetadatareader.defaultmetadatareader()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setremoterepositories(list)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getcache()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setservers(list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getremoterepositories()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;artifact;set;map;list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setartifact(artifact)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.gettransferlistener()", "org.apache.maven.artifact.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setmirrors(list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setresolvemanagedversions(boolean)", "org.apache.maven.artifact.metadata.resolutiongroup.resolutiongroup(artifact;artifact;set;map;list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getartifact()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getlocalrepository()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getmanagedversions()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getproxies()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isoffline()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isforceupdate()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getpomartifact()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getmirrors()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setproxies(list)"]}, "parent": {"distance": 0.9, "methods": ["org.apache.maven.model.parent.parent()", "org.apache.maven.model.parent.setversion(string)", "org.apache.maven.model.parent.clone()", "org.apache.maven.model.parent.getgroupid()", "org.apache.maven.model.parent.setartifactid(string)", "org.apache.maven.model.parent.getrelativepath()", "org.apache.maven.model.parent.setgroupid(string)", "org.apache.maven.model.parent.getartifactid()", "org.apache.maven.model.parent.getversion()", "org.apache.maven.model.parent.setrelativepath(string)"]}, "mavenproject": {"distance": 0.9929, "methods": ["org.apache.maven.project.mavenproject.eq(object;object)", "org.apache.maven.project.mavenproject.setartifactid(string)", "org.apache.maven.project.mavenproject.settestcompilesourceroots(list)", "org.apache.maven.project.mavenproject.getbuildextensions()", "org.apache.maven.project.mavenproject.setexecutionroot(boolean)", "org.apache.maven.project.mavenproject.setscriptsourceroots(list)", "org.apache.maven.project.mavenproject.addprojectreference(mavenproject)", "org.apache.maven.project.mavenproject.getmodelbuild()", "org.apache.maven.project.mavenproject.addlifecyclephase(string)", "org.apache.maven.project.mavenproject.equals(object)", "org.apache.maven.project.mavenproject.getreportartifacts()", "org.apache.maven.project.mavenproject.getpackaging()", "org.apache.maven.project.mavenproject.setartifacts(set)", "org.apache.maven.project.mavenproject.setclassrealm(classrealm)", "org.apache.maven.project.mavenproject.setpluginartifactrepositories(list)", "org.apache.maven.project.mavenproject.tostring()", "org.apache.maven.project.mavenproject.setsnapshotartifactrepository(artifactrepository)", "org.apache.maven.project.mavenproject.getexecutionproject()", "org.apache.maven.project.mavenproject.isexecutionroot()", "org.apache.maven.project.mavenproject.getgroupid()", "org.apache.maven.project.mavenproject.hascompletedphase(string)", "org.apache.maven.project.mavenproject.getmodules()", "org.apache.maven.project.mavenproject.setparentartifact(artifact)", "org.apache.maven.project.mavenproject.setextensionartifactfilter(artifactfilter)", "org.apache.maven.project.mavenproject.setoriginalmodel(model)", "org.apache.maven.project.mavenproject.setresolvedartifacts(set)", "org.apache.maven.project.mavenproject.getbuild()", "org.apache.maven.project.mavenproject.setinjectedprofileids(string;list)", "org.apache.maven.project.mavenproject.mavenproject(repositorysystem;projectbuilder;projectbuildingrequest)", "org.apache.maven.project.mavenproject.setattachedartifacts(list)", "org.apache.maven.project.mavenproject.getdependencyartifacts()", "org.apache.maven.project.mavenproject.addtestcompilesourceroot(string)", "org.apache.maven.project.mavenproject.getmodulepathadjustment(mavenproject)", "org.apache.maven.project.mavenproject.getattachedartifacts()", "org.apache.maven.project.mavenproject.getversion()", "org.apache.maven.project.mavenproject.getid()", "org.apache.maven.project.mavenproject.getremoteartifactrepositories()", "org.apache.maven.project.mavenproject.addscriptsourceroot(string)", "org.apache.maven.project.mavenproject.mavenproject()", "org.apache.maven.project.mavenproject.hashcode()", "org.apache.maven.project.mavenproject.getfile()", "org.apache.maven.project.mavenproject.getprojectreferenceid(string;string;string)", "org.apache.maven.project.mavenproject.addpath(list;string)", "org.apache.maven.project.mavenproject.getsnapshotartifactrepository()", "org.apache.maven.project.mavenproject.setartifact(artifact)", "org.apache.maven.project.mavenproject.getparent()", "org.apache.maven.project.mavenproject.getmanagedversionmap()", "org.apache.maven.project.mavenproject.setdependencyartifacts(set)", "org.apache.maven.project.mavenproject.getparentfile()", "org.apache.maven.project.mavenproject.setmanagedversionmap(map)", "org.apache.maven.project.mavenproject.getdistributionmanagementartifactrepository()", "org.apache.maven.project.mavenproject.setparentfile(file)", "org.apache.maven.project.mavenproject.setmodel(model)", "org.apache.maven.project.mavenproject.getbasedir()", "org.apache.maven.project.mavenproject.mavenproject(model)", "org.apache.maven.project.mavenproject.getartifactid()", "org.apache.maven.project.mavenproject.getbuildplugins()", "org.apache.maven.project.mavenproject.setactiveprofiles(list)", "org.apache.maven.project.mavenproject.getscriptsourceroots()", "org.apache.maven.project.mavenproject.setreportartifacts(set)", "org.apache.maven.project.mavenproject.getreportplugins()", "org.apache.maven.project.mavenproject.getclassrealm()", "org.apache.maven.project.mavenproject.getname()", "org.apache.maven.project.mavenproject.getdistributionmanagement()", "org.apache.maven.project.mavenproject.getpluginartifactrepositories()", "org.apache.maven.project.mavenproject.getextensionartifacts()", "org.apache.maven.project.mavenproject.getdependencies()", "org.apache.maven.project.mavenproject.getpluginmanagement()", "org.apache.maven.project.mavenproject.setfile(file)", "org.apache.maven.project.mavenproject.getproperties()", "org.apache.maven.project.mavenproject.getactiveprofiles()", "org.apache.maven.project.mavenproject.getmodelversion()", "org.apache.maven.project.mavenproject.deepcopy(mavenproject)", "org.apache.maven.project.mavenproject.setcompilesourceroots(list)", "org.apache.maven.project.mavenproject.gettestcompilesourceroots()", "org.apache.maven.project.mavenproject.getartifacts()", "org.apache.maven.project.mavenproject.getcompilesourceroots()", "org.apache.maven.project.mavenproject.getartifact()", "org.apache.maven.project.mavenproject.clone()", "org.apache.maven.project.mavenproject.getparentartifact()", "org.apache.maven.project.mavenproject.addcompilesourceroot(string)", "org.apache.maven.project.mavenproject.getoriginalmodel()", "org.apache.maven.project.mavenproject.getdependencymanagement()", "org.apache.maven.project.mavenproject.setremoteartifactrepositories(list)", "org.apache.maven.project.mavenproject.setparent(mavenproject)", "org.apache.maven.project.mavenproject.setextensionartifacts(set)", "org.apache.maven.project.mavenproject.getmodel()"]}, "defaultmodelbuildingrequest": {"distance": 0.963, "methods": ["org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelsource()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getbuildstarttime()", "org.apache.maven.model.building.defaultmodelbuildingrequest.isprocessplugins()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setvalidationlevel(int)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getprofiles()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setuserproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setbuildstarttime(date)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getinactiveprofileids()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getsystemproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setactiveprofileids(list)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setmodelbuildinglistener(modelbuildinglistener)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getpomfile()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setinactiveprofileids(list)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelresolver()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setmodelsource(modelsource)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelbuildinglistener()", "org.apache.maven.model.building.defaultmodelbuildingrequest.istwophasebuilding()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.model.building.defaultmodelbuildingrequest.defaultmodelbuildingrequest()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setpomfile(file)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getvalidationlevel()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setsystemproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getuserproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelcache()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setmodelresolver(modelresolver)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprofiles(list)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getactiveprofileids()"]}, "projectsorter": {"distance": 0.8333, "methods": ["org.apache.maven.project.projectsorter.isspecificversion(string)", "org.apache.maven.project.projectsorter.addedge(map;map;mavenproject;vertex;string;string;string;boolean;boolean)", "org.apache.maven.project.projectsorter.getid(mavenproject)", "org.apache.maven.project.projectsorter.getsortedprojects()", "org.apache.maven.project.projectsorter.projectsorter(list)", "org.apache.maven.project.projectsorter.addedge(vertex;vertex;mavenproject;map;boolean;boolean)"]}, "modelbase": {"distance": 0.9259, "methods": ["org.apache.maven.model.modelbase.addmodule(string)", "org.apache.maven.model.modelbase.setreporting(reporting)", "org.apache.maven.model.modelbase.setpluginrepositories(list)", "org.apache.maven.model.modelbase.adddependency(dependency)", "org.apache.maven.model.modelbase.getmodules()", "org.apache.maven.model.modelbase.modelbase()", "org.apache.maven.model.modelbase.getpluginrepositories()", "org.apache.maven.model.modelbase.getdistributionmanagement()", "org.apache.maven.model.modelbase.clone()", "org.apache.maven.model.modelbase.setproperties(properties)", "org.apache.maven.model.modelbase.setmodules(list)", "org.apache.maven.model.modelbase.addproperty(string;string)", "org.apache.maven.model.modelbase.addrepository(repository)", "org.apache.maven.model.modelbase.getreporting()", "org.apache.maven.model.modelbase.getproperties()", "org.apache.maven.model.modelbase.setrepositories(list)", "org.apache.maven.model.modelbase.getdependencies()", "org.apache.maven.model.modelbase.addpluginrepository(repository)", "org.apache.maven.model.modelbase.getdependencymanagement()", "org.apache.maven.model.modelbase.setdistributionmanagement(distributionmanagement)", "org.apache.maven.model.modelbase.setdependencymanagement(dependencymanagement)", "org.apache.maven.model.modelbase.setdependencies(list)", "org.apache.maven.model.modelbase.getrepositories()"]}, "defaultartifactresolver": {"distance": 1.0303, "methods": ["org.apache.maven.artifact.resolver.defaultartifactresolver.resolve(artifactresolutionrequest)", "org.apache.maven.artifact.resolver.defaultartifactresolver.resolve(artifact;repositoryrequest;transferlistener;boolean)", "org.apache.maven.artifact.resolver.defaultartifactresolver.defaultartifactresolver()", "org.apache.maven.artifact.resolver.defaultartifactresolver.ismutable(artifact)", "org.apache.maven.artifact.resolver.defaultartifactresolver.access$000(defaultartifactresolver;artifact;repositoryrequest;transferlistener;boolean)"]}, "defaultclassrealmmanager": {"distance": 1.1667, "methods": ["org.apache.maven.classrealm.defaultclassrealmmanager.defaultclassrealmmanager()", "org.apache.maven.classrealm.defaultclassrealmmanager.getcorerealm()"]}, "mailinglist": {"distance": 0.9167, "methods": ["org.apache.maven.model.mailinglist.getname()", "org.apache.maven.model.mailinglist.mailinglist()", "org.apache.maven.model.mailinglist.clone()", "org.apache.maven.model.mailinglist.setname(string)"]}, "extension": {"distance": 0.875, "methods": ["org.apache.maven.model.extension.getversion()", "org.apache.maven.model.extension.setartifactid(string)", "org.apache.maven.model.extension.setversion(string)", "org.apache.maven.model.extension.setgroupid(string)", "org.apache.maven.model.extension.clone()", "org.apache.maven.model.extension.getartifactid()", "org.apache.maven.model.extension.getgroupid()", "org.apache.maven.model.extension.extension()"]}, "trackablebase": {"distance": 1.125, "methods": ["org.apache.maven.settings.trackablebase.trackablebase()"]}, "defaultartifactfactory": {"distance": 1.0909, "methods": ["org.apache.maven.artifact.factory.defaultartifactfactory.createprojectartifact(string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.defaultartifactfactory()", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;versionrange;string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.createdependencyartifact(string;string;versionrange;string;string;string;boolean)", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;string;string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;versionrange;string;string;string;string;boolean)"]}, "defaultpathtranslator": {"distance": 1.3333, "methods": ["org.apache.maven.model.path.defaultpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.path.defaultpathtranslator.defaultpathtranslator()"]}, "dependency": {"distance": 0.9074, "methods": ["org.apache.maven.model.dependency.getclassifier()", "org.apache.maven.model.dependency.getscope()", "org.apache.maven.model.dependency.getgroupid()", "org.apache.maven.model.dependency.dependency()", "org.apache.maven.model.dependency.clone()", "org.apache.maven.model.dependency.getexclusions()", "org.apache.maven.model.dependency.settype(string)", "org.apache.maven.model.dependency.addexclusion(exclusion)", "org.apache.maven.model.dependency.isoptional()", "org.apache.maven.model.dependency.getmanagementkey()", "org.apache.maven.model.dependency.tostring()", "org.apache.maven.model.dependency.setartifactid(string)", "org.apache.maven.model.dependency.setscope(string)", "org.apache.maven.model.dependency.setexclusions(list)", "org.apache.maven.model.dependency.getoptional()", "org.apache.maven.model.dependency.getsystempath()", "org.apache.maven.model.dependency.getversion()", "org.apache.maven.model.dependency.getartifactid()", "org.apache.maven.model.dependency.setversion(string)", "org.apache.maven.model.dependency.setsystempath(string)", "org.apache.maven.model.dependency.setgroupid(string)", "org.apache.maven.model.dependency.gettype()"]}, "notifier": {"distance": 0.9238, "methods": ["org.apache.maven.model.notifier.getconfiguration()", "org.apache.maven.model.notifier.setsendonwarning(boolean)", "org.apache.maven.model.notifier.clone()", "org.apache.maven.model.notifier.settype(string)", "org.apache.maven.model.notifier.setsendonsuccess(boolean)", "org.apache.maven.model.notifier.notifier()", "org.apache.maven.model.notifier.setsendonerror(boolean)", "org.apache.maven.model.notifier.addconfiguration(string;string)", "org.apache.maven.model.notifier.setsendonfailure(boolean)"]}, "distributionmanagement": {"distance": 0.8611, "methods": ["org.apache.maven.model.distributionmanagement.getsite()", "org.apache.maven.model.distributionmanagement.getrepository()", "org.apache.maven.model.distributionmanagement.clone()", "org.apache.maven.model.distributionmanagement.getstatus()", "org.apache.maven.model.distributionmanagement.getrelocation()", "org.apache.maven.model.distributionmanagement.setsite(site)", "org.apache.maven.model.distributionmanagement.getdownloadurl()", "org.apache.maven.model.distributionmanagement.getsnapshotrepository()", "org.apache.maven.model.distributionmanagement.setrepository(deploymentrepository)", "org.apache.maven.model.distributionmanagement.distributionmanagement()", "org.apache.maven.model.distributionmanagement.setrelocation(relocation)", "org.apache.maven.model.distributionmanagement.setsnapshotrepository(deploymentrepository)", "org.apache.maven.model.distributionmanagement.setstatus(string)", "org.apache.maven.model.distributionmanagement.setdownloadurl(string)"]}, "resolutiongroup": {"distance": 1.0, "methods": ["org.apache.maven.repository.legacy.metadata.resolutiongroup.getresolutionrepositories()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getrelocatedartifact()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getartifacts()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;artifact;set;map;list)", "org.apache.maven.artifact.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.artifact.metadata.resolutiongroup.resolutiongroup(artifact;artifact;set;map;list)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getmanagedversions()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getpomartifact()"]}, "dependencycontext": {"distance": 0.8333, "methods": ["org.apache.maven.lifecycle.internal.dependencycontext.dependencycontext(collection;collection;boolean)", "org.apache.maven.lifecycle.internal.dependencycontext.dependencycontext(mavenexecutionplan;boolean)"]}, "repositorypolicy": {"distance": 0.8333, "methods": ["org.apache.maven.settings.repositorypolicy.setchecksumpolicy(string)", "org.apache.maven.settings.repositorypolicy.setenabled(boolean)", "org.apache.maven.settings.repositorypolicy.getchecksumpolicy()", "org.apache.maven.model.repositorypolicy.repositorypolicy()", "org.apache.maven.settings.repositorypolicy.repositorypolicy()", "org.apache.maven.settings.repositorypolicy.getupdatepolicy()", "org.apache.maven.model.repositorypolicy.setchecksumpolicy(string)", "org.apache.maven.model.repositorypolicy.setenabled(string)", "org.apache.maven.model.repositorypolicy.getupdatepolicy()", "org.apache.maven.model.repositorypolicy.setupdatepolicy(string)", "org.apache.maven.model.repositorypolicy.clone()", "org.apache.maven.settings.repositorypolicy.isenabled()", "org.apache.maven.model.repositorypolicy.setenabled(boolean)", "org.apache.maven.model.repositorypolicy.getchecksumpolicy()", "org.apache.maven.model.repositorypolicy.isenabled()"]}, "defaultmodelbuildingresult": {"distance": 0.8889, "methods": ["org.apache.maven.model.building.defaultmodelbuildingresult.setactiveexternalprofiles(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.getactivepomprofiles(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.setproblems(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.addmodelid(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.getproblems()", "org.apache.maven.model.building.defaultmodelbuildingresult.setrawmodel(string;model)", "org.apache.maven.model.building.defaultmodelbuildingresult.getmodelids()", "org.apache.maven.model.building.defaultmodelbuildingresult.getactiveexternalprofiles()", "org.apache.maven.model.building.defaultmodelbuildingresult.getrawmodel(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.geteffectivemodel()", "org.apache.maven.model.building.defaultmodelbuildingresult.defaultmodelbuildingresult()", "org.apache.maven.model.building.defaultmodelbuildingresult.setactivepomprofiles(string;list)", "org.apache.maven.model.building.defaultmodelbuildingresult.getrawmodel()", "org.apache.maven.model.building.defaultmodelbuildingresult.seteffectivemodel(model)"]}, "defaultprofilemanager": {"distance": 0.881, "methods": ["org.apache.maven.profiles.defaultprofilemanager.explicitlyactivate(string)", "org.apache.maven.profiles.defaultprofilemanager.defaultprofilemanager(plexuscontainer;properties)", "org.apache.maven.profiles.defaultprofilemanager.getactiveprofiles()", "org.apache.maven.profiles.defaultprofilemanager.activateasdefault(string)", "org.apache.maven.profiles.defaultprofilemanager.addprofile(profile)", "org.apache.maven.profiles.defaultprofilemanager.explicitlydeactivate(string)"]}, "mojodescriptorcreator": {"distance": 1.3333, "methods": ["org.apache.maven.lifecycle.internal.mojodescriptorcreator.mojodescriptorcreator(pluginversionresolver;buildpluginmanager;pluginprefixresolver)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(plugin;collection)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findpluginforprefix(string;mavensession)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.resolvepluginversion(plugin;repositoryrequest)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.convert(mojodescriptor)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.getmojodescriptor(string;mavensession;mavenproject)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.injectplugindeclarationfromproject(plugin;mavenproject)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(string;string;collection)"]}, "contributor": {"distance": 0.9342, "methods": ["org.apache.maven.model.contributor.setorganizationurl(string)", "org.apache.maven.model.contributor.contributor()", "org.apache.maven.model.contributor.getname()", "org.apache.maven.model.contributor.setorganization(string)", "org.apache.maven.model.contributor.setname(string)", "org.apache.maven.model.contributor.clone()"]}, "reportset": {"distance": 0.8923, "methods": ["org.apache.maven.model.reportset.setconfiguration(object)", "org.apache.maven.model.reportset.getconfiguration()", "org.apache.maven.model.reportset.setid(string)", "org.apache.maven.model.reportset.clone()", "org.apache.maven.model.reportset.setreports(list)", "org.apache.maven.model.reportset.getreports()", "org.apache.maven.model.reportset.reportset()", "org.apache.maven.model.reportset.getid()"]}, "defaultartifacthandler": {"distance": 0.9643, "methods": ["org.apache.maven.artifact.handler.defaultartifacthandler.getclassifier()", "org.apache.maven.artifact.handler.defaultartifacthandler.isincludesdependencies()", "org.apache.maven.artifact.handler.defaultartifacthandler.defaultartifacthandler()", "org.apache.maven.artifact.handler.defaultartifacthandler.getextension()"]}, "relocation": {"distance": 0.875, "methods": ["org.apache.maven.model.relocation.relocation()", "org.apache.maven.model.relocation.setmessage(string)", "org.apache.maven.model.relocation.clone()"]}, "lifecycle": {"distance": 0.8889, "methods": ["org.apache.maven.lifecycle.mavenexecutionplan.getmojoexecutions()", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.concurrentbuildlogger()", "org.apache.maven.lifecycle.internal.stub.completionservicestub.submit(callable)", "org.apache.maven.lifecycle.scheduling.getschedule(string)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getexecutionplanitem()", "org.apache.maven.lifecycle.internal.executionplanitem.getmojoexecution()", "org.apache.maven.lifecycle.internal.projectsegment.gettransitiveupstreamprojects()", "org.apache.maven.lifecycle.internal.lifecyclepluginresolver.lifecyclepluginresolver(pluginversionresolver)", "org.apache.maven.lifecycle.internal.defaultexecutioneventcatapult.defaultexecutioneventcatapult()", "org.apache.maven.lifecycle.defaultlifecycles.get(string)", "org.apache.maven.lifecycle.internal.tasksegment.gettasks()", "org.apache.maven.lifecycle.internal.lifecyclepluginresolver.resolvemissingpluginversions(mavenproject;mavensession)", "org.apache.maven.lifecycle.internal.lifecycletasksegmentcalculatorimpl.calculatetasksegments(mavensession)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getmavensession(mavenproject)", "org.apache.maven.lifecycle.internal.executionplanitem.executionplanitem(mojoexecution;schedule)", "org.apache.maven.lifecycle.internal.buildlogitem.tostring(long)", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub$1.getartifactid()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getmessage()", "org.apache.maven.lifecycle.internal.reactorbuildstatus.isblacklisted(mavenproject)", "org.apache.maven.lifecycle.defaultschedules.createexecutionplanitem(mavenproject;list)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.getupstreamreactordependencies(projectsegment)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.mojodescriptorcreator(pluginversionresolver;buildpluginmanager;pluginprefixresolver)", "org.apache.maven.lifecycle.defaultschedules.defaultschedules(list)", "org.apache.maven.lifecycle.mavenexecutionplan.forceallcomplete()", "org.apache.maven.lifecycle.scheduling.getschedule(plugin)", "org.apache.maven.lifecycle.internal.concurrentbuildloggertest.concurrentbuildloggertest()", "org.apache.maven.lifecycle.mavenexecutionplan.waituntilalldone()", "org.apache.maven.lifecycle.internal.buildlogitem.getmojoexecutiondescription(executionplanitem)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.getdependencyartifacts(mavenproject;set)", "org.apache.maven.lifecycle.internal.stub.loggerstub.loggerstub()", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.createmojodescriptorcreator()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.runwithcompletionservice(completionservice)", "org.apache.maven.lifecycle.internal.dependencycontext.dependencycontext(collection;collection;boolean)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getsortedprojects()", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub$1.pluginprefixresolverstub$1(pluginprefixresolverstub)", "org.apache.maven.lifecycle.internal.buildlogitem.access$100(executionplanitem)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$200(lifecycleweavebuilder;executionplanitem;phaserecorder;schedule;reactorcontext;projectsegment;dependencycontext)", "org.apache.maven.lifecycle.mavenexecutionplan.mavenexecutionplan(set;set;list;defaultlifecycles)", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub$1.getgroupid()", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.getelapsed()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$000(lifecycleweavebuilder)", "org.apache.maven.lifecycle.internal.executionplanitem.setcomplete()", "org.apache.maven.lifecycle.internal.executionplanitem.ensurecomplete()", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub$1.pluginversionresolverstub$1(pluginversionresolverstub)", "org.apache.maven.lifecycle.internal.stub.defaultschedulesstub.getschedulinglist()", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.getprojects(mavenproject;mavensession;boolean)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.calculatemojoexecutions(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.lifecycle.tostring()", "org.apache.maven.lifecycle.mavenexecutionplan.getdistinctphasesinorderofexecutionplanappearance(list)", "org.apache.maven.lifecycle.defaultlifecycles.defaultlifecycles(map;logger)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder$1.call()", "org.apache.maven.lifecycle.internal.projectbuildlist.getbytasksegment(tasksegment)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createexecutionplan(mavenproject;list)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;string)", "org.apache.maven.lifecycle.internal.phaserecorder.observeexecution(mojoexecution)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.findtestscopedartifact(mavenproject)", "org.apache.maven.lifecycle.internal.buildlogitem.tograph(long)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishaltedorblacklisted(mavenproject)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.<clinit>()", "org.apache.maven.lifecycle.internal.buildlistcalculator.calculateprojectbuilds(mavensession;list)", "org.apache.maven.lifecycle.internal.buildercommon.getkey(mavenproject)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.createtasksegment()", "org.apache.maven.lifecycle.internal.buildercommon.attachtothread(mavenproject)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub$dependency.addifupstreamof(mavenproject;list)", "org.apache.maven.lifecycle.defaultlifecycles.getphasetolifecyclemap()", "org.apache.maven.lifecycle.schedule.getphase()", "org.apache.maven.lifecycle.mavenexecutionplan.getexecutionplanitems()", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.getprojectdependencies(mavenproject;collection;collection;mavensession;boolean;set)", "org.apache.maven.lifecycle.internal.buildlogitem.access$000(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.lifecycledependencyresolver(projectdependenciesresolver;logger)", "org.apache.maven.lifecycle.internal.stub.lifecycletasksegmentcalculatorstub.calculatetasksegments(mavensession;list)", "org.apache.maven.lifecycle.mavenexecutionplan.getrequiredresolutionscopes()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.gettasksegmentcalculator()", "org.apache.maven.lifecycle.internal.buildlogitem.addwait(mavenproject;executionplanitem;long)", "org.apache.maven.lifecycle.internal.stub.loggerstub.debug(string)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.resolveprojectdependencies(mavenproject;collection;collection;mavensession;boolean;set)", "org.apache.maven.lifecycle.internal.goaltask.goaltask(string)", "org.apache.maven.lifecycle.internal.buildercommon.resolvebuildplan(mavensession;mavenproject;tasksegment;set)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$100(lifecycleweavebuilder;projectsegment)", "org.apache.maven.lifecycle.internal.projectbuildlist.closeall()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder$1.lifecycleweavebuilder$1(lifecycleweavebuilder;mavenexecutionplan;reactorbuildstatus;projectsegment;concurrentbuildlogger;reactorcontext;dependencycontext;mavensession)", "org.apache.maven.lifecycle.internal.projectbuildlist.projectbuildlist(list)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.build(projectbuildlist;reactorcontext;list;mavensession;completionservice;reactorbuildstatus)", "org.apache.maven.lifecycle.internal.phaserecordertest.phaserecordertest()", "org.apache.maven.lifecycle.internal.reactorcontext.getoriginalcontextclassloader()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.getweavebuilder(mojoexecutor)", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub.resolve(pluginprefixrequest)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createmojoexecution(plugin;string;string;mojodescriptor)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getprojectbuildlist(mavensession)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.collectdependencyrequirements(collection;collection;mojoexecution)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.projectdependencygraphstub()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getdownstreamprojects(mavenproject;boolean)", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.tostring()", "org.apache.maven.lifecycle.mavenexecutionplan.getrequiredcollectionscopes()", "org.apache.maven.lifecycle.internal.reactorcontext.reactorcontext(mavenexecutionresult;projectindex;classloader;reactorbuildstatus)", "org.apache.maven.lifecycle.internal.projectsegment.gettasksegment()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.<clinit>()", "org.apache.maven.lifecycle.mavenexecutionplan.containsphase(string)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.lifecycleexecutionplancalculatortest()", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.calculateforkedexecutions(mojoexecution;mavensession;mavenproject;collection)", "org.apache.maven.lifecycle.internal.buildlogitem.getlifecyclephase(executionplanitem)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getscopes()", "org.apache.maven.lifecycle.internal.phaserecorder.phaserecorder(mavenproject)", "org.apache.maven.lifecycle.internal.stub.projectdependenciesresolverstub.projectdependenciesresolverstub()", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub.pluginversionresolverstub()", "org.apache.maven.lifecycle.internal.projectsegment.projectsegment(mavenproject;tasksegment;mavensession)", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean;object[])", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(plugin;collection)", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.createbuildlogitem(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.buildlogitem.getproject()", "org.apache.maven.lifecycle.internal.buildlogitem.buildlogitem(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.stub.buildpluginmanagerstub.getmojodescriptor(plugin;string;repositoryrequest)", "org.apache.maven.lifecycle.internal.buildercommontest.getbuildercommon()", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findpluginforprefix(string;mavensession)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.buildexecutionplanitem(executionplanitem;phaserecorder;schedule;reactorcontext;projectsegment;dependencycontext)", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.getrootschedulablebuilds()", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.markasfinished(mavenproject)", "org.apache.maven.lifecycle.internal.stub.mojoexecutorstub.mojoexecutorstub()", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.debugprojectplan(mavenproject;mavenexecutionplan)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.ishalted()", "org.apache.maven.lifecycle.scheduling.getlifecycle()", "org.apache.maven.lifecycle.lifecycle.lifecycle(string;list;map)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getprojectbexecutionplan()", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub.resolve(pluginversionrequest)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.updateprojectartifacts(mavenproject;set)", "org.apache.maven.lifecycle.internal.reactorcontext.getprojectindex()", "org.apache.maven.lifecycle.internal.reactorcontext.getreactorbuildstatus()", "org.apache.maven.lifecycle.schedule.ismojosynchronized()", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.concurrencydependencygraph(projectbuildlist;projectdependencygraph)", "org.apache.maven.lifecycle.internal.tasksegment.isaggregating()", "org.apache.maven.lifecycle.internal.executionplanitem.forcecomplete()", "org.apache.maven.lifecycle.internal.stub.defaultschedulesstub.createdefaultschedules()", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.setupmojoexections(mavensession;mavenproject;set;set;list)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.findplugin(string;string;collection)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.resolvepluginversion(plugin;repositoryrequest)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getmavensession()", "org.apache.maven.lifecycle.internal.buildlogitem.nodekey(mavenproject;executionplanitem)", "org.apache.maven.lifecycle.internal.stub.loggerstub.info(string)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.buildexecutionplanitem(reactorcontext;executionplanitem;projectsegment;dependencycontext;phaserecorder)", "org.apache.maven.lifecycle.internal.stub.executioneventcatapultstub.executioneventcatapultstub()", "org.apache.maven.lifecycle.internal.projectsegment.getimmediateupstreamprojects()", "org.apache.maven.lifecycle.internal.projectsegment.getproject()", "org.apache.maven.lifecycle.internal.stub.projectdependenciesresolverstub.resolve(mavenproject;collection;collection;mavensession;set)", "org.apache.maven.lifecycle.internal.executionplanitem.notifylisteners()", "org.apache.maven.lifecycle.internal.reactorcontext.getresult()", "org.apache.maven.lifecycle.internal.executionplanitem.getschedule()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.createcallableforbuildingonefullmodule(reactorcontext;mavensession;reactorbuildstatus;mavenexecutionplan;projectsegment;dependencycontext;concurrentbuildlogger)", "org.apache.maven.lifecycle.internal.mojoexecutor.mojoexecutor()", "org.apache.maven.lifecycle.defaultlifecycles.getlifecycles()", "org.apache.maven.lifecycle.lifecycle.getphases()", "org.apache.maven.lifecycle.internal.phaserecorder.isdifferentphase(mojoexecution)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.access$300(lifecycleweavebuilder;buildlogitem;executionplanitem;projectsegment)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.finalizemojoconfiguration(mojoexecution)", "org.apache.maven.lifecycle.internal.dependencycontext.dependencycontext(mavenexecutionplan;boolean)", "org.apache.maven.lifecycle.internal.concurrentbuildlogger.tograph()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.lifecycleweavebuildertest()", "org.apache.maven.lifecycle.internal.projectsegment.getsession()", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.convert(mojodescriptor)", "org.apache.maven.lifecycle.mavenexecutionplan.findlastinphase(string)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getnumberofexceutions(projectbuildlist)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tostring()", "org.apache.maven.lifecycle.internal.concurrencydependencygraph.getschedulablenewprocesses(mavenproject)", "org.apache.maven.lifecycle.defaultlifecycleexecutor.defaultlifecycleexecutor()", "org.apache.maven.lifecycle.internal.stub.buildpluginmanagerstub.buildpluginmanagerstub()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub$dependency.addifdownstream(mavenproject;list)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.getmojodescriptor(string;mavensession;mavenproject)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.resolvedependencies(boolean;mavenproject;mavensession;mavenexecutionplan;set)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.getmojoconfiguration(mojodescriptor)", "org.apache.maven.lifecycle.schedule.schedule(string;boolean;boolean)", "org.apache.maven.lifecycle.internal.concurrencydependencygraphtest.concurrencydependencygraphtest()", "org.apache.maven.lifecycle.internal.stub.mojoexecutorstub.execute(mavensession;mojoexecution;projectindex;dependencycontext;phaserecorder)", "org.apache.maven.lifecycle.internal.projectbuildlist.iterator()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.createbuildcontext(mavensession)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getupstreamprojects(mavenproject;boolean)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.lifecycleexecutionplancalculatorimpl(buildpluginmanager;defaultlifecycles;mojodescriptorcreator;lifecyclepluginresolver;defaultschedules)", "org.apache.maven.lifecycle.internal.lifecycletask.lifecycletask(string)", "org.apache.maven.lifecycle.internal.stub.executioneventcatapultstub.fire(type;mavensession;mojoexecution)", "org.apache.maven.lifecycle.internal.projectbuildlist.size()", "org.apache.maven.lifecycle.internal.lifecycletasksegmentcalculatorimpl.lifecycletasksegmentcalculatorimpl()", "org.apache.maven.lifecycle.mavenexecutionplan.size()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getprojectbuilds(mavensession)", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.lifecycledebuglogger(logger)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.calculateexecutionplan(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.schedule.isparallel()", "org.apache.maven.lifecycle.internal.executionplanitem.getlifecyclephase()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.createprojectbuild(mavenproject;mavensession;tasksegment)", "org.apache.maven.lifecycle.internal.stub.lifecycletasksegmentcalculatorstub.lifecycletasksegmentcalculatorstub()", "org.apache.maven.lifecycle.internal.lifecycleweavebuildertest.getbuildercommon()", "org.apache.maven.lifecycle.internal.stub.loggerstub.isdebugenabled()", "org.apache.maven.lifecycle.internal.lifecycledebuglogger.debugmojoexecution(mojoexecution)", "org.apache.maven.lifecycle.internal.stub.defaultlifecyclesstub.createdefaultlifecycles()", "org.apache.maven.lifecycle.mavenexecutionplan.iterator()", "org.apache.maven.lifecycle.scheduling.scheduling(string;list)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.lifecycleexecutionplancalculatorstub()", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.lifecycleweavebuilder(mojoexecutor;buildercommon;logger;executioneventcatapult)", "org.apache.maven.lifecycle.internal.buildercommon.buildercommon(lifecycledebuglogger;lifecycleexecutionplancalculator;lifecycledependencyresolver)", "org.apache.maven.lifecycle.internal.lifecycledependencyresolver.resolvedependencies(boolean;mavensession;mavenexecutionplan;list;set)", "org.apache.maven.lifecycle.defaultschedules.getscheduling(string)", "org.apache.maven.lifecycle.internal.stub.pluginprefixresolverstub.pluginprefixresolverstub()", "org.apache.maven.lifecycle.internal.buildlistcalculator.buildlistcalculator()", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.injectplugindeclarationfromproject(plugin;mavenproject)", "org.apache.maven.lifecycle.internal.lifecycleweavebuilder.waitforappropriateupstreamexecutionstofinish(buildlogitem;executionplanitem;projectsegment)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub.getdependencies()", "org.apache.maven.lifecycle.internal.stub.mojoexecutorstub.createmojodescriptor(string)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodedescription(long)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.tonodekey()", "org.apache.maven.lifecycle.internal.stub.completionservicestub.completionservicestub(boolean)", "org.apache.maven.lifecycle.internal.buildlogitem$dependencylogentry.buildlogitem$dependencylogentry(buildlogitem;mavenproject;executionplanitem;long;long;string)", "org.apache.maven.lifecycle.internal.stub.pluginversionresolverstub$1.getversion()", "org.apache.maven.lifecycle.internal.executionplanitem.waituntildone()", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.getprojectaexceutionplan()", "org.apache.maven.lifecycle.internal.tasksegment.tasksegment(boolean)", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.createexecutionplacecalculator(mojodescriptorcreator)", "org.apache.maven.lifecycle.internal.mojodescriptorcreator.findplugin(string;string;collection)", "org.apache.maven.lifecycle.internal.stub.lifecycleexecutionplancalculatorstub.createmojodescriptor(string)", "org.apache.maven.lifecycle.internal.buildlogitem.setcomplete()", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.calculateexecutionplan(mavensession;mavenproject;list)", "org.apache.maven.lifecycle.internal.stub.completionservicestub.size()", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatorimpl.populatemojoexecutionconfiguration(mavenproject;mojoexecution;boolean)", "org.apache.maven.lifecycle.internal.buildlogitem.adddependency(mavenproject;string)", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstub$dependency.projectdependencygraphstub$dependency(projectdependencygraphstub;mavenproject;mavenproject)", "org.apache.maven.lifecycle.internal.reactorbuildstatus.reactorbuildstatus(projectdependencygraph)"]}, "mojodescriptor": {"distance": 0.9864, "methods": ["org.apache.maven.plugin.descriptor.mojodescriptor.setonlinerequired(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.setlanguage(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.setinheritedbydefault(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.getmojoconfiguration()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencyresolutionrequired()", "org.apache.maven.plugin.descriptor.mojodescriptor.isaggregator()", "org.apache.maven.plugin.descriptor.mojodescriptor.setprojectrequired(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.setgoal(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.getrole()", "org.apache.maven.plugin.descriptor.mojodescriptor.setphase(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.addparameter(parameter)", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutephase()", "org.apache.maven.plugin.descriptor.mojodescriptor.setdependencyresolutionrequired(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.getplugindescriptor()", "org.apache.maven.plugin.descriptor.mojodescriptor.setdirectinvocationonly(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.isforking()", "org.apache.maven.plugin.descriptor.mojodescriptor.getparameters()", "org.apache.maven.plugin.descriptor.mojodescriptor.setaggregator(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencycollectionrequired()", "org.apache.maven.plugin.descriptor.mojodescriptor.compareobjects(object;object)", "org.apache.maven.plugin.descriptor.mojodescriptor.setparameters(list)", "org.apache.maven.plugin.descriptor.mojodescriptor.getid()", "org.apache.maven.plugin.descriptor.mojodescriptor.setrequiresreports(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.equals(object)", "org.apache.maven.plugin.descriptor.mojodescriptor.getrolehint()", "org.apache.maven.plugin.descriptor.mojodescriptor.clone()", "org.apache.maven.plugin.descriptor.mojodescriptor.setplugindescriptor(plugindescriptor)", "org.apache.maven.plugin.descriptor.mojodescriptor.getphase()", "org.apache.maven.plugin.descriptor.mojodescriptor.mojodescriptor()", "org.apache.maven.plugin.descriptor.mojodescriptor.getgoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutegoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.setmojoconfiguration(plexusconfiguration)"]}, "plugindescriptor": {"distance": 0.9679, "methods": ["org.apache.maven.plugin.descriptor.plugindescriptor.getgoalprefix()", "org.apache.maven.plugin.descriptor.plugindescriptor.getplugin()", "org.apache.maven.plugin.descriptor.plugindescriptor.setinheritedbydefault(boolean)", "org.apache.maven.plugin.descriptor.plugindescriptor.setgoalprefix(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setplugin(plugin)", "org.apache.maven.plugin.descriptor.plugindescriptor.addmojo(mojodescriptor)", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifacts()", "org.apache.maven.plugin.descriptor.plugindescriptor.getgroupid()", "org.apache.maven.plugin.descriptor.plugindescriptor.getmojo(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setsource(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.getmojos()", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifactid()", "org.apache.maven.plugin.descriptor.plugindescriptor.setdescription(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.plugindescriptor()", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifactmap()", "org.apache.maven.plugin.descriptor.plugindescriptor.getpluginartifact()", "org.apache.maven.plugin.descriptor.plugindescriptor.getid()", "org.apache.maven.plugin.descriptor.plugindescriptor.equals(object)", "org.apache.maven.plugin.descriptor.plugindescriptor.getversion()", "org.apache.maven.plugin.descriptor.plugindescriptor.setgroupid(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setversion(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.isinheritedbydefault()", "org.apache.maven.plugin.descriptor.plugindescriptor.getname()", "org.apache.maven.plugin.descriptor.plugindescriptor.getsource()", "org.apache.maven.plugin.descriptor.plugindescriptor.setname(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.getdescription()", "org.apache.maven.plugin.descriptor.plugindescriptor.setartifactid(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.constructpluginkey(string;string;string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setpluginartifact(artifact)", "org.apache.maven.plugin.descriptor.plugindescriptor.setartifacts(list)"]}, "defaultrepositoryrequest": {"distance": 0.9091, "methods": ["org.apache.maven.artifact.repository.defaultrepositoryrequest.getcache()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setoffline(boolean)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.getremoterepositories()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.defaultrepositoryrequest(repositoryrequest)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setforceupdate(boolean)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.getlocalrepository()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.gettransferlistener()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setremoterepositories(list)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.getrepositoryrequest(mavensession;mavenproject)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setcache(repositorycache)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.defaultrepositoryrequest()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.settransferlistener(artifacttransferlistener)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setlocalrepository(artifactrepository)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.isoffline()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.isforceupdate()"]}, "multipleartifactsnotfoundexception": {"distance": 1.0, "methods": ["org.apache.maven.artifact.resolver.multipleartifactsnotfoundexception.constructmessage(list)", "org.apache.maven.artifact.resolver.multipleartifactsnotfoundexception.multipleartifactsnotfoundexception(artifact;list;list;list)"]}, "site": {"distance": 0.8333, "methods": ["org.apache.maven.model.site.seturl(string)", "org.apache.maven.model.site.getname()", "org.apache.maven.model.site.setid(string)", "org.apache.maven.model.site.getid()", "org.apache.maven.model.site.setname(string)", "org.apache.maven.model.site.site()", "org.apache.maven.model.site.geturl()", "org.apache.maven.model.site.clone()"]}, "reactorcontext": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.reactorcontext.getoriginalcontextclassloader()", "org.apache.maven.lifecycle.internal.reactorcontext.reactorcontext(mavenexecutionresult;projectindex;classloader;reactorbuildstatus)", "org.apache.maven.lifecycle.internal.reactorcontext.getprojectindex()", "org.apache.maven.lifecycle.internal.reactorcontext.getreactorbuildstatus()", "org.apache.maven.lifecycle.internal.reactorcontext.getresult()"]}, "defaultmodelproblem": {"distance": 0.9796, "methods": ["org.apache.maven.model.building.defaultmodelproblem.getsource()", "org.apache.maven.model.building.defaultmodelproblem.getmessage()", "org.apache.maven.model.building.defaultmodelproblem.getcolumnnumber()", "org.apache.maven.model.building.defaultmodelproblem.defaultmodelproblem(string;severity;string;int;int;string;exception)", "org.apache.maven.model.building.defaultmodelproblem.getlinenumber()", "org.apache.maven.model.building.defaultmodelproblem.getseverity()", "org.apache.maven.model.building.defaultmodelproblem.getmodelid()"]}, "resolutionnode": {"distance": 0.9018, "methods": ["org.apache.maven.artifact.resolver.resolutionnode.isresolved()", "org.apache.maven.artifact.resolver.resolutionnode.getchildreniterator()", "org.apache.maven.artifact.resolver.resolutionnode.getkey()", "org.apache.maven.artifact.resolver.resolutionnode.resolutionnode(artifact;list;resolutionnode)", "org.apache.maven.artifact.resolver.resolutionnode.resolutionnode(artifact;list)", "org.apache.maven.artifact.resolver.resolutionnode.getartifact()", "org.apache.maven.artifact.resolver.resolutionnode.filtertrail(artifactfilter)", "org.apache.maven.artifact.resolver.resolutionnode.isactive()", "org.apache.maven.artifact.resolver.resolutionnode.ischildofrootnode()", "org.apache.maven.artifact.resolver.resolutionnode.getremoterepositories()", "org.apache.maven.artifact.resolver.resolutionnode.gettrail()", "org.apache.maven.artifact.resolver.resolutionnode.adddependencies(set;list;artifactfilter)", "org.apache.maven.artifact.resolver.resolutionnode.getdependencytrail()"]}, "modelbuildingexception": {"distance": 1.0, "methods": ["org.apache.maven.model.building.modelbuildingexception.getmodelid()", "org.apache.maven.model.building.modelbuildingexception.tomessage(string;list)", "org.apache.maven.model.building.modelbuildingexception.modelbuildingexception(model;string;list)"]}, "license": {"distance": 0.875, "methods": ["org.apache.maven.model.license.geturl()", "org.apache.maven.model.license.setname(string)", "org.apache.maven.model.license.setdistribution(string)", "org.apache.maven.model.license.getname()", "org.apache.maven.model.license.license()", "org.apache.maven.model.license.seturl(string)", "org.apache.maven.model.license.clone()"]}, "abstractstringbasedmodelinterpolator": {"distance": 0.8545, "methods": ["org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createvaluesources(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.getinterpolator()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.<clinit>()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.abstractstringbasedmodelinterpolator()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createpostprocessors(model;file;modelbuildingrequest)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.interpolateinternal(string;list;list;modelproblemcollector)"]}, "plugin": {"distance": 0.8333, "methods": ["org.apache.maven.plugin.version.defaultpluginversionrequest.defaultpluginversionrequest(plugin;repositoryrequest)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.plugin.descriptor.mojodescriptor.setonlinerequired(boolean)", "org.apache.maven.plugin.descriptor.plugindescriptor.getgoalprefix()", "org.apache.maven.plugin.mojoexecution.getartifactid()", "org.apache.maven.plugin.defaultbuildpluginmanager.getmojodescriptor(plugin;string;repositoryrequest)", "org.apache.maven.plugin.descriptor.mojodescriptor.setlanguage(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.setinheritedbydefault(boolean)", "org.apache.maven.plugin.descriptor.parameter.parameter()", "org.apache.maven.plugin.descriptor.plugindescriptor.getplugin()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.plugin.equals(object)", "org.apache.maven.plugin.mojoexecution$source.mojoexecution$source(string;int)", "org.apache.maven.model.plugin.getdependencies()", "org.apache.maven.plugin.descriptor.plugindescriptor.setinheritedbydefault(boolean)", "org.apache.maven.plugin.pluginmanagertest.teardown()", "org.apache.maven.plugin.defaultplugindescriptorcache$cachekey.repositoryhashcode(artifactrepository)", "org.apache.maven.plugin.descriptor.plugindescriptor.setgoalprefix(string)", "org.apache.maven.plugin.mojoexecution.getplugin()", "org.apache.maven.plugin.descriptor.mojodescriptor.getmojoconfiguration()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencyresolutionrequired()", "org.apache.maven.plugin.descriptor.mojodescriptor.isaggregator()", "org.apache.maven.model.plugin.getgroupid()", "org.apache.maven.plugin.descriptor.mojodescriptor.setprojectrequired(boolean)", "org.apache.maven.plugin.descriptor.plugindescriptor.setplugin(plugin)", "org.apache.maven.plugin.descriptor.mojodescriptor.setgoal(string)", "org.apache.maven.plugin.descriptor.plugindescriptor.addmojo(mojodescriptor)", "org.apache.maven.model.plugin.getartifactid()", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifacts()", "org.apache.maven.model.plugin.defaultreportingconverter.adddom(xpp3dom;string;string)", "org.apache.maven.plugin.defaultplugindescriptorcache.clone(list;plugindescriptor)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setlocalrepository(artifactrepository)", "org.apache.maven.plugin.descriptor.plugindescriptor.getgroupid()", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.plugin.descriptor.plugindescriptor.getmojo(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.getrole()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.defaultpluginconfigurationexpander()", "org.apache.maven.model.plugin.setartifactid(string)", "org.apache.maven.plugin.defaultplugindescriptorcache$cachekey.hashcode()", "org.apache.maven.plugin.internal.defaultplugindependenciesresolver.resolve(plugin;artifactresolutionrequest)", "org.apache.maven.plugin.descriptor.parameter.setdeprecated(string)", "org.apache.maven.plugin.pluginmanagertest.setup()", "org.apache.maven.plugin.descriptor.parameter.setname(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.setphase(string)", "org.apache.maven.model.plugin.hashcode()", "org.apache.maven.plugin.descriptor.mojodescriptor.addparameter(parameter)", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutephase()", "org.apache.maven.plugin.descriptor.mojodescriptor.setdependencyresolutionrequired(string)", "org.apache.maven.plugin.mavenpluginvalidator.mavenpluginvalidator(artifact)", "org.apache.maven.model.plugin.getexecutions()", "org.apache.maven.model.plugin.defaultreportingconverter.issiteplugin(plugin)", "org.apache.maven.plugin.mavenpluginvalidator.haserrors()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.defaultpluginprefixrequest(string;mavensession)", "org.apache.maven.plugin.descriptor.mojodescriptor.getplugindescriptor()", "org.apache.maven.model.plugin.plugin()", "org.apache.maven.plugin.mojoexecution.getexecutionid()", "org.apache.maven.plugin.defaultbuildpluginmanager.loadplugin(plugin;repositoryrequest)", "org.apache.maven.model.plugin.defaultreportingconverter.newdom(string;string)", "org.apache.maven.plugin.descriptor.mojodescriptor.setdirectinvocationonly(boolean)", "org.apache.maven.plugin.pluginparameterexpressionevaluator.evaluate(string;class)", "org.apache.maven.plugin.descriptor.mojodescriptor.isforking()", "org.apache.maven.model.plugin.defaultreportingconverter.convert(reportplugin)", "org.apache.maven.plugin.descriptor.plugindescriptorbuilder.build(reader;string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setsource(string)", "org.apache.maven.model.plugin.setgroupid(string)", "org.apache.maven.plugin.mavenpluginvalidator.validate(plugindescriptor)", "org.apache.maven.plugin.descriptor.mojodescriptor.getparameters()", "org.apache.maven.plugin.descriptor.mojodescriptor.setaggregator(boolean)", "org.apache.maven.plugin.mojoexecution.getgoal()", "org.apache.maven.plugin.descriptor.mojodescriptor.getdependencycollectionrequired()", "org.apache.maven.plugin.descriptor.plugindescriptor.getmojos()", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifactid()", "org.apache.maven.plugin.descriptor.parameter.getname()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.settransferlistener(artifacttransferlistener)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.defaultlifecyclebindingsinjector$lifecyclebindingsmerger()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setprefix(string)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.getplugindescriptor(plugin;repositoryrequest)", "org.apache.maven.plugin.descriptor.mojodescriptor.compareobjects(object;object)", "org.apache.maven.plugin.descriptor.mojodescriptor.setparameters(list)", "org.apache.maven.model.plugin.getkey()", "org.apache.maven.plugin.internal.defaultplugindependenciesresolver.defaultplugindependenciesresolver()", "org.apache.maven.plugin.mojoexecution.mojoexecution(plugin;string;string)", "org.apache.maven.plugin.descriptor.plugindescriptor.setdescription(string)", "org.apache.maven.plugin.pluginparameterexpressionevaluator.pluginparameterexpressionevaluator(mavensession;mojoexecution)", "org.apache.maven.plugin.descriptor.plugindescriptor.plugindescriptor()", "org.apache.maven.plugin.descriptor.plugindescriptor.getartifactmap()", "org.apache.maven.plugin.descriptor.parameter.setrequired(boolean)", "org.apache.maven.plugin.descriptor.parameter.setdescription(string)", "org.apache.maven.plugin.descriptor.parameter.setimplementation(string)", "org.apache.maven.plugin.mojoexecution.getgroupid()", "org.apache.maven.plugin.descriptor.plugindescriptor.getpluginartifact()", "org.apache.maven.plugin.mojoexecution.mojoexecution(mojodescriptor)", "org.apache.maven.plugin.defaultplugindescriptorcache$cachekey.defaultplugindescriptorcache$cachekey(plugin;repositoryrequest)", "org.apache.maven.model.plugin.getextensions()", "org.apache.maven.plugin.mojoexecution.getconfiguration()", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.defaultreportconfigurationexpander()", "org.apache.maven.plugin.descriptor.plugindescriptor.getid()", "org.apache.maven.plugin.mojoexecution.getlifecyclephase()", "org.apache.maven.plugin.descriptor.plugindescriptor.equals(object)", "org.apache.maven.model.plugin.setversion(string)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setplugingroups(list)", "org.apache.maven.model.plugin.clone()", "org.apache.maven.plugin.descriptor.parameter.settype(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.getid()", "org.apache.maven.plugin.descriptor.mojodescriptor.setrequiresreports(boolean)", "org.apache.maven.plugin.descriptor.mojodescriptor.equals(object)", "org.apache.maven.plugin.descriptor.plugindescriptor.getversion()", "org.apache.maven.plugin.descriptor.mojodescriptor.getrolehint()", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector.defaultlifecyclebindingsinjector()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setoffline(boolean)", "org.apache.maven.plugin.defaultpluginrealmcache.defaultpluginrealmcache()", "org.apache.maven.plugin.mojoexecution.getforkedexecutions()", "org.apache.maven.plugin.pluginparameterexpressionevaluator.striptokens(string)", "org.apache.maven.plugin.version.internal.defaultpluginversionresolver.defaultpluginversionresolver()", "org.apache.maven.plugin.descriptor.mojodescriptor.clone()", "org.apache.maven.model.plugin.defaultreportingconverter.defaultreportingconverter()", "org.apache.maven.plugin.descriptor.parameter.setalias(string)", "org.apache.maven.plugin.defaultbuildpluginmanager.defaultbuildpluginmanager()", "org.apache.maven.plugin.descriptor.parameter.seteditable(boolean)", "org.apache.maven.model.plugin.getexecutionsasmap()", "org.apache.maven.model.plugin.defaultreportingconverter.findsiteplugin(build)", "org.apache.maven.plugin.mojoexecution.getsource()", "org.apache.maven.plugin.descriptor.plugindescriptor.setgroupid(string)", "org.apache.maven.plugin.defaultplugindescriptorcache.clone(plugindescriptor)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector.injectlifecyclebindings(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.plugin.defaultplugindescriptorcache.defaultplugindescriptorcache()", "org.apache.maven.plugin.descriptor.mojodescriptor.setplugindescriptor(plugindescriptor)", "org.apache.maven.plugin.defaultextensionrealmcache.defaultextensionrealmcache()", "org.apache.maven.plugin.mojoexecution.getversion()", "org.apache.maven.plugin.defaultplugindescriptorcache.put(key;plugindescriptor)", "org.apache.maven.plugin.mojoexecution.setlifecyclephase(string)", "org.apache.maven.plugin.mojoexecution$source.<clinit>()", "org.apache.maven.model.plugin.defaultreportingconverter.convert(reportset)", "org.apache.maven.plugin.descriptor.mojodescriptor.getphase()", "org.apache.maven.plugin.pluginmanagertest.pluginmanagertest()", "org.apache.maven.plugin.descriptor.plugindescriptor.setversion(string)", "org.apache.maven.model.plugin.tostring()", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.getmojodescriptor(plugin;string;repositoryrequest)", "org.apache.maven.plugin.descriptor.plugindescriptor.isinheritedbydefault()", "org.apache.maven.plugin.defaultplugindescriptorcache.get(key)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.extractplugindescriptor(artifact;plugin)", "org.apache.maven.plugin.descriptor.plugindescriptor.getname()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setpom(model)", "org.apache.maven.plugin.descriptor.plugindescriptor.getsource()", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.defaultmavenpluginmanager()", "org.apache.maven.plugin.descriptor.mojodescriptor.mojodescriptor()", "org.apache.maven.plugin.mojoexecution.mojoexecution(mojodescriptor;string;source)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.parseplugindescriptor(inputstream;plugin;string)", "org.apache.maven.model.plugin.setexecutions(list)", "org.apache.maven.model.plugin.isextensions()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setremoterepositories(list)", "org.apache.maven.plugin.defaultplugindescriptorcache.createkey(plugin;repositoryrequest)", "org.apache.maven.plugin.internal.defaultlegacysupport.defaultlegacysupport()", "org.apache.maven.plugin.descriptor.plugindescriptor.setname(string)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.merge(model;model)", "org.apache.maven.plugin.descriptor.plugindescriptor.getdescription()", "org.apache.maven.model.plugin.constructkey(string;string)", "org.apache.maven.model.plugin.flushexecutionmap()", "org.apache.maven.plugin.descriptor.plugindescriptor.setartifactid(string)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.defaultlifecyclebindingsinjector$lifecyclebindingsmerger(1)", "org.apache.maven.plugin.defaultpluginartifactscache.defaultpluginartifactscache()", "org.apache.maven.model.plugin.adddependency(dependency)", "org.apache.maven.plugin.descriptor.plugindescriptor.constructpluginkey(string;string;string)", "org.apache.maven.model.plugin.setdependencies(list)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expand(list)", "org.apache.maven.plugin.mojoexecution.setconfiguration(xpp3dom)", "org.apache.maven.model.plugin.addexecution(pluginexecution)", "org.apache.maven.plugin.descriptor.plugindescriptorbuilder.buildcomponentdescriptor(plexusconfiguration;plugindescriptor)", "org.apache.maven.model.plugin.defaultreportingconverter.convertreporting(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.plugin.descriptor.plugindescriptor.setpluginartifact(artifact)", "org.apache.maven.plugin.pluginmanagertest.getrepositoryrequest(mavensession)", "org.apache.maven.plugin.defaultplugindescriptorcache$cachekey.repositorieshashcode(list)", "org.apache.maven.plugin.descriptor.parameter.equals(object)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.getplugindescriptorlocation()", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setforceupdate(boolean)", "org.apache.maven.plugin.mojoexecution.getmojodescriptor()", "org.apache.maven.plugin.descriptor.plugindescriptor.setartifacts(list)", "org.apache.maven.plugin.prefix.defaultpluginprefixrequest.setcache(repositorycache)", "org.apache.maven.plugin.mojoexecution.setmojodescriptor(mojodescriptor)", "org.apache.maven.plugin.descriptor.mojodescriptor.getgoal()", "org.apache.maven.plugin.descriptor.plugindescriptorbuilder.plugindescriptorbuilder()", "org.apache.maven.plugin.descriptor.mojodescriptor.getexecutegoal()", "org.apache.maven.model.plugin.getversion()", "org.apache.maven.plugin.descriptor.plugindescriptorbuilder.buildconfiguration(reader)", "org.apache.maven.plugin.pluginparameterexpressionevaluator.evaluate(string)", "org.apache.maven.plugin.descriptor.mojodescriptor.setmojoconfiguration(plexusconfiguration)"]}, "defaultprofileactivationcontext": {"distance": 0.8571, "methods": ["org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()"]}, "defaultmetadataresolutionrequest": {"distance": 0.873, "methods": ["org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.defaultmetadataresolutionrequest(artifactresolutionrequest)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getservers()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isresolvemanagedversions()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setremoterepositories(list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getcache()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setservers(list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getremoterepositories()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setartifact(artifact)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.gettransferlistener()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setmirrors(list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setresolvemanagedversions(boolean)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getartifact()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getlocalrepository()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getproxies()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isoffline()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isforceupdate()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getmirrors()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setproxies(list)"]}, "defaultlegacyartifactcollector": {"distance": 1.0833, "methods": ["org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.collect(set;artifact;map;artifactresolutionrequest;artifactmetadatasource;artifactfilter;list;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.fireevent(int;list;resolutionnode;artifact;versionrange)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.recurse(artifactresolutionresult;resolutionnode;map;managedversionmap;artifactresolutionrequest;artifactmetadatasource;artifactfilter;list;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.fireevent(int;list;resolutionnode;artifact)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.getmanagedversionsmap(artifact;map)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.defaultlegacyartifactcollector()", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.fireevent(int;list;resolutionnode)"]}, "abstractartifactresolutionexception": {"distance": 1.0, "methods": ["org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;artifact;list;throwable)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;string;string;string;string;string;list;list)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.constructartifactpath(list;string)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;artifact;list)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;string;string;string;string;string;list;list;throwable)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.constructmessagebase(string;string;string;string;string;list;list)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.constructmissingartifactmessage(string;string;string;string;string;string;string;string;list)"]}, "stringmodelsource": {"distance": 0.8333, "methods": ["org.apache.maven.model.building.stringmodelsource.getlocation()", "org.apache.maven.model.building.stringmodelsource.stringmodelsource(charsequence;string)", "org.apache.maven.model.building.stringmodelsource.getinputstream()"]}, "stringsearchmodelinterpolator": {"distance": 1.5, "methods": ["org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolateobject(object;model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolatemodel(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.createinterpolator()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$100()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.<clinit>()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$000()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.stringsearchmodelinterpolator()"]}, "cimanagement": {"distance": 0.8333, "methods": ["org.apache.maven.model.cimanagement.getsystem()", "org.apache.maven.model.cimanagement.seturl(string)", "org.apache.maven.model.cimanagement.cimanagement()", "org.apache.maven.model.cimanagement.getnotifiers()", "org.apache.maven.model.cimanagement.setsystem(string)", "org.apache.maven.model.cimanagement.clone()", "org.apache.maven.model.cimanagement.geturl()", "org.apache.maven.model.cimanagement.setnotifiers(list)"]}, "legacyrepositorysystem": {"distance": 0.942, "methods": ["org.apache.maven.repository.legacy.legacyrepositorysystem.createartifact(string;string;string;string;string)", "org.apache.maven.repository.legacy.legacyrepositorysystem.createrepository(string;string;boolean;string;boolean;string;string)", "org.apache.maven.repository.legacy.legacyrepositorysystem.getproxy(artifactrepository;list)", "org.apache.maven.repository.legacy.legacyrepositorysystem.createartifactrepository(string;string;artifactrepositorylayout;artifactrepositorypolicy;artifactrepositorypolicy)", "org.apache.maven.repository.legacy.legacyrepositorysystem.injectproxy(list;list)", "org.apache.maven.repository.legacy.legacyrepositorysystem.geteffectiverepositories(list)", "org.apache.maven.repository.legacy.legacyrepositorysystem.resolve(artifactresolutionrequest)", "org.apache.maven.repository.legacy.legacyrepositorysystem.getmirror(artifactrepository;list)", "org.apache.maven.repository.legacy.legacyrepositorysystem.injectmirror(list;list)", "org.apache.maven.repository.legacy.legacyrepositorysystem.buildartifactrepository(repository)", "org.apache.maven.repository.legacy.legacyrepositorysystem.buildartifactrepositorypolicy(repositorypolicy)", "org.apache.maven.repository.legacy.legacyrepositorysystem.geteffectivepolicy(collection)", "org.apache.maven.repository.legacy.legacyrepositorysystem.createlocalrepository(file)", "org.apache.maven.repository.legacy.legacyrepositorysystem.legacyrepositorysystem()", "org.apache.maven.repository.legacy.legacyrepositorysystem.injectauthentication(list;list)", "org.apache.maven.repository.legacy.legacyrepositorysystem.createdependencyartifact(dependency)"]}, "defaultmodelbuilder": {"distance": 2.0, "methods": ["org.apache.maven.model.building.defaultmodelbuilder.readparentlocally(model;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;collection)", "org.apache.maven.model.building.defaultmodelbuilder.getsupermodel()", "org.apache.maven.model.building.defaultmodelbuilder.fireevent(model;modelbuildingrequest;modelproblemcollector;modelbuildingeventcatapult)", "org.apache.maven.model.building.defaultmodelbuilder.readmodel(modelsource;file;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.importdependencymanagement(model;modelbuildingrequest;defaultmodelproblemcollector;collection)", "org.apache.maven.model.building.defaultmodelbuilder.putcache(modelcache;string;string;string;modelcachetag;object)", "org.apache.maven.model.building.defaultmodelbuilder.getparentpomfile(model)", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.defaultmodelbuilder()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult;collection)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivationcontext(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilder.getcache(modelcache;string;string;string;modelcachetag)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilder.assembleinheritance(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.checkpluginversions(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.interpolatemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult)", "org.apache.maven.model.building.defaultmodelbuilder.readparent(model;modelbuildingrequest;defaultmodelproblemcollector)"]}, "defaultupdatecheckmanager": {"distance": 1.1111, "methods": ["org.apache.maven.repository.legacy.defaultupdatecheckmanager.defaultupdatecheckmanager()"]}, "build": {"distance": 0.9167, "methods": ["org.apache.maven.model.build.setsourcedirectory(string)", "org.apache.maven.model.build.setoutputdirectory(string)", "org.apache.maven.model.build.addextension(extension)", "org.apache.maven.model.build.gettestoutputdirectory()", "org.apache.maven.model.build.getextensions()", "org.apache.maven.model.build.settestoutputdirectory(string)", "org.apache.maven.model.build.settestsourcedirectory(string)", "org.apache.maven.model.build.getscriptsourcedirectory()", "org.apache.maven.model.build.build()", "org.apache.maven.model.build.setextensions(list)", "org.apache.maven.model.build.getoutputdirectory()", "org.apache.maven.model.build.getsourcedirectory()", "org.apache.maven.model.build.clone()", "org.apache.maven.model.build.gettestsourcedirectory()", "org.apache.maven.model.build.setscriptsourcedirectory(string)"]}, "parameter": {"distance": 0.9599, "methods": ["org.apache.maven.plugin.descriptor.parameter.parameter()", "org.apache.maven.plugin.descriptor.parameter.setdeprecated(string)", "org.apache.maven.plugin.descriptor.parameter.setname(string)", "org.apache.maven.plugin.descriptor.parameter.getname()", "org.apache.maven.plugin.descriptor.parameter.setrequired(boolean)", "org.apache.maven.plugin.descriptor.parameter.setdescription(string)", "org.apache.maven.plugin.descriptor.parameter.setimplementation(string)", "org.apache.maven.plugin.descriptor.parameter.settype(string)", "org.apache.maven.plugin.descriptor.parameter.setalias(string)", "org.apache.maven.plugin.descriptor.parameter.seteditable(boolean)", "org.apache.maven.plugin.descriptor.parameter.equals(object)"]}, "profile": {"distance": 0.8462, "methods": ["org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrange(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isinrange(string;list)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergemodelbase(modelbase;modelbase)", "org.apache.maven.model.profile.clone()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.settings.profile.getproperties()", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newprofile(string;string)", "org.apache.maven.model.profile.getbuild()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.profile.defaultprofileinjector.defaultprofileinjector()", "org.apache.maven.settings.profile.addproperty(string;string)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.getactivation()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.addzerotokens(list;int)", "org.apache.maven.model.profile.setactivation(activation)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.jdkversionprofileactivator$rangevalue(string;boolean)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$100(rangevalue)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isrange(string)", "org.apache.maven.model.profile.tostring()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.profile.getid()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergebuildbase(buildbase;buildbase)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newproperties(string;string)", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.settings.profile.getrepositories()", "org.apache.maven.settings.profile.setpluginrepositories(list)", "org.apache.maven.model.profile.setsource(string)", "org.apache.maven.settings.profile.profile()", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()", "org.apache.maven.model.profile.defaultprofileinjector.injectprofile(model;profile;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrelationorder(string;rangevalue;boolean)", "org.apache.maven.model.profile.profile()", "org.apache.maven.settings.profile.getactivation()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newproperties(string)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.getsource()", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger(1)", "org.apache.maven.settings.profile.getpluginrepositories()", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newprofile(string)", "org.apache.maven.settings.profile.setrepositories(list)", "org.apache.maven.model.profile.setid(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$000(rangevalue)", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.setbuild(buildbase)", "org.apache.maven.settings.profile.setactivation(activation)"]}, "defaultprojectbuilder": {"distance": 1.0179, "methods": ["org.apache.maven.project.defaultprojectbuilder.getmodelbuildingrequest(projectbuildingrequest;reactormodelpool)", "org.apache.maven.project.defaultprojectbuilder.build(artifact;projectbuildingrequest)", "org.apache.maven.project.defaultprojectbuilder.build(artifact;boolean;projectbuildingrequest)", "org.apache.maven.project.defaultprojectbuilder.build(file;projectbuildingrequest)", "org.apache.maven.project.defaultprojectbuilder.getprofileids(list)", "org.apache.maven.project.defaultprojectbuilder.createstubmodelsource(artifact)", "org.apache.maven.project.defaultprojectbuilder.initproject(mavenproject;modelbuildingresult)", "org.apache.maven.project.defaultprojectbuilder.defaultprojectbuilder()", "org.apache.maven.project.defaultprojectbuilder.build(file;modelsource;projectbuildingrequest)"]}, "defaultmavenmetadatacache$cachekey": {"distance": 1.0, "methods": ["org.apache.maven.project.artifact.defaultmavenmetadatacache$cachekey.defaultmavenmetadatacache$cachekey(artifact;boolean;artifactrepository;list)", "org.apache.maven.project.artifact.defaultmavenmetadatacache$cachekey.hashcode()"]}, "lifecycletasksegmentcalculatorimpl": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.lifecycletasksegmentcalculatorimpl.calculatetasksegments(mavensession)", "org.apache.maven.lifecycle.internal.lifecycletasksegmentcalculatorimpl.lifecycletasksegmentcalculatorimpl()"]}, "reporting": {"distance": 0.8542, "methods": ["org.apache.maven.model.reporting.getoutputdirectory()", "org.apache.maven.model.reporting.getplugins()", "org.apache.maven.model.reporting.clone()", "org.apache.maven.model.reporting.setplugins(list)", "org.apache.maven.model.reporting.getexcludedefaults()", "org.apache.maven.model.reporting.isexcludedefaults()", "org.apache.maven.model.reporting.setexcludedefaults(string)", "org.apache.maven.model.reporting.setoutputdirectory(string)", "org.apache.maven.model.reporting.reporting()"]}, "defaultmavenmetadatacache$cacherecord": {"distance": 0.975, "methods": ["org.apache.maven.project.artifact.defaultmavenmetadatacache$cacherecord.defaultmavenmetadatacache$cacherecord(defaultmavenmetadatacache;artifact;artifact;set;map;list)"]}, "mojoexecution": {"distance": 0.875, "methods": ["org.apache.maven.plugin.mojoexecution.getartifactid()", "org.apache.maven.plugin.mojoexecution.getplugin()", "org.apache.maven.plugin.mojoexecution.getexecutionid()", "org.apache.maven.plugin.mojoexecution.getgoal()", "org.apache.maven.plugin.mojoexecution.mojoexecution(plugin;string;string)", "org.apache.maven.plugin.mojoexecution.getgroupid()", "org.apache.maven.plugin.mojoexecution.mojoexecution(mojodescriptor)", "org.apache.maven.plugin.mojoexecution.getconfiguration()", "org.apache.maven.plugin.mojoexecution.getlifecyclephase()", "org.apache.maven.plugin.mojoexecution.getforkedexecutions()", "org.apache.maven.plugin.mojoexecution.getsource()", "org.apache.maven.plugin.mojoexecution.getversion()", "org.apache.maven.plugin.mojoexecution.setlifecyclephase(string)", "org.apache.maven.plugin.mojoexecution.mojoexecution(mojodescriptor;string;source)", "org.apache.maven.plugin.mojoexecution.setconfiguration(xpp3dom)", "org.apache.maven.plugin.mojoexecution.getmojodescriptor()", "org.apache.maven.plugin.mojoexecution.setmojodescriptor(mojodescriptor)"]}, "defaultprojectbuildingresult": {"distance": 1.0, "methods": ["org.apache.maven.project.defaultprojectbuildingresult.getproject()", "org.apache.maven.project.defaultprojectbuildingresult.defaultprojectbuildingresult(mavenproject;list;artifactresolutionresult)"]}, "defaultprojectbuildingrequest": {"distance": 0.9751, "methods": ["org.apache.maven.project.defaultprojectbuildingrequest.getmirrors()", "org.apache.maven.project.defaultprojectbuildingrequest.setsystemproperties(properties)", "org.apache.maven.project.defaultprojectbuildingrequest.getinactiveprofileids()", "org.apache.maven.project.defaultprojectbuildingrequest.setactiveprofileids(list)", "org.apache.maven.project.defaultprojectbuildingrequest.getremoterepositories()", "org.apache.maven.project.defaultprojectbuildingrequest.setoffline(boolean)", "org.apache.maven.project.defaultprojectbuildingrequest.getlocalrepository()", "org.apache.maven.project.defaultprojectbuildingrequest.setproxies(list)", "org.apache.maven.project.defaultprojectbuildingrequest.getproxies()", "org.apache.maven.project.defaultprojectbuildingrequest.setforceupdate(boolean)", "org.apache.maven.project.defaultprojectbuildingrequest.setservers(list)", "org.apache.maven.project.defaultprojectbuildingrequest.setuserproperties(properties)", "org.apache.maven.project.defaultprojectbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.project.defaultprojectbuildingrequest.setrepositorycache(repositorycache)", "org.apache.maven.project.defaultprojectbuildingrequest.getproject()", "org.apache.maven.project.defaultprojectbuildingrequest.isprocessplugins()", "org.apache.maven.project.defaultprojectbuildingrequest.addprofile(profile)", "org.apache.maven.project.defaultprojectbuildingrequest.getpluginartifactrepositories()", "org.apache.maven.project.defaultprojectbuildingrequest.getsystemproperties()", "org.apache.maven.project.defaultprojectbuildingrequest.isforceupdate()", "org.apache.maven.project.defaultprojectbuildingrequest.getuserproperties()", "org.apache.maven.project.defaultprojectbuildingrequest.setpluginartifactrepositories(list)", "org.apache.maven.project.defaultprojectbuildingrequest.getrepositorycache()", "org.apache.maven.project.defaultprojectbuildingrequest.getbuildstarttime()", "org.apache.maven.project.defaultprojectbuildingrequest.settransferlistener(artifacttransferlistener)", "org.apache.maven.project.defaultprojectbuildingrequest.setresolvedependencies(boolean)", "org.apache.maven.project.defaultprojectbuildingrequest.setlocalrepository(artifactrepository)", "org.apache.maven.project.defaultprojectbuildingrequest.setvalidationlevel(int)", "org.apache.maven.project.defaultprojectbuildingrequest.isresolvedependencies()", "org.apache.maven.project.defaultprojectbuildingrequest.getprofiles()", "org.apache.maven.project.defaultprojectbuildingrequest.setremoterepositories(list)", "org.apache.maven.project.defaultprojectbuildingrequest.defaultprojectbuildingrequest()", "org.apache.maven.project.defaultprojectbuildingrequest.isoffline()", "org.apache.maven.project.defaultprojectbuildingrequest.getvalidationlevel()", "org.apache.maven.project.defaultprojectbuildingrequest.gettransferlistener()", "org.apache.maven.project.defaultprojectbuildingrequest.getservers()", "org.apache.maven.project.defaultprojectbuildingrequest.setmirrors(list)", "org.apache.maven.project.defaultprojectbuildingrequest.getactiveprofileids()"]}, "defaultmodelnormalizer": {"distance": 1.0, "methods": ["org.apache.maven.model.normalization.defaultmodelnormalizer.defaultmodelnormalizer()", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdependencydefaults(list)", "org.apache.maven.model.normalization.defaultmodelnormalizer.mergeduplicates(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdefaultvalues(model;modelbuildingrequest;modelproblemcollector)"]}, "defaultlifecycleexecutor": {"distance": 0.9808, "methods": ["org.apache.maven.lifecycle.defaultlifecycleexecutor.defaultlifecycleexecutor()"]}, "projectsegment": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.projectsegment.gettransitiveupstreamprojects()", "org.apache.maven.lifecycle.internal.projectsegment.gettasksegment()", "org.apache.maven.lifecycle.internal.projectsegment.projectsegment(mavenproject;tasksegment;mavensession)", "org.apache.maven.lifecycle.internal.projectsegment.getimmediateupstreamprojects()", "org.apache.maven.lifecycle.internal.projectsegment.getproject()", "org.apache.maven.lifecycle.internal.projectsegment.getsession()"]}, "duplicateprojectexception": {"distance": 1.0, "methods": ["org.apache.maven.project.duplicateprojectexception.duplicateprojectexception(string;file;file;string)"]}, "defaultwagonmanager": {"distance": 0.9111, "methods": ["org.apache.maven.repository.legacy.defaultwagonmanager.defaultwagonmanager()"]}, "abstractversiontransformation": {"distance": 1.1667, "methods": ["org.apache.maven.repository.legacy.resolver.transform.abstractversiontransformation.abstractversiontransformation()"]}, "lifecycletask": {"distance": 1.0, "methods": ["org.apache.maven.lifecycle.internal.lifecycletask.lifecycletask(string)"]}, "defaultmavenpluginmanager": {"distance": 1.0, "methods": ["org.apache.maven.plugin.internal.defaultmavenpluginmanager.getplugindescriptor(plugin;repositoryrequest)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.getmojodescriptor(plugin;string;repositoryrequest)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.extractplugindescriptor(artifact;plugin)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.defaultmavenpluginmanager()", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.parseplugindescriptor(inputstream;plugin;string)", "org.apache.maven.plugin.internal.defaultmavenpluginmanager.getplugindescriptorlocation()"]}, "buildsummary": {"distance": 1.0, "methods": ["org.apache.maven.execution.buildsummary.getproject()", "org.apache.maven.execution.buildsummary.buildsummary(mavenproject;long)"]}, "defaultprojectbuildinghelper": {"distance": 1.0, "methods": ["org.apache.maven.project.defaultprojectbuildinghelper.createartifactrepositories(list;list;projectbuildingrequest)", "org.apache.maven.project.defaultprojectbuildinghelper.defaultprojectbuildinghelper()", "org.apache.maven.project.defaultprojectbuildinghelper.createprojectrealm(mavenproject;model;projectbuildingrequest)", "org.apache.maven.project.defaultprojectbuildinghelper.selectprojectrealm(mavenproject)"]}, "modeldata": {"distance": 0.9103, "methods": ["org.apache.maven.model.building.modeldata.getactiveprofiles()", "org.apache.maven.model.building.modeldata.setmodel(model)", "org.apache.maven.model.building.modeldata.setactiveprofiles(list)", "org.apache.maven.model.building.modeldata.setrawmodel(model)", "org.apache.maven.model.building.modeldata.getversion()", "org.apache.maven.model.building.modeldata.modeldata(model;string;string;string)", "org.apache.maven.model.building.modeldata.getrawmodel()", "org.apache.maven.model.building.modeldata.modeldata(model)", "org.apache.maven.model.building.modeldata.getartifactid()", "org.apache.maven.model.building.modeldata.setgroupid(string)", "org.apache.maven.model.building.modeldata.setartifactid(string)", "org.apache.maven.model.building.modeldata.getmodel()", "org.apache.maven.model.building.modeldata.getgroupid()", "org.apache.maven.model.building.modeldata.getid()", "org.apache.maven.model.building.modeldata.setversion(string)"]}, "model": {"distance": 0.9735, "methods": ["org.apache.maven.model.io.xpp3.mavenxpp3reader.parseextension(xmlpullparser;boolean)", "org.apache.maven.model.model.setinceptionyear(string)", "org.apache.maven.model.buildbase.addresource(resource)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.access$300(stringsearchmodelinterpolatortest)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelsource()", "org.apache.maven.model.merge.modelmerger.mergeplugin_groupid(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.repositorybase.getname()", "org.apache.maven.model.model.getbuild()", "org.apache.maven.model.building.defaultmodelbuilder.readparentlocally(model;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergepluginmanagement(pluginmanagement;pluginmanagement;boolean;map)", "org.apache.maven.model.building.modeldata.getactiveprofiles()", "org.apache.maven.model.building.defaultmodelproblem.getsource()", "org.apache.maven.model.path.defaultmodelurlnormalizer.defaultmodelurlnormalizer()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$2.abstractstringbasedmodelinterpolator$2(abstractstringbasedmodelinterpolator;boolean;file)", "org.apache.maven.model.buildbase.clone()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;collection)", "org.apache.maven.model.model.getorganization()", "org.apache.maven.model.extension.getversion()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseplugin(xmlpullparser;boolean)", "org.apache.maven.model.management.defaultdependencymanagementinjector.defaultdependencymanagementinjector()", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.urlnormalizingpostprocessor(urlnormalizer)", "org.apache.maven.model.issuemanagement.setsystem(string)", "org.apache.maven.model.model.setdescription(string)", "org.apache.maven.model.merge.modelmerger.mergedependency_scope(dependency;dependency;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergebuild_outputdirectory(build;build;boolean;map)", "org.apache.maven.model.reportplugin.getconfiguration()", "org.apache.maven.model.normalization.defaultmodelnormalizer$duplicatemerger.mergeplugin(plugin;plugin)", "org.apache.maven.model.parent.parent()", "org.apache.maven.model.building.defaultmodelproblemcollector.getsource()", "org.apache.maven.model.buildbase.setresources(list)", "org.apache.maven.model.patternset.patternset()", "org.apache.maven.model.distributionmanagement.getsite()", "org.apache.maven.model.locator.defaultmodellocator.defaultmodellocator()", "org.apache.maven.model.building.defaultmodelproblem.getmessage()", "org.apache.maven.model.activationproperty.setvalue(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.setup()", "org.apache.maven.model.building.defaultmodelproblem.getcolumnnumber()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrange(string)", "org.apache.maven.model.model.setissuemanagement(issuemanagement)", "org.apache.maven.model.validation.defaultmodelvalidator.validateversion(string;modelproblemcollector;severity;string;string)", "org.apache.maven.model.model.getdescription()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsepluginmanagement(xmlpullparser;boolean)", "org.apache.maven.model.deploymentrepository.deploymentrepository()", "org.apache.maven.model.merge.mavenmodelmerger.mergedistributionmanagement_repository(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isinrange(string;list)", "org.apache.maven.model.building.defaultmodelbuildingevent.getmodel()", "org.apache.maven.model.activationproperty.getvalue()", "org.apache.maven.model.dependency.getclassifier()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.assertcolllectorstate(int;int;int;simpleproblemcollector)", "org.apache.maven.model.building.defaultmodelbuildingevent.defaultmodelbuildingevent(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createvaluesources(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolateobject(object;model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profiletest.profiletest()", "org.apache.maven.model.model.setlicenses(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactiveexternalprofiles(list)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(model)", "org.apache.maven.model.building.filemodelsource.getlocation()", "org.apache.maven.model.merge.modelmerger.mergedependencymanagement(dependencymanagement;dependencymanagement;boolean;map)", "org.apache.maven.model.repository.setsnapshots(repositorypolicy)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedependency(xmlpullparser;boolean)", "org.apache.maven.model.building.stringmodelsource.getlocation()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getbuildstarttime()", "org.apache.maven.model.configurationcontainer.getinherited()", "org.apache.maven.model.building.modelproblem$severity.<clinit>()", "org.apache.maven.model.activation.setactivebydefault(boolean)", "org.apache.maven.model.building.defaultmodelbuildingrequest.isprocessplugins()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.plugin.equals(object)", "org.apache.maven.model.build.setsourcedirectory(string)", "org.apache.maven.model.repository.clone()", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.building.defaultmodelproblem.defaultmodelproblem(string;severity;string;int;int;string;exception)", "org.apache.maven.model.merge.modelmerger.mergesite(site;site;boolean;map)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.problemdetectingvaluesource(valuesource;string;string;modelproblemcollector)", "org.apache.maven.model.dependency.getscope()", "org.apache.maven.model.pluginconfiguration.clone()", "org.apache.maven.model.contributor.setorganizationurl(string)", "org.apache.maven.model.plugin.getdependencies()", "org.apache.maven.model.fileset.setdirectory(string)", "org.apache.maven.model.merge.mavenmodelmerger.getpluginkey(plugin)", "org.apache.maven.model.buildbase.getdefaultgoal()", "org.apache.maven.model.reportplugin.getartifactid()", "org.apache.maven.model.merge.mavenmodelmerger.getrepositorybasekey(repositorybase)", "org.apache.maven.model.license.geturl()", "org.apache.maven.model.exclusion.setgroupid(string)", "org.apache.maven.model.merge.modelmerger.mergedependency_artifactid(dependency;dependency;boolean;map)", "org.apache.maven.model.dependency.getgroupid()", "org.apache.maven.model.distributionmanagement.getrepository()", "org.apache.maven.model.validation.defaultmodelvalidator.validatepluginversion(string;modelproblemcollector;string;string;modelbuildingrequest)", "org.apache.maven.model.dependency.dependency()", "org.apache.maven.model.site.seturl(string)", "org.apache.maven.model.distributionmanagement.clone()", "org.apache.maven.model.pluginexecution.setid(string)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.abstractmodelinterpolatortest()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereportset(xmlpullparser;boolean)", "org.apache.maven.model.building.defaultmodelbuildingresult.getactivepomprofiles(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolatemodel(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidator.validatenotnull(string;modelproblemcollector;severity;object;string)", "org.apache.maven.model.plugincontainer.setplugins(list)", "org.apache.maven.model.site.getname()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsenotifier(xmlpullparser;boolean)", "org.apache.maven.model.issuemanagement.getsystem()", "org.apache.maven.model.merge.modelmerger.mergereportplugin(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereporting(xmlpullparser;boolean)", "org.apache.maven.model.license.setname(string)", "org.apache.maven.model.build.setoutputdirectory(string)", "org.apache.maven.model.issuemanagement.geturl()", "org.apache.maven.model.merge.modelmerger.mergepluginexecution(pluginexecution;pluginexecution;boolean;map)", "org.apache.maven.model.model.setprerequisites(prerequisites)", "org.apache.maven.model.composition.defaultdependencymanagementimporter.importmanagement(model;list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.notifier.getconfiguration()", "org.apache.maven.model.scm.getconnection()", "org.apache.maven.model.pluginexecution.clone()", "org.apache.maven.model.configurationcontainer.isinherited()", "org.apache.maven.model.distributionmanagement.getstatus()", "org.apache.maven.model.build.addextension(extension)", "org.apache.maven.model.reporting.getoutputdirectory()", "org.apache.maven.model.merge.modelmerger.mergeplugin_dependencies(plugin;plugin;boolean;map)", "org.apache.maven.model.activation.isactivebydefault()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(inputstream)", "org.apache.maven.model.merge.modelmerger.mergedeploymentrepository_uniqueversion(deploymentrepository;deploymentrepository;boolean;map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.contributor.contributor()", "org.apache.maven.model.plugin.getgroupid()", "org.apache.maven.model.repositorybase.clone()", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.defaultinheritanceassembler$inheritancemodelmerger(1)", "org.apache.maven.model.parent.setversion(string)", "org.apache.maven.model.scm.settag(string)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergemodelbase(modelbase;modelbase)", "org.apache.maven.model.reportplugin.getversion()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setvalidationlevel(int)", "org.apache.maven.model.model.clonehook(model)", "org.apache.maven.model.build.gettestoutputdirectory()", "org.apache.maven.model.plugincontainer.getpluginsasmap()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.gettrimmedvalue(string)", "org.apache.maven.model.pluginexecution.getgoals()", "org.apache.maven.model.validation.defaultmodelvalidatortest.validate(string)", "org.apache.maven.model.pluginexecution.tostring()", "org.apache.maven.model.model.getmodelversion()", "org.apache.maven.model.profile.clone()", "org.apache.maven.model.merge.modelmerger.mergebuildbase_directory(buildbase;buildbase;boolean;map)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$3.getvalue(string)", "org.apache.maven.model.model.getdevelopers()", "org.apache.maven.model.extension.setartifactid(string)", "org.apache.maven.model.distributionmanagement.getrelocation()", "org.apache.maven.model.building.defaultmodelproblem.getlinenumber()", "org.apache.maven.model.model.geturl()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.contributor.getname()", "org.apache.maven.model.reportset.setconfiguration(object)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.getinterpolator()", "org.apache.maven.model.interpolation.buildtimestampvaluesource.getvalue(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergedistributionmanagement_site(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.plugin.getartifactid()", "org.apache.maven.model.merge.modelmerger.mergemodel_packaging(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getprofiles()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_properties(modelbase;modelbase;boolean;map)", "org.apache.maven.model.scm.setconnection(string)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.<clinit>()", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.defaultdependencymanagementinjector$managementmodelmerger(1)", "org.apache.maven.model.exclusion.clone()", "org.apache.maven.model.site.setid(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseparent(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.createinterpolator()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivation(xmlpullparser;boolean)", "org.apache.maven.model.plugin.defaultreportingconverter.adddom(xpp3dom;string;string)", "org.apache.maven.model.modelbase.addmodule(string)", "org.apache.maven.model.path.defaultpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.distributionmanagement.setsite(site)", "org.apache.maven.model.validation.defaultmodelvalidator.validateresources(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.createmodelbuildingrequest(properties)", "org.apache.maven.model.model.setbuild(build)", "org.apache.maven.model.merge.modelmerger.mergedistributionmanagement_downloadurl(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergedependency_classifier(dependency;dependency;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setuserproperties(properties)", "org.apache.maven.model.build.getextensions()", "org.apache.maven.model.building.defaultmodelbuilder.getsupermodel()", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergedistributionmanagement(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodel_scm(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeissuemanagement_url(issuemanagement;issuemanagement;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_dependencies(modelbase;modelbase;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string;string)", "org.apache.maven.model.relocation.relocation()", "org.apache.maven.model.path.defaultpathtranslator.defaultpathtranslator()", "org.apache.maven.model.merge.modelmerger.mergebuild_scriptsourcedirectory(build;build;boolean;map)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.defaultpluginconfigurationexpander()", "org.apache.maven.model.scm.gettag()", "org.apache.maven.model.repositorypolicy.repositorypolicy()", "org.apache.maven.model.plugin.setartifactid(string)", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.exclusion.getgroupid()", "org.apache.maven.model.configurationcontainer.getconfiguration()", "org.apache.maven.model.merge.modelmerger.getrepositorykey(repository)", "org.apache.maven.model.parent.clone()", "org.apache.maven.model.building.defaultmodelproblemcollector.setrootmodel(model)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(model;modelbuildingrequest)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.run()", "org.apache.maven.model.site.getid()", "org.apache.maven.model.merge.modelmerger.mergedependency(dependency;dependency;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergebuild_testsourcedirectory(build;build;boolean;map)", "org.apache.maven.model.building.modelproblem$severity.values()", "org.apache.maven.model.dependencymanagement.setdependencies(list)", "org.apache.maven.model.dependency.clone()", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergedeploymentrepository(deploymentrepository;deploymentrepository;boolean;map)", "org.apache.maven.model.pluginexecution.getid()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setbuildstarttime(date)", "org.apache.maven.model.model.setpackaging(string)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_distributionmanagement(modelbase;modelbase;boolean;map)", "org.apache.maven.model.building.stringmodelsource.stringmodelsource(charsequence;string)", "org.apache.maven.model.building.defaultmodelbuildingresult.setproblems(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.addmodelid(string)", "org.apache.maven.model.pluginexecution.getphase()", "org.apache.maven.model.scm.clone()", "org.apache.maven.model.merge.modelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidatortest.assertviolations(simpleproblemcollector;int;int;int)", "org.apache.maven.model.plugin.hashcode()", "org.apache.maven.model.model.setmodelversion(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawmodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.repositorybase.geturl()", "org.apache.maven.model.mailinglist.getname()", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_filters(buildbase;buildbase;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidatortest.validateraw(string;int)", "org.apache.maven.model.io.defaultmodelreader.isstrict(map)", "org.apache.maven.model.issuemanagement.clone()", "org.apache.maven.model.exclusion.exclusion()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithstringarrayfield.access$000(objectwithstringarrayfield)", "org.apache.maven.model.model.setcontributors(list)", "org.apache.maven.model.model.getcontributors()", "org.apache.maven.model.merge.modelmerger.getresourcekey(resource)", "org.apache.maven.model.merge.modelmerger.mergepluginconfiguration(pluginconfiguration;pluginconfiguration;boolean;map)", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newprofile(string;string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsecontributor(xmlpullparser;boolean)", "org.apache.maven.model.merge.modelmerger.mergepluginconfiguration_pluginmanagement(pluginconfiguration;pluginconfiguration;boolean;map)", "org.apache.maven.model.profile.getbuild()", "org.apache.maven.model.merge.modelmerger.mergeparent_relativepath(parent;parent;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergerepository_snapshots(repository;repository;boolean;map)", "org.apache.maven.model.mailinglist.mailinglist()", "org.apache.maven.model.building.defaultmodelbuilder.fireevent(model;modelbuildingrequest;modelproblemcollector;modelbuildingeventcatapult)", "org.apache.maven.model.validation.defaultmodelvalidatortest.read(string)", "org.apache.maven.model.building.defaultmodelbuilder.readmodel(modelsource;file;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.buildbase.getfinalname()", "org.apache.maven.model.parent.getgroupid()", "org.apache.maven.model.plugin.getexecutions()", "org.apache.maven.model.plugin.defaultreportingconverter.issiteplugin(plugin)", "org.apache.maven.model.dependencymanagement.dependencymanagement()", "org.apache.maven.model.issuemanagement.seturl(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_artifactid(model;model;boolean;map)", "org.apache.maven.model.superpom.defaultsuperpomprovider.getsupermodel(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.createinterpolator()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolateorganizationnamecorrectly()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedistributionmanagement(xmlpullparser;boolean)", "org.apache.maven.model.scm.seturl(string)", "org.apache.maven.model.building.modeldata.setmodel(model)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergereporting_plugins(reporting;reporting;boolean;map)", "org.apache.maven.model.interpolation.pathtranslatingpostprocessor.pathtranslatingpostprocessor(list;collection;file;pathtranslator)", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.execute(string;object)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parselicense(xmlpullparser;boolean)", "org.apache.maven.model.parent.setartifactid(string)", "org.apache.maven.model.reportplugin.constructkey(string;string)", "org.apache.maven.model.dependency.getexclusions()", "org.apache.maven.model.modelbase.setreporting(reporting)", "org.apache.maven.model.plugin.plugin()", "org.apache.maven.model.reportplugin.getreportsets()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_mailinglists(model;model;boolean;map)", "org.apache.maven.model.distributionmanagement.getdownloadurl()", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;string;string)", "org.apache.maven.model.dependency.settype(string)", "org.apache.maven.model.building.modelcachetag$2.modelcachetag$2()", "org.apache.maven.model.building.defaultmodelbuilder.importdependencymanagement(model;modelbuildingrequest;defaultmodelproblemcollector;collection)", "org.apache.maven.model.building.defaultmodelbuildingevent.getrequest()", "org.apache.maven.model.building.defaultmodelproblemcollector.add(severity;string;int;int;exception)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereportplugin(xmlpullparser;boolean)", "org.apache.maven.model.model.getparent()", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.mergedependency_optional(dependency;dependency;boolean;map)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergemanagedbuildplugins(model)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getinactiveprofileids()", "org.apache.maven.model.plugin.defaultreportingconverter.newdom(string;string)", "org.apache.maven.model.parent.getrelativepath()", "org.apache.maven.model.validation.defaultmodelvalidator.validateboolean(string;modelproblemcollector;severity;string;string)", "org.apache.maven.model.merge.modelmerger.mergemodel_parent(model;model;boolean;map)", "org.apache.maven.model.build.settestoutputdirectory(string)", "org.apache.maven.model.resource.isfiltering()", "org.apache.maven.model.dependencytest.dependencytest()", "org.apache.maven.model.configurationcontainer.clone()", "org.apache.maven.model.validation.defaultmodelvalidator.equals(string;string)", "org.apache.maven.model.building.defaultmodelbuilder.putcache(modelcache;string;string;string;modelcachetag;object)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getsystemproperties()", "org.apache.maven.model.merge.modelmerger.mergescm_tag(scm;scm;boolean;map)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.reporting.getplugins()", "org.apache.maven.model.profile.defaultprofileinjector.defaultprofileinjector()", "org.apache.maven.model.merge.modelmerger.mergerepositorybase_url(repositorybase;repositorybase;boolean;map)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldnotthrowexceptiononreferencetovaluecontainingnakedexpression()", "org.apache.maven.model.building.modeldata.setactiveprofiles(list)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setactiveprofileids(list)", "org.apache.maven.model.building.stringmodelsource.getinputstream()", "org.apache.maven.model.dependency.addexclusion(exclusion)", "org.apache.maven.model.validation.defaultmodelvalidator.validateenum(string;modelproblemcollector;severity;string;string;string[])", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.activationproperty.activationproperty()", "org.apache.maven.model.plugin.defaultreportingconverter.convert(reportplugin)", "org.apache.maven.model.organization.geturl()", "org.apache.maven.model.model.clone()", "org.apache.maven.model.reportset.getconfiguration()", "org.apache.maven.model.repositorypolicy.setchecksumpolicy(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnoexpression(string;modelproblemcollector;severity;string)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidatortest.validateeffective(string;int)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolateunprefixedbasedirexpression()", "org.apache.maven.model.buildbase.getfilters()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.plugin.setgroupid(string)", "org.apache.maven.model.merge.modelmerger.mergesite_id(site;site;boolean;map)", "org.apache.maven.model.repositorypolicy.setenabled(string)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setmodelbuildinglistener(modelbuildinglistener)", "org.apache.maven.model.activation.getfile()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.assertproblemfree(simpleproblemcollector)", "org.apache.maven.model.dependency.isoptional()", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserepositorypolicy(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$100()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmapfield.stringsearchmodelinterpolatortest$objectwithmapfield(map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.traverseobjectwithparents(class;object)", "org.apache.maven.model.cimanagement.getsystem()", "org.apache.maven.model.profile.getactivation()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.isqualifiedforinterpolation(field;class)", "org.apache.maven.model.reporting.clone()", "org.apache.maven.model.notifier.setsendonwarning(boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(int;int)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.addzerotokens(list;int)", "org.apache.maven.model.building.modeldata.setrawmodel(model)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.checkfieldwithduplicate(xmlpullparser;string;string;set)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_modelversion(model;model;boolean;map)", "org.apache.maven.model.model.getinceptionyear()", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.<clinit>()", "org.apache.maven.model.model.setmodelencoding(string)", "org.apache.maven.model.reportplugin.setartifactid(string)", "org.apache.maven.model.resource.<clinit>()", "org.apache.maven.model.profile.setactivation(activation)", "org.apache.maven.model.build.settestsourcedirectory(string)", "org.apache.maven.model.building.simpleproblemcollector.add(severity;string;exception)", "org.apache.maven.model.building.defaultmodelproblemcollector.getproblems()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.<clinit>()", "org.apache.maven.model.dependency.getmanagementkey()", "org.apache.maven.model.building.modeldata.getversion()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseprofile(xmlpullparser;boolean)", "org.apache.maven.model.buildbase.gettestresources()", "org.apache.maven.model.building.defaultmodelproblemcollector.add(modelproblem)", "org.apache.maven.model.modelbase.setpluginrepositories(list)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserepository(xmlpullparser;boolean)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.prerequisites.setmaven(string)", "org.apache.maven.model.configurationcontainer.unsetinheritanceapplied()", "org.apache.maven.model.configurationcontainer.setinherited(string)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.jdkversionprofileactivator$rangevalue(string;boolean)", "org.apache.maven.model.activation.getjdk()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsebuildbase(xmlpullparser;boolean)", "org.apache.maven.model.activation.activation()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedeploymentrepository(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.abstractstringbasedmodelinterpolator()", "org.apache.maven.model.dependencymanagement.clone()", "org.apache.maven.model.cimanagement.seturl(string)", "org.apache.maven.model.model.model()", "org.apache.maven.model.modelbase.adddependency(dependency)", "org.apache.maven.model.dependencymanagement.getdependencies()", "org.apache.maven.model.activation.getos()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsemodel(xmlpullparser;boolean)", "org.apache.maven.model.reporting.setplugins(list)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$100(rangevalue)", "org.apache.maven.model.model.getcimanagement()", "org.apache.maven.model.dependency.tostring()", "org.apache.maven.model.merge.modelmerger.mergemodel_inceptionyear(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.building.defaultmodelbuilder.getparentpomfile(model)", "org.apache.maven.model.validation.defaultmodelvalidator.addviolation(modelproblemcollector;severity;string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$1.call()", "org.apache.maven.model.notifier.clone()", "org.apache.maven.model.pluginconfiguration.getpluginmanagement()", "org.apache.maven.model.distributionmanagement.getsnapshotrepository()", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.defaultlifecyclebindingsinjector$lifecyclebindingsmerger()", "org.apache.maven.model.pluginmanagement.clone()", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.mergedependency_exclusions(dependency;dependency;boolean;map)", "org.apache.maven.model.reporting.getexcludedefaults()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.isrange(string)", "org.apache.maven.model.reportplugin.clone()", "org.apache.maven.model.scm.geturl()", "org.apache.maven.model.building.filemodelsource.filemodelsource(file)", "org.apache.maven.model.profile.tostring()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getpomfile()", "org.apache.maven.model.merge.modelmerger.mergedependency_type(dependency;dependency;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.getvaluelist()", "org.apache.maven.model.normalization.defaultmodelnormalizer.defaultmodelnormalizer()", "org.apache.maven.model.merge.modelmerger.mergereportplugin_reportsets(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.model.getname()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_licenses(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelprocessor.defaultmodelprocessor()", "org.apache.maven.model.modelbase.getmodules()", "org.apache.maven.model.building.modeldata.modeldata(model;string;string;string)", "org.apache.maven.model.extension.setversion(string)", "org.apache.maven.model.building.defaultmodelproblemcollector.add(severity;string;exception)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_reporting(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergescm(scm;scm;boolean;map)", "org.apache.maven.model.merge.modelmerger.merge(model;model;boolean;map)", "org.apache.maven.model.plugin.getkey()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setinactiveprofileids(list)", "org.apache.maven.model.building.modelcachetag$1.modelcachetag$1()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelresolver()", "org.apache.maven.model.modelbase.modelbase()", "org.apache.maven.model.interpolation.problemdetectingvaluesource.getvalue(string)", "org.apache.maven.model.modelbase.getpluginrepositories()", "org.apache.maven.model.model.getissuemanagement()", "org.apache.maven.model.fileset.fileset()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(xmlpullparser;boolean)", "org.apache.maven.model.pluginmanagement.pluginmanagement()", "org.apache.maven.model.prerequisites.getmaven()", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergesite_name(site;site;boolean;map)", "org.apache.maven.model.model.getartifactid()", "org.apache.maven.model.merge.modelmerger.mergepluginexecution_id(pluginexecution;pluginexecution;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.isqualifiedforinterpolation(class)", "org.apache.maven.model.building.defaultmodelbuildingresult.getproblems()", "org.apache.maven.model.activationproperty.getname()", "org.apache.maven.model.merge.mavenmodelmerger.concatpath(string;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string)", "org.apache.maven.model.validation.defaultmodelvalidator.defaultmodelvalidator()", "org.apache.maven.model.reportplugin.setreportsets(list)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserelocation(xmlpullparser;boolean)", "org.apache.maven.model.merge.mavenmodelmerger.mergescm_connection(scm;scm;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setmodelsource(modelsource)", "org.apache.maven.model.organization.clone()", "org.apache.maven.model.repositorybase.getid()", "org.apache.maven.model.validation.defaultmodelvalidator.hasexpression(string)", "org.apache.maven.model.path.defaultmodelpathtranslator.defaultmodelpathtranslator()", "org.apache.maven.model.exclusion.setartifactid(string)", "org.apache.maven.model.build.getscriptsourcedirectory()", "org.apache.maven.model.model.setcimanagement(cimanagement)", "org.apache.maven.model.building.simpleproblemcollector.geterrors()", "org.apache.maven.model.reportplugin.setversion(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsemailinglist(xmlpullparser;boolean)", "org.apache.maven.model.model.getprofiles()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.building.defaultmodelproblemcollector.hasfatalerrors()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(reader)", "org.apache.maven.model.buildbase.buildbase()", "org.apache.maven.model.model.setname(string)", "org.apache.maven.model.reporting.isexcludedefaults()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.stringsearchmodelinterpolator$interpolateobjectaction(object;list;list;stringsearchmodelinterpolator;modelproblemcollector)", "org.apache.maven.model.developer.developer()", "org.apache.maven.model.merge.modelmerger.mergerepository(repository;repository;boolean;map)", "org.apache.maven.model.build.build()", "org.apache.maven.model.reportset.setid(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseorganization(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$1.abstractstringbasedmodelinterpolator$1(abstractstringbasedmodelinterpolator;boolean;file)", "org.apache.maven.model.extension.setgroupid(string)", "org.apache.maven.model.merge.modelmerger.mergemodel_version(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergerepositorybase_name(repositorybase;repositorybase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.defaultmodelbuilder()", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdependencydefaults(list)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithlistfield.stringsearchmodelinterpolatortest$objectwithlistfield(list)", "org.apache.maven.model.reportset.clone()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldthrowexceptiononrecursivescmconnectionreference()", "org.apache.maven.model.merge.modelmerger.mergecimanagement_url(cimanagement;cimanagement;boolean;map)", "org.apache.maven.model.site.setname(string)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.createmodelbuildingrequest(properties)", "org.apache.maven.model.merge.modelmerger.mergemodel_build(model;model;boolean;map)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.createpostprocessors(model;file;modelbuildingrequest)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.defaultpluginmanagementinjector$managementmodelmerger(1)", "org.apache.maven.model.merge.mavenmodelmerger.mergesite_url(site;site;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelbuildinglistener()", "org.apache.maven.model.cimanagement.cimanagement()", "org.apache.maven.model.merge.modelmerger.mergeparent_version(parent;parent;boolean;map)", "org.apache.maven.model.interpolation.pathtranslatingpostprocessor.execute(string;object)", "org.apache.maven.model.merge.modelmerger.mergereporting(reporting;reporting;boolean;map)", "org.apache.maven.model.model.getprojectdirectory()", "org.apache.maven.model.extension.clone()", "org.apache.maven.model.profile.getid()", "org.apache.maven.model.merge.modelmerger.mergedistributionmanagement_status(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mavenmodelmerger()", "org.apache.maven.model.composition.defaultdependencymanagementimporter.defaultdependencymanagementimporter()", "org.apache.maven.model.building.filemodelsource.getinputstream()", "org.apache.maven.model.plugin.getextensions()", "org.apache.maven.model.modelbase.getdistributionmanagement()", "org.apache.maven.model.scm.setdeveloperconnection(string)", "org.apache.maven.model.io.defaultmodelreader.read(reader;boolean)", "org.apache.maven.model.resource.setfiltering(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(reader;boolean)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_name(model;model;boolean;map)", "org.apache.maven.model.reportplugin.isinherited()", "org.apache.maven.model.model.seturl(string)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergebuildbase(buildbase;buildbase)", "org.apache.maven.model.model.getversion()", "org.apache.maven.model.merge.modelmerger.mergebuild(build;build;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingresult.setrawmodel(string;model)", "org.apache.maven.model.distributionmanagement.setrepository(deploymentrepository)", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.defaultreportconfigurationexpander()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsecimanagement(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.clearfeedback()", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.merge.modelmerger.mergebuildbase(buildbase;buildbase;boolean;map)", "org.apache.maven.model.modelbase.clone()", "org.apache.maven.model.parent.setgroupid(string)", "org.apache.maven.model.plugin.setversion(string)", "org.apache.maven.model.merge.modelmerger.mergedependency_version(dependency;dependency;boolean;map)", "org.apache.maven.model.site.site()", "org.apache.maven.model.buildbase.getresources()", "org.apache.maven.model.activationproperty.setname(string)", "org.apache.maven.model.merge.mavenmodelmerger.getreportsetkey(reportset)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult;collection)", "org.apache.maven.model.merge.modelmerger.mergeparent_artifactid(parent;parent;boolean;map)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.setup()", "org.apache.maven.model.building.defaultmodelbuildingresult.getmodelids()", "org.apache.maven.model.pluginconfiguration.setpluginmanagement(pluginmanagement)", "org.apache.maven.model.plugin.clone()", "org.apache.maven.model.repository.getreleases()", "org.apache.maven.model.merge.modelmerger.mergereportplugin_configuration(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.repositorypolicy.getupdatepolicy()", "org.apache.maven.model.model.setgroupid(string)", "org.apache.maven.model.relocation.setmessage(string)", "org.apache.maven.model.merge.modelmerger.mergeparent(parent;parent;boolean;map)", "org.apache.maven.model.dependency.setartifactid(string)", "org.apache.maven.model.dependency.setscope(string)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(string)", "org.apache.maven.model.interpolation.buildtimestampvaluesource.buildtimestampvaluesource(date;string)", "org.apache.maven.model.modelbase.setproperties(properties)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer_inherited(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergerepositorybase_id(repositorybase;repositorybase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingresult.getactiveexternalprofiles()", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.repositorybase.setname(string)", "org.apache.maven.model.building.simpleproblemcollector$1.<clinit>()", "org.apache.maven.model.building.defaultmodelproblemcollector.getrootmodelid()", "org.apache.maven.model.building.defaultmodelbuildingrequest.istwophasebuilding()", "org.apache.maven.model.repositorypolicy.setupdatepolicy(string)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivationcontext(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuildingresult.getrawmodel(string)", "org.apache.maven.model.building.modelproblemutils.toid(string;string;string)", "org.apache.maven.model.repositorypolicy.clone()", "org.apache.maven.model.building.modelproblemutils.topath(model)", "org.apache.maven.model.scm.getdeveloperconnection()", "org.apache.maven.model.building.abstractmodelbuildinglistener.abstractmodelbuildinglistener()", "org.apache.maven.model.building.modelproblemutils.formatlocation(modelproblem;string)", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector.defaultlifecyclebindingsinjector()", "org.apache.maven.model.pluginmanagementtest.pluginmanagementtest()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.io.defaultmodelreader.defaultmodelreader()", "org.apache.maven.model.merge.modelmerger.mergebuild_extensions(build;build;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergescm_developerconnection(scm;scm;boolean;map)", "org.apache.maven.model.model.setartifactid(string)", "org.apache.maven.model.dependency.setexclusions(list)", "org.apache.maven.model.pluginconfiguration.pluginconfiguration()", "org.apache.maven.model.notifier.settype(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$000()", "org.apache.maven.model.merge.modelmerger.mergedependencymanagement_dependencies(dependencymanagement;dependencymanagement;boolean;map)", "org.apache.maven.model.management.defaultpluginmanagementinjector.injectmanagement(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergereportplugin_groupid(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.management.defaultpluginmanagementinjector.defaultpluginmanagementinjector()", "org.apache.maven.model.building.defaultmodelproblemcollector.haserrors()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.mavenxpp3reader()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.model.building.modelbuildingexception.getmodelid()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmapfield.access$200(objectwithmapfield)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.activation.setproperty(activationproperty)", "org.apache.maven.model.building.defaultmodelbuildingresult.geteffectivemodel()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testbasedir()", "org.apache.maven.model.merge.modelmerger.mergeparent_groupid(parent;parent;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.defaultmodelbuildingrequest()", "org.apache.maven.model.dependency.getoptional()", "org.apache.maven.model.model.setpomfile(file)", "org.apache.maven.model.building.simpleproblemcollector.getwarnings()", "org.apache.maven.model.merge.modelmerger.mergemodel_groupid(model;model;boolean;map)", "org.apache.maven.model.cimanagement.getnotifiers()", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.defaultpluginmanagementinjector$managementmodelmerger()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.plugin.defaultreportingconverter.defaultreportingconverter()", "org.apache.maven.model.model.setversion(string)", "org.apache.maven.model.building.modeldata.getrawmodel()", "org.apache.maven.model.merge.modelmerger.modelmerger()", "org.apache.maven.model.modelbase.setmodules(list)", "org.apache.maven.model.model.tostring()", "org.apache.maven.model.license.setdistribution(string)", "org.apache.maven.model.build.setextensions(list)", "org.apache.maven.model.reporting.setexcludedefaults(string)", "org.apache.maven.model.plugincontainer.addplugin(plugin)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.io.defaultmodelreader.read(inputstream;map)", "org.apache.maven.model.model.getmailinglists()", "org.apache.maven.model.reportset.setreports(list)", "org.apache.maven.model.buildbase.setfilters(list)", "org.apache.maven.model.buildbase.settestresources(list)", "org.apache.maven.model.parent.getartifactid()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseexclusion(xmlpullparser;boolean)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithstringarrayfield.stringsearchmodelinterpolatortest$objectwithstringarrayfield(string[])", "org.apache.maven.model.merge.modelmerger.mergemodelbase_pluginrepositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.getbooleanvalue(string;string;xmlpullparser;string)", "org.apache.maven.model.repository.setreleases(repositorypolicy)", "org.apache.maven.model.mailinglist.clone()", "org.apache.maven.model.buildtest.buildtest()", "org.apache.maven.model.license.getname()", "org.apache.maven.model.plugin.getexecutionsasmap()", "org.apache.maven.model.repositorybase.getlayout()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.newproperties(string;string)", "org.apache.maven.model.deploymentrepository.clone()", "org.apache.maven.model.merge.modelmerger.mergeplugin_extensions(plugin;plugin;boolean;map)", "org.apache.maven.model.model.getpomfile()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_modules(modelbase;modelbase;boolean;map)", "org.apache.maven.model.plugin.defaultreportingconverter.findsiteplugin(build)", "org.apache.maven.model.dependency.getsystempath()", "org.apache.maven.model.building.defaultmodelbuilder.getcache(modelcache;string;string;string;modelcachetag)", "org.apache.maven.model.model.getid()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.getfields(class)", "org.apache.maven.model.building.defaultmodelproblem.getseverity()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testexpressionthatevaluatestonullreturnstheliteralstring()", "org.apache.maven.model.repositorybase.setlayout(string)", "org.apache.maven.model.modelbase.addproperty(string;string)", "org.apache.maven.model.modelbase.addrepository(repository)", "org.apache.maven.model.deploymentrepository.setuniqueversion(boolean)", "org.apache.maven.model.normalization.defaultmodelnormalizer.mergeduplicates(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.setdevelopers(list)", "org.apache.maven.model.building.modeldata.modeldata(model)", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.defaultdependencymanagementinjector$managementmodelmerger()", "org.apache.maven.model.relocation.clone()", "org.apache.maven.model.reportplugin.setgroupid(string)", "org.apache.maven.model.repositorybase.repositorybase()", "org.apache.maven.model.dependency.getversion()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.modelbase.getreporting()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$1.getvalue(string)", "org.apache.maven.model.license.license()", "org.apache.maven.model.organization.getname()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsescm(xmlpullparser;boolean)", "org.apache.maven.model.distributionmanagement.distributionmanagement()", "org.apache.maven.model.merge.modelmerger.mergereporting_excludedefaults(reporting;reporting;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseprerequisites(xmlpullparser;boolean)", "org.apache.maven.model.merge.modelmerger.mergerepository_releases(repository;repository;boolean;map)", "org.apache.maven.model.repositorypolicy.setenabled(boolean)", "org.apache.maven.model.merge.modelmerger.mergereportplugin_version(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.inheritance.defaultinheritanceassembler.defaultinheritanceassembler()", "org.apache.maven.model.modelbase.getproperties()", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector.injectlifecyclebindings(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.modelbuildingexception.tomessage(string;list)", "org.apache.maven.model.plugincontainer.plugincontainer()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsebuild(xmlpullparser;boolean)", "org.apache.maven.model.merge.modelmerger.mergepluginexecution_phase(pluginexecution;pluginexecution;boolean;map)", "org.apache.maven.model.resource.resource()", "org.apache.maven.model.modelbase.setrepositories(list)", "org.apache.maven.model.normalization.defaultmodelnormalizer$duplicatemerger.defaultmodelnormalizer$duplicatemerger()", "org.apache.maven.model.merge.modelmerger.mergerepositorybase_layout(repositorybase;repositorybase;boolean;map)", "org.apache.maven.model.buildbase.setfinalname(string)", "org.apache.maven.model.modelbase.getdependencies()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsesite(xmlpullparser;boolean)", "org.apache.maven.model.configurationcontainer.configurationcontainer()", "org.apache.maven.model.building.modeldata.getartifactid()", "org.apache.maven.model.building.modelbuildingexception.modelbuildingexception(model;string;list)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_organization(model;model;boolean;map)", "org.apache.maven.model.dependency.getartifactid()", "org.apache.maven.model.inheritance.defaultinheritanceassembler.assemblemodelinheritance(model;model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.setscm(scm)", "org.apache.maven.model.building.simpleproblemcollector.getfatals()", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(string)", "org.apache.maven.model.deploymentrepository.isuniqueversion()", "org.apache.maven.model.pluginexecutiontest.pluginexecutiontest()", "org.apache.maven.model.reporting.setoutputdirectory(string)", "org.apache.maven.model.merge.modelmerger.mergeplugin_artifactid(plugin;plugin;boolean;map)", "org.apache.maven.model.building.modelproblem$severity.modelproblem$severity(string;int)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setpomfile(file)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_defaultgoal(buildbase;buildbase;boolean;map)", "org.apache.maven.model.distributionmanagement.setrelocation(relocation)", "org.apache.maven.model.merge.modelmerger.mergeorganization_url(organization;organization;boolean;map)", "org.apache.maven.model.organization.setname(string)", "org.apache.maven.model.profile.setsource(string)", "org.apache.maven.model.plugincontainer.flushpluginmap()", "org.apache.maven.model.repositorypolicy.getchecksumpolicy()", "org.apache.maven.model.merge.mavenmodelmerger.mergepluginexecution_goals(pluginexecution;pluginexecution;boolean;map)", "org.apache.maven.model.resource.clone()", "org.apache.maven.model.merge.modelmerger.mergebuild_sourcedirectory(build;build;boolean;map)", "org.apache.maven.model.plugin.defaultreportingconverter.convert(reportset)", "org.apache.maven.model.resource.getfiltering()", "org.apache.maven.model.merge.mavenmodelmerger.getextensionkey(extension)", "org.apache.maven.model.building.modelproblemutils.tosourcehint(model)", "org.apache.maven.model.building.modeldata.setgroupid(string)", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.merge.mavenmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer_configuration(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.build.getoutputdirectory()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldnotthrowexceptiononreferencetononexistentvalue()", "org.apache.maven.model.model.getpackaging()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getvalidationlevel()", "org.apache.maven.model.model.getprerequisites()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$1.stringsearchmodelinterpolatortest$1(stringsearchmodelinterpolatortest;properties;countdownlatch;stringsearchmodelinterpolator;model)", "org.apache.maven.model.activation.setjdk(string)", "org.apache.maven.model.validation.defaultmodelvalidatortest.teardown()", "org.apache.maven.model.plugin.tostring()", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergereportplugin_artifactid(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.contributor.setorganization(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.defaultmodelbuildingresult()", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.stringsearchmodelinterpolatortest()", "org.apache.maven.model.distributionmanagement.setsnapshotrepository(deploymentrepository)", "org.apache.maven.model.merge.modelmerger.mergebuild_testoutputdirectory(build;build;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_contributors(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_finalname(buildbase;buildbase;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepository(modelproblemcollector;repository;string;modelbuildingrequest)", "org.apache.maven.model.building.modeldata.setartifactid(string)", "org.apache.maven.model.reportplugin.getkey()", "org.apache.maven.model.building.defaultmodelprocessor.read(inputstream;map)", "org.apache.maven.model.profile.defaultprofileinjector.injectprofile(model;profile;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.superpom.defaultsuperpomprovider.defaultsuperpomprovider()", "org.apache.maven.model.configurationcontainer.setconfiguration(object)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testenvarexpressionthatevaluatestonullreturnstheliteralstring()", "org.apache.maven.model.pluginexecution.addgoal(string)", "org.apache.maven.model.build.getsourcedirectory()", "org.apache.maven.model.pluginexecution.setphase(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.evaluatearray(object)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.getrelationorder(string;rangevalue;boolean)", "org.apache.maven.model.merge.modelmerger.mergereportplugin_inherited(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.profile.profile()", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.mergemanageddependencies(model)", "org.apache.maven.model.mailinglist.setname(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsepluginexecution(xmlpullparser;boolean)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedependencymanagement(xmlpullparser;boolean)", "org.apache.maven.model.repository.getsnapshots()", "org.apache.maven.model.distributionmanagement.setstatus(string)", "org.apache.maven.model.plugincontainer.getplugins()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_cimanagement(model;model;boolean;map)", "org.apache.maven.model.modelbase.addpluginrepository(repository)", "org.apache.maven.model.license.seturl(string)", "org.apache.maven.model.build.clone()", "org.apache.maven.model.extension.getartifactid()", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;string;string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsedeveloper(xmlpullparser;boolean)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(model;file;modelbuildingrequest)", "org.apache.maven.model.management.defaultdependencymanagementinjector.injectmanagement(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.modelbase.getdependencymanagement()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.stringsearchmodelinterpolator()", "org.apache.maven.model.buildbase.setdirectory(string)", "org.apache.maven.model.plugincontainertest.plugincontainertest()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testenvars()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_repositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.modelbase.setdistributionmanagement(distributionmanagement)", "org.apache.maven.model.modeltest.modeltest()", "org.apache.maven.model.pluginconfigurationtest.pluginconfigurationtest()", "org.apache.maven.model.prerequisites.clone()", "org.apache.maven.model.patternset.clone()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testbaseuri()", "org.apache.maven.model.building.modelproblemutils.toid(model)", "org.apache.maven.model.validation.defaultmodelvalidatortest.validateraw(string)", "org.apache.maven.model.cimanagement.setsystem(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_url(model;model;boolean;map)", "org.apache.maven.model.repositorybase.seturl(string)", "org.apache.maven.model.normalization.defaultmodelnormalizer$duplicatemerger.defaultmodelnormalizer$duplicatemerger(1)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newproperties(string)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator.interpolateinternal(string;list;list;modelproblemcollector)", "org.apache.maven.model.model.setprofiles(list)", "org.apache.maven.model.reporting.reporting()", "org.apache.maven.model.cimanagement.clone()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivationproperty(xmlpullparser;boolean)", "org.apache.maven.model.path.defaulturlnormalizer.normalize(string)", "org.apache.maven.model.dependency.setversion(string)", "org.apache.maven.model.merge.modelmerger.mergecimanagement(cimanagement;cimanagement;boolean;map)", "org.apache.maven.model.distributionmanagement.setdownloadurl(string)", "org.apache.maven.model.modelbase.setdependencymanagement(dependencymanagement)", "org.apache.maven.model.merge.modelmerger.mergeissuemanagement_system(issuemanagement;issuemanagement;boolean;map)", "org.apache.maven.model.building.modelbuildingeventcatapult$1.fire(modelbuildinglistener;modelbuildingevent)", "org.apache.maven.model.model.setmailinglists(list)", "org.apache.maven.model.parent.getversion()", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawdependencies(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_profiles(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.organization.organization()", "org.apache.maven.model.building.defaultmodelproblemcollector.defaultmodelproblemcollector(list)", "org.apache.maven.model.plugin.setexecutions(list)", "org.apache.maven.model.merge.modelmerger.mergeorganization(organization;organization;boolean;map)", "org.apache.maven.model.extension.getgroupid()", "org.apache.maven.model.site.geturl()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$3.abstractstringbasedmodelinterpolator$3(abstractstringbasedmodelinterpolator;boolean;modelbuildingrequest)", "org.apache.maven.model.plugin.isextensions()", "org.apache.maven.model.modelbase.setdependencies(list)", "org.apache.maven.model.merge.mavenmodelmerger.getreportpluginkey(reportplugin)", "org.apache.maven.model.reportplugin.setconfiguration(object)", "org.apache.maven.model.profile.getsource()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldnotinterpolatedependencyversionwithinvalidreference()", "org.apache.maven.model.model.getscm()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setsystemproperties(properties)", "org.apache.maven.model.buildbase.setdefaultgoal(string)", "org.apache.maven.model.building.modeldata.getmodel()", "org.apache.maven.model.reportplugin.getgroupid()", "org.apache.maven.model.building.modeldata.getgroupid()", "org.apache.maven.model.model.getlicenses()", "org.apache.maven.model.building.defaultmodelbuildingresult.setactivepomprofiles(string;list)", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.activation.getproperty()", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.merge(model;model)", "org.apache.maven.model.building.defaultmodelproblem.getmodelid()", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdefaultvalues(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.defaultinheritanceassembler$inheritancemodelmerger()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_developers(model;model;boolean;map)", "org.apache.maven.model.plugin.constructkey(string;string)", "org.apache.maven.model.building.defaultmodelbuildingresult.getrawmodel()", "org.apache.maven.model.plugin.flushexecutionmap()", "org.apache.maven.model.notifier.setsendonsuccess(boolean)", "org.apache.maven.model.merge.mavenmodelmerger.mergedistributionmanagement_snapshotrepository(distributionmanagement;distributionmanagement;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergecimanagement_notifiers(cimanagement;cimanagement;boolean;map)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger(1)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolatesourcedirectoryreferencedfromresourcedirectorycorrectly()", "org.apache.maven.model.developer.clone()", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string)", "org.apache.maven.model.site.clone()", "org.apache.maven.model.merge.modelmerger.mergereporting_outputdirectory(reporting;reporting;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getuserproperties()", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.testshouldinterpolatedependencyversiontosetsameasprojectversion()", "org.apache.maven.model.building.defaultmodelbuilder.assembleinheritance(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.build.gettestsourcedirectory()", "org.apache.maven.model.plugin.defaultlifecyclebindingsinjector$lifecyclebindingsmerger.defaultlifecyclebindingsinjector$lifecyclebindingsmerger(1)", "org.apache.maven.model.reportset.getreports()", "org.apache.maven.model.merge.modelmerger.mergedependency_systempath(dependency;dependency;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelcache()", "org.apache.maven.model.building.modeldata.getid()", "org.apache.maven.model.fileset.getdirectory()", "org.apache.maven.model.merge.modelmerger.mergerepositorybase(repositorybase;repositorybase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.checkpluginversions(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.reportset.reportset()", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_prerequisites(model;model;boolean;map)", "org.apache.maven.model.buildbase.getdirectory()", "org.apache.maven.model.plugin.adddependency(dependency)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setmodelresolver(modelresolver)", "org.apache.maven.model.inheritance.defaultinheritanceassembler.getchildpathadjustment(model;model)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseissuemanagement(xmlpullparser;boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawplugins(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.reportplugin.getinherited()", "org.apache.maven.model.pluginexecution.setgoals(list)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterepositories(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.plugin.setdependencies(list)", "org.apache.maven.model.building.defaultmodelbuilder.interpolatemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expand(list)", "org.apache.maven.model.building.modelbuildingeventcatapult$1.modelbuildingeventcatapult$1()", "org.apache.maven.model.cimanagement.geturl()", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(modelbuildingrequest;int)", "org.apache.maven.model.merge.modelmerger.mergeorganization_name(organization;organization;boolean;map)", "org.apache.maven.model.contributor.setname(string)", "org.apache.maven.model.notifier.notifier()", "org.apache.maven.model.repository.repository()", "org.apache.maven.model.plugin.addexecution(pluginexecution)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprofiles(list)", "org.apache.maven.model.merge.modelmerger.mergeissuemanagement(issuemanagement;issuemanagement;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$classwithfinalfield.stringsearchmodelinterpolatortest$classwithfinalfield()", "org.apache.maven.model.validation.defaultmodelvalidator.addviolation(modelproblemcollector;severity;string;string;string)", "org.apache.maven.model.plugin.defaultreportingconverter.convertreporting(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.plugintest.plugintest()", "org.apache.maven.model.repositorybase.setid(string)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_dependencymanagement(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergecimanagement_system(cimanagement;cimanagement;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergescm_url(scm;scm;boolean;map)", "org.apache.maven.model.activationproperty.clone()", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.newprofile(string)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult)", "org.apache.maven.model.model.getgroupid()", "org.apache.maven.model.validation.defaultmodelvalidatortest.defaultmodelvalidatortest()", "org.apache.maven.model.merge.modelmerger.mergemodel_description(model;model;boolean;map)", "org.apache.maven.model.model.setorganization(organization)", "org.apache.maven.model.repositorypolicy.isenabled()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getactiveprofileids()", "org.apache.maven.model.merge.modelmerger.mergemodelbase(modelbase;modelbase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.readparent(model;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.modeldata.setversion(string)", "org.apache.maven.model.profile.setid(string)", "org.apache.maven.model.dependency.setsystempath(string)", "org.apache.maven.model.build.setscriptsourcedirectory(string)", "org.apache.maven.model.cimanagement.setnotifiers(list)", "org.apache.maven.model.merge.modelmerger.mergedependency_groupid(dependency;dependency;boolean;map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator$rangevalue.access$000(rangevalue)", "org.apache.maven.model.issuemanagement.issuemanagement()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseresource(xmlpullparser;boolean)", "org.apache.maven.model.pluginexecution.pluginexecution()", "org.apache.maven.model.prerequisites.prerequisites()", "org.apache.maven.model.building.simpleproblemcollector.simpleproblemcollector()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$2.getvalue(string)", "org.apache.maven.model.model.setparent(parent)", "org.apache.maven.model.fileset.clone()", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergeplugin(plugin;plugin;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.access$400(stringsearchmodelinterpolatortest;properties)", "org.apache.maven.model.merge.mavenmodelmerger.getdependencykey(dependency)", "org.apache.maven.model.reportplugin.reportplugin()", "org.apache.maven.model.path.defaulturlnormalizertest.defaulturlnormalizertest()", "org.apache.maven.model.notifier.setsendonerror(boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependencies(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmixedprotection.stringsearchmodelinterpolatortest$objectwithmixedprotection(list;list;list;string)", "org.apache.maven.model.merge.mavenmodelmerger.getpluginexecutionkey(pluginexecution)", "org.apache.maven.model.merge.modelmerger.mergeplugincontainer(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_issuemanagement(model;model;boolean;map)", "org.apache.maven.model.plugincontainer.clone()", "org.apache.maven.model.path.defaulturlnormalizer.defaulturlnormalizer()", "org.apache.maven.model.plugin.getversion()", "org.apache.maven.model.profile.setbuild(buildbase)", "org.apache.maven.model.reportset.getid()", "org.apache.maven.model.scm.scm()", "org.apache.maven.model.merge.modelmerger.mergeplugin_version(plugin;plugin;boolean;map)", "org.apache.maven.model.dependency.setgroupid(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithmixedprotection.stringsearchmodelinterpolatortest$objectwithmixedprotection(list;list;list;string;1)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest$objectwithlistfield.access$100(objectwithlistfield)", "org.apache.maven.model.building.defaultmodelbuildingresult.seteffectivemodel(model)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidatortest.setup()", "org.apache.maven.model.dependency.gettype()", "org.apache.maven.model.organization.seturl(string)", "org.apache.maven.model.extension.extension()", "org.apache.maven.model.parent.setrelativepath(string)", "org.apache.maven.model.contributor.clone()", "org.apache.maven.model.notifier.addconfiguration(string;string)", "org.apache.maven.model.activation.clone()", "org.apache.maven.model.license.clone()", "org.apache.maven.model.building.defaultmodelproblemcollector.getmodelid()", "org.apache.maven.model.modelbase.getrepositories()", "org.apache.maven.model.notifier.setsendonfailure(boolean)"]}, "mavenartifactrepository": {"distance": 0.9383, "methods": ["org.apache.maven.artifact.repository.mavenartifactrepository.geturl()", "org.apache.maven.artifact.repository.mavenartifactrepository.decode(string)", "org.apache.maven.artifact.repository.mavenartifactrepository.protocol(string)", "org.apache.maven.artifact.repository.mavenartifactrepository.getlayout()", "org.apache.maven.artifact.repository.mavenartifactrepository.find(artifact)", "org.apache.maven.artifact.repository.mavenartifactrepository.pathof(artifact)", "org.apache.maven.artifact.repository.mavenartifactrepository.mavenartifactrepository()", "org.apache.maven.artifact.repository.mavenartifactrepository.getprotocol()", "org.apache.maven.artifact.repository.mavenartifactrepository.getid()", "org.apache.maven.artifact.repository.mavenartifactrepository.hashcode()", "org.apache.maven.artifact.repository.mavenartifactrepository.basedir(string)", "org.apache.maven.artifact.repository.mavenartifactrepository.getbasedir()", "org.apache.maven.artifact.repository.mavenartifactrepository.mavenartifactrepository(string;string;artifactrepositorylayout;artifactrepositorypolicy;artifactrepositorypolicy)", "org.apache.maven.artifact.repository.mavenartifactrepository.getreleases()", "org.apache.maven.artifact.repository.mavenartifactrepository.getauthentication()", "org.apache.maven.artifact.repository.mavenartifactrepository.setauthentication(authentication)", "org.apache.maven.artifact.repository.mavenartifactrepository.setproxy(proxy)", "org.apache.maven.artifact.repository.mavenartifactrepository.getsnapshots()", "org.apache.maven.artifact.repository.mavenartifactrepository.getproxy()"]}, "mojoexecutor": {"distance": 2.0, "methods": ["org.apache.maven.lifecycle.internal.mojoexecutor.mojoexecutor()"]}}