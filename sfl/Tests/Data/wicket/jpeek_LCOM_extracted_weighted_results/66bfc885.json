{"abstractbookmarkablemapper": {"distance": 0.9706, "methods": ["org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.processbookmarkable(class;pageparameters)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.abstractbookmarkablemapper()", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.checkpageinstance(irequestablepage)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.maprequest(request)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.getpageinfo(ipagerequesthandler)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.checkpageclass(class)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper.<clinit>()"]}, "basicresourcereferencemapper": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.mapper.basicresourcereferencemapper.resolveclass(string)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.getclassname(class)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.getcachingstrategy()", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.maprequest(request)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.getcompatibilityscore(request)", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.<clinit>()", "org.apache.wicket.core.request.mapper.basicresourcereferencemapper.basicresourcereferencemapper(ipageparametersencoder;iprovider)"]}, "mountedmapper": {"distance": 1.1111, "methods": ["org.apache.wicket.core.request.mapper.mountedmapper.checkpageclass(class)", "org.apache.wicket.core.request.mapper.mountedmapper.redirectfromhomepage()", "org.apache.wicket.core.request.mapper.mountedmapper.isfixedsegment(string)", "org.apache.wicket.core.request.mapper.mountedmapper.mountedmapper(string;classprovider)", "org.apache.wicket.core.request.mapper.mountedmapper.buildurl(urlinfo)", "org.apache.wicket.core.request.mapper.mountedmapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.mountedmapper.getrecreatemountedpagesafterexpiry()", "org.apache.wicket.core.request.mapper.mountedmapper.mountedmapper(string;class)", "org.apache.wicket.core.request.mapper.mountedmapper.getcompatibilityscore(request)", "org.apache.wicket.core.request.mapper.mountedmapper.mountedmapper(string;classprovider;ipageparametersencoder)", "org.apache.wicket.core.request.mapper.mountedmapper.extractpageparameters(request;url)", "org.apache.wicket.core.request.mapper.mountedmapper.checkhomepage(url)", "org.apache.wicket.core.request.mapper.mountedmapper.urlstartswith(url;string[])", "org.apache.wicket.core.request.mapper.mountedmapper.mountedmapper(string;class;ipageparametersencoder)", "org.apache.wicket.core.request.mapper.mountedmapper.getmatchedsegmentsizes(url)", "org.apache.wicket.core.request.mapper.mountedmapper.getpageclass()", "org.apache.wicket.core.request.mapper.mountedmapper.parserequest(request)", "org.apache.wicket.core.request.mapper.mountedmapper.getpathsegments(string[])"]}, "cryptomapper$hashedsegmentgenerator": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.mapper.cryptomapper$hashedsegmentgenerator.cryptomapper$hashedsegmentgenerator(string)", "org.apache.wicket.core.request.mapper.cryptomapper$hashedsegmentgenerator.next()", "org.apache.wicket.core.request.mapper.cryptomapper$hashedsegmentgenerator.hashstring(string)"]}, "abstractbookmarkablemapper$urlinfo": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.getpagecomponentinfo()", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.abstractbookmarkablemapper$urlinfo(pagecomponentinfo;class;pageparameters)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.getpageclass()", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.cleanpageparameters(pageparameters)", "org.apache.wicket.core.request.mapper.abstractbookmarkablemapper$urlinfo.getpageparameters()"]}, "cryptomapper": {"distance": 0.8333, "methods": ["org.apache.wicket.core.request.mapper.cryptomapper.decrypturl(request;url)", "org.apache.wicket.core.request.mapper.cryptomapper.maphandler(irequesthandler)", "org.apache.wicket.core.request.mapper.cryptomapper.cryptomapper(irequestmapper;application)", "org.apache.wicket.core.request.mapper.cryptomapper.encrypturl(url)", "org.apache.wicket.core.request.mapper.cryptomapper.maprequest(request)", "org.apache.wicket.core.request.mapper.cryptomapper.cryptomapper(irequestmapper;iprovider)", "org.apache.wicket.core.request.mapper.cryptomapper.<clinit>()", "org.apache.wicket.core.request.mapper.cryptomapper.getcrypt()"]}, "abstractresource$resourceresponse": {"distance": 0.9544, "methods": ["org.apache.wicket.request.resource.abstractresource$resourceresponse.setcachedurationtomaximum()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.seterror(integer)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.abstractresource$resourceresponse()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcontentlength()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcontentdisposition(contentdisposition)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcacheduration()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.seterror(integer;string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.geterrormessage()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getlastmodified()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcontenttype()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getfilename()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getstatuscode()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcontentlength(long)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getwritecallback()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.dataneedstobewritten(attributes)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.gettextencoding()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcontenttype(string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcontentdisposition()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcachescope()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.settextencoding(string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setlastmodified(time)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setfilename(string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setwritecallback(writecallback)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getheaders()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.geterrorcode()"]}, "contextrelativeresource": {"distance": 0.9333, "methods": ["org.apache.wicket.request.resource.contextrelativeresource.equals(object)", "org.apache.wicket.request.resource.contextrelativeresource.iscachingenabled()", "org.apache.wicket.request.resource.contextrelativeresource.contextrelativeresource(string)", "org.apache.wicket.request.resource.contextrelativeresource.<clinit>()"]}, "csspackageresource": {"distance": 1.5, "methods": ["org.apache.wicket.request.resource.csspackageresource.csspackageresource(class;string;locale;string;string)", "org.apache.wicket.request.resource.csspackageresource.getcompressor()", "org.apache.wicket.request.resource.csspackageresource.processresponse(attributes;byte[])", "org.apache.wicket.request.resource.csspackageresource.<clinit>()"]}, "abstractresource": {"distance": 1.25, "methods": ["org.apache.wicket.request.resource.abstractresource.flushresponseafterheaders(webresponse)", "org.apache.wicket.request.resource.abstractresource.abstractresource()", "org.apache.wicket.request.resource.abstractresource.setresponseheaders(resourceresponse;attributes)", "org.apache.wicket.request.resource.abstractresource.respond(attributes)", "org.apache.wicket.request.resource.abstractresource.configurecache(resourceresponse;attributes)", "org.apache.wicket.request.resource.abstractresource.<clinit>()", "org.apache.wicket.request.resource.abstractresource.getcachingstrategy()"]}, "dynamicimageresource": {"distance": 0.8889, "methods": ["org.apache.wicket.request.resource.dynamicimageresource.getformat()", "org.apache.wicket.request.resource.dynamicimageresource.toimagedata(bufferedimage)", "org.apache.wicket.request.resource.dynamicimageresource.configureresponse(resourceresponse;attributes)", "org.apache.wicket.request.resource.dynamicimageresource.dynamicimageresource(string)", "org.apache.wicket.request.resource.dynamicimageresource.setlastmodifiedtime(time)", "org.apache.wicket.request.resource.dynamicimageresource.dynamicimageresource()", "org.apache.wicket.request.resource.dynamicimageresource.newresourceresponse(attributes)", "org.apache.wicket.request.resource.dynamicimageresource.setformat(string)"]}, "bytearrayresource": {"distance": 1.1, "methods": ["org.apache.wicket.request.resource.bytearrayresource.getdata(attributes)", "org.apache.wicket.request.resource.bytearrayresource.bytearrayresource(string;byte[];string)", "org.apache.wicket.request.resource.bytearrayresource.newresourceresponse(attributes)", "org.apache.wicket.request.resource.bytearrayresource.bytearrayresource(string)", "org.apache.wicket.request.resource.bytearrayresource.bytearrayresource(string;byte[])", "org.apache.wicket.request.resource.bytearrayresource.configureresponse(resourceresponse;attributes)"]}, "resourcestreamresource": {"distance": 0.9286, "methods": ["org.apache.wicket.request.resource.resourcestreamresource.resourcestreamresource(iresourcestream)", "org.apache.wicket.request.resource.resourcestreamresource.<clinit>()", "org.apache.wicket.request.resource.resourcestreamresource.newresourceresponse(attributes)", "org.apache.wicket.request.resource.resourcestreamresource.close(iresourcestream)", "org.apache.wicket.request.resource.resourcestreamresource.access$000(resourcestreamresource;iresourcestream)", "org.apache.wicket.request.resource.resourcestreamresource.setcontentdisposition(contentdisposition)", "org.apache.wicket.request.resource.resourcestreamresource.setfilename(string)", "org.apache.wicket.request.resource.resourcestreamresource.getresourcestream()", "org.apache.wicket.request.resource.resourcestreamresource.internalgetresourcestream()"]}, "packageresourcereference": {"distance": 1.1071, "methods": ["org.apache.wicket.request.resource.packageresourcereference.getcurrentlocale()", "org.apache.wicket.request.resource.packageresourcereference.getcurrentstyle()", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(key)", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(class;string;locale;string;string)", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(class;string)", "org.apache.wicket.request.resource.packageresourcereference.geturlattributes()", "org.apache.wicket.request.resource.packageresourcereference.getname()", "org.apache.wicket.request.resource.packageresourcereference.<clinit>()", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(string)", "org.apache.wicket.request.resource.packageresourcereference.getresource()", "org.apache.wicket.request.resource.packageresourcereference.geturlattributes(locale;string;string)"]}, "iresource$attributes": {"distance": 1.0, "methods": ["org.apache.wicket.request.resource.iresource$attributes.iresource$attributes(request;response)", "org.apache.wicket.request.resource.iresource$attributes.getparameters()", "org.apache.wicket.request.resource.iresource$attributes.getresponse()", "org.apache.wicket.request.resource.iresource$attributes.iresource$attributes(request;response;pageparameters)", "org.apache.wicket.request.resource.iresource$attributes.getrequest()"]}, "resourcereferenceregistry": {"distance": 0.9444, "methods": ["org.apache.wicket.request.resource.resourcereferenceregistry.resourcereferenceregistry()", "org.apache.wicket.request.resource.resourcereferenceregistry.getresourcereference(class;string;locale;string;string;boolean;boolean)", "org.apache.wicket.request.resource.resourcereferenceregistry.registerresourcereference(resourcereference)", "org.apache.wicket.request.resource.resourcereferenceregistry.setautoaddedcapacity(int)", "org.apache.wicket.request.resource.resourcereferenceregistry.getautoaddedcapacity()", "org.apache.wicket.request.resource.resourcereferenceregistry._getresourcereference(string;string;locale;string;string;boolean)", "org.apache.wicket.request.resource.resourcereferenceregistry.getresourcereference(key;boolean;boolean)", "org.apache.wicket.request.resource.resourcereferenceregistry.createdefaultresourcereference(key)", "org.apache.wicket.request.resource.resourcereferenceregistry.adddefaultresourcereference(key)", "org.apache.wicket.request.resource.resourcereferenceregistry._registerresourcereference(resourcereference)", "org.apache.wicket.request.resource.resourcereferenceregistry.<clinit>()", "org.apache.wicket.request.resource.resourcereferenceregistry.enforceautoaddedcachesize(int)"]}, "javascriptpackageresource": {"distance": 1.5, "methods": ["org.apache.wicket.request.resource.javascriptpackageresource.javascriptpackageresource(class;string;locale;string;string)", "org.apache.wicket.request.resource.javascriptpackageresource.getcompressor()", "org.apache.wicket.request.resource.javascriptpackageresource.<clinit>()", "org.apache.wicket.request.resource.javascriptpackageresource.processresponse(attributes;byte[])"]}, "sharedresourcereference": {"distance": 2.0, "methods": ["org.apache.wicket.request.resource.sharedresourcereference.sharedresourcereference(string)", "org.apache.wicket.request.resource.sharedresourcereference.canberegistered()", "org.apache.wicket.request.resource.sharedresourcereference.getresource()"]}, "metainfstaticresourcereference": {"distance": 1.5, "methods": ["org.apache.wicket.request.resource.metainfstaticresourcereference.<clinit>()", "org.apache.wicket.request.resource.metainfstaticresourcereference.maphandler(irequesthandler)", "org.apache.wicket.request.resource.metainfstaticresourcereference.ismetainfresourcessupported()", "org.apache.wicket.request.resource.metainfstaticresourcereference.metainfstaticresourcereference(class;string)"]}, "packageresource": {"distance": 0.893, "methods": ["org.apache.wicket.request.resource.packageresource.iscachingenabled()", "org.apache.wicket.request.resource.packageresource.newresourceresponse(attributes)", "org.apache.wicket.request.resource.packageresource.getresourcestream()", "org.apache.wicket.request.resource.packageresource.exists(class;string;locale;string;string)", "org.apache.wicket.request.resource.packageresource.setcompress(boolean)", "org.apache.wicket.request.resource.packageresource.getparentfolderplaceholder()", "org.apache.wicket.request.resource.packageresource.gettextencoding()", "org.apache.wicket.request.resource.packageresource.<clinit>()", "org.apache.wicket.request.resource.packageresource.getcompress()", "org.apache.wicket.request.resource.packageresource.accept(class;string)", "org.apache.wicket.request.resource.packageresource.settextencoding(string)", "org.apache.wicket.request.resource.packageresource.processresponse(attributes;byte[])", "org.apache.wicket.request.resource.packageresource.getscope()", "org.apache.wicket.request.resource.packageresource.packageresource(class;string;locale;string;string)", "org.apache.wicket.request.resource.packageresource.internalgetresourcestream(string;locale)"]}, "headerbufferingwebresponse": {"distance": 0.8772, "methods": ["org.apache.wicket.protocol.http.headerbufferingwebresponse.addheader(string;string)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.setcontentlength(long)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.setdateheader(string;time)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.setstatus(int)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.flush()", "org.apache.wicket.protocol.http.headerbufferingwebresponse.headerbufferingwebresponse(webresponse)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.writemetadata(webresponse)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.setheader(string;string)", "org.apache.wicket.protocol.http.headerbufferingwebresponse.checkheader()"]}, "requestloggerrequestcyclelistener": {"distance": 1.0, "methods": ["org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onrequesthandlerresolved(requestcycle;irequesthandler)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onrequesthandlerscheduled(requestcycle;irequesthandler)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onbeginrequest(requestcycle)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.isrequestloggingenabled()", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onendrequest(requestcycle)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.onexceptionrequesthandlerresolved(requestcycle;irequesthandler;exception)", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.requestloggerrequestcyclelistener()", "org.apache.wicket.protocol.http.requestloggerrequestcyclelistener.<clinit>()"]}, "websession": {"distance": 1.25, "methods": ["org.apache.wicket.protocol.http.websession.websession(request)", "org.apache.wicket.protocol.http.websession.<clinit>()", "org.apache.wicket.protocol.http.websession.getclientinfo()"]}, "webapplication": {"distance": 0.9775, "methods": ["org.apache.wicket.protocol.http.webapplication.hasfilterfactorymanager()", "org.apache.wicket.protocol.http.webapplication.newwebresponse(webrequest;httpservletresponse)", "org.apache.wicket.protocol.http.webapplication.newsession(request;response)", "org.apache.wicket.protocol.http.webapplication.setservletcontext(servletcontext)", "org.apache.wicket.protocol.http.webapplication.logstarted()", "org.apache.wicket.protocol.http.webapplication.createwebrequest(httpservletrequest;string)", "org.apache.wicket.protocol.http.webapplication.getandremovebufferedresponse(string;url)", "org.apache.wicket.protocol.http.webapplication.getajaxrequesttargetlisteners()", "org.apache.wicket.protocol.http.webapplication.outputdevelopmentmodewarning()", "org.apache.wicket.protocol.http.webapplication.init()", "org.apache.wicket.protocol.http.webapplication.getservletcontext()", "org.apache.wicket.protocol.http.webapplication.mountpage(string;class)", "org.apache.wicket.protocol.http.webapplication.getsessionattributeprefix(webrequest;string)", "org.apache.wicket.protocol.http.webapplication.get()", "org.apache.wicket.protocol.http.webapplication.setwicketfilter(wicketfilter)", "org.apache.wicket.protocol.http.webapplication.internaldestroy()", "org.apache.wicket.protocol.http.webapplication.newwebrequest(httpservletrequest;string)", "org.apache.wicket.protocol.http.webapplication.hasbufferedresponse(string;url)", "org.apache.wicket.protocol.http.webapplication.mount(irequestmapper)", "org.apache.wicket.protocol.http.webapplication.mountresource(string;resourcereference)", "org.apache.wicket.protocol.http.webapplication.setajaxrequesttargetprovider(icontextprovider)", "org.apache.wicket.protocol.http.webapplication.getwicketfilter()", "org.apache.wicket.protocol.http.webapplication.createwebresponse(webrequest;httpservletresponse)", "org.apache.wicket.protocol.http.webapplication.<clinit>()", "org.apache.wicket.protocol.http.webapplication.webapplication()", "org.apache.wicket.protocol.http.webapplication.getapplicationkey()", "org.apache.wicket.protocol.http.webapplication.getmimetype(string)", "org.apache.wicket.protocol.http.webapplication.internalinit()"]}, "storedresponsesmap": {"distance": 1.0, "methods": ["org.apache.wicket.protocol.http.storedresponsesmap.storedresponsesmap(int;duration)", "org.apache.wicket.protocol.http.storedresponsesmap.remove(object)"]}, "wicketfilter": {"distance": 0.9572, "methods": ["org.apache.wicket.protocol.http.wicketfilter.getclassloader()", "org.apache.wicket.protocol.http.wicketfilter.checkifredirectrequired(string;string)", "org.apache.wicket.protocol.http.wicketfilter.getfilterpath()", "org.apache.wicket.protocol.http.wicketfilter.wicketfilter()", "org.apache.wicket.protocol.http.wicketfilter.init(filterconfig)", "org.apache.wicket.protocol.http.wicketfilter.dofilter(servletrequest;servletresponse;filterchain)", "org.apache.wicket.protocol.http.wicketfilter.shouldignorepath(httpservletrequest)", "org.apache.wicket.protocol.http.wicketfilter.processrequest(servletrequest;servletresponse;filterchain)", "org.apache.wicket.protocol.http.wicketfilter.getfilterconfig()", "org.apache.wicket.protocol.http.wicketfilter.checkifredirectrequired(httpservletrequest)", "org.apache.wicket.protocol.http.wicketfilter.initignorepaths(filterconfig)", "org.apache.wicket.protocol.http.wicketfilter.getfilterpathfromconfig(filterconfig)", "org.apache.wicket.protocol.http.wicketfilter.getapplicationfactory()", "org.apache.wicket.protocol.http.wicketfilter.canonicalisefilterpath(string)", "org.apache.wicket.protocol.http.wicketfilter.<clinit>()", "org.apache.wicket.protocol.http.wicketfilter.getfilterpath(httpservletrequest)", "org.apache.wicket.protocol.http.wicketfilter.init(boolean;filterconfig)", "org.apache.wicket.protocol.http.wicketfilter.getrelativepath(httpservletrequest)", "org.apache.wicket.protocol.http.wicketfilter.setfilterpath(string)"]}, "clientproperties": {"distance": 0.9828, "methods": ["org.apache.wicket.protocol.http.clientproperties.setremoteaddress(string)", "org.apache.wicket.protocol.http.clientproperties.setbrowsermozillafirefox(boolean)", "org.apache.wicket.protocol.http.clientproperties.settimezone(timezone)", "org.apache.wicket.protocol.http.clientproperties.setbrowserinternetexplorer(boolean)", "org.apache.wicket.protocol.http.clientproperties.setbrowsersafari(boolean)", "org.apache.wicket.protocol.http.clientproperties.setbrowserversionmajor(int)", "org.apache.wicket.protocol.http.clientproperties.setbrowsermozilla(boolean)", "org.apache.wicket.protocol.http.clientproperties.isbrowsermozilla()", "org.apache.wicket.protocol.http.clientproperties.setbrowseropera(boolean)", "org.apache.wicket.protocol.http.clientproperties.gettimezone()", "org.apache.wicket.protocol.http.clientproperties.clientproperties()", "org.apache.wicket.protocol.http.clientproperties.isbrowserkonqueror()", "org.apache.wicket.protocol.http.clientproperties.setbrowserkonqueror(boolean)", "org.apache.wicket.protocol.http.clientproperties.isbrowseropera()", "org.apache.wicket.protocol.http.clientproperties.isbrowsermozillafirefox()", "org.apache.wicket.protocol.http.clientproperties.isbrowsersafari()", "org.apache.wicket.protocol.http.clientproperties.setbrowserversionminor(int)", "org.apache.wicket.protocol.http.clientproperties.setquirkmozillatextinputrepaint(boolean)", "org.apache.wicket.protocol.http.clientproperties.isbrowserchrome()", "org.apache.wicket.protocol.http.clientproperties.setquirkmozillaperformancelargedomremove(boolean)", "org.apache.wicket.protocol.http.clientproperties.setbrowserchrome(boolean)", "org.apache.wicket.protocol.http.clientproperties.isbrowserinternetexplorer()"]}, "componentinfo": {"distance": 1.0, "methods": ["org.apache.wicket.request.mapper.info.componentinfo.componentinfo(integer;string;string;integer)", "org.apache.wicket.request.mapper.info.componentinfo.getcomponentpath()", "org.apache.wicket.request.mapper.info.componentinfo.encodecomponentpath(charsequence)", "org.apache.wicket.request.mapper.info.componentinfo.getlistenerinterface()", "org.apache.wicket.request.mapper.info.componentinfo.decodecomponentpath(charsequence)", "org.apache.wicket.request.mapper.info.componentinfo.getrendercount()", "org.apache.wicket.request.mapper.info.componentinfo.isnumber(string)", "org.apache.wicket.request.mapper.info.componentinfo.getbehaviorid()", "org.apache.wicket.request.mapper.info.componentinfo.parse(string)", "org.apache.wicket.request.mapper.info.componentinfo.tostring()"]}, "pagecomponentinfo": {"distance": 0.8333, "methods": ["org.apache.wicket.request.mapper.info.pagecomponentinfo.pagecomponentinfo(pageinfo;componentinfo)", "org.apache.wicket.request.mapper.info.pagecomponentinfo.tostring()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.getcomponentinfo()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.getpageinfo()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.parse(string)"]}, "pageinfo": {"distance": 1.0, "methods": ["org.apache.wicket.request.mapper.info.pageinfo.pageinfo()", "org.apache.wicket.request.mapper.info.pageinfo.tostring()", "org.apache.wicket.request.mapper.info.pageinfo.parse(string)", "org.apache.wicket.request.mapper.info.pageinfo.getpageid()", "org.apache.wicket.request.mapper.info.pageinfo.pageinfo(integer)"]}, "group": {"distance": 1.0, "methods": ["org.apache.wicket.util.parse.metapattern.group.bind(int)"]}, "metapattern": {"distance": 1.2325, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.tagnameparser(charsequence)", "org.apache.wicket.util.parse.metapattern.groupalreadyboundexception.groupalreadyboundexception()", "org.apache.wicket.util.parse.metapattern.metapattern.matcher(charsequence;int)", "org.apache.wicket.util.parse.metapattern.metapattern.matcher(charsequence)", "org.apache.wicket.util.parse.metapattern.metapattern.compile(int)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.setpattern(metapattern)", "org.apache.wicket.util.parse.metapattern.group.bind(int)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.metapatternparser(charsequence)", "org.apache.wicket.util.parse.metapattern.metapattern.bind(int)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.metapatternparser(metapattern;charsequence)"]}, "abstractcrypt": {"distance": 1.0, "methods": ["org.apache.wicket.util.crypt.abstractcrypt.encryptstringtobytearray(string)", "org.apache.wicket.util.crypt.abstractcrypt.setkey(string)", "org.apache.wicket.util.crypt.abstractcrypt.decryptbytearray(byte[])", "org.apache.wicket.util.crypt.abstractcrypt.decrypturlsafe(string)", "org.apache.wicket.util.crypt.abstractcrypt.encrypturlsafe(string)", "org.apache.wicket.util.crypt.abstractcrypt.abstractcrypt()", "org.apache.wicket.util.crypt.abstractcrypt.<clinit>()", "org.apache.wicket.util.crypt.abstractcrypt.getkey()"]}, "base64": {"distance": 0.9364, "methods": ["org.apache.wicket.util.crypt.base64.isurlsafe()", "org.apache.wicket.util.crypt.base64.containsbase64byte(byte[])", "org.apache.wicket.util.crypt.base64.reset()", "org.apache.wicket.util.crypt.base64.setinitialbuffer(byte[];int;int)", "org.apache.wicket.util.crypt.base64.decode(byte[];int;int)", "org.apache.wicket.util.crypt.base64.isbase64(byte)", "org.apache.wicket.util.crypt.base64.base64(boolean)", "org.apache.wicket.util.crypt.base64.encode(byte[];int;int)", "org.apache.wicket.util.crypt.base64.avail()", "org.apache.wicket.util.crypt.base64.<clinit>()", "org.apache.wicket.util.crypt.base64.getencodelength(byte[];int;byte[])", "org.apache.wicket.util.crypt.base64.resizebuffer()", "org.apache.wicket.util.crypt.base64.readresults(byte[];int;int)", "org.apache.wicket.util.crypt.base64.decode(byte[])", "org.apache.wicket.util.crypt.base64.base64(int;byte[];boolean)", "org.apache.wicket.util.crypt.base64.decode(string)", "org.apache.wicket.util.crypt.base64.encode(byte[])"]}, "resourcelogdata": {"distance": 1.05, "methods": ["org.apache.wicket.request.handler.resource.resourcelogdata.resourcelogdata(string;locale;string;string)"]}, "resourcereferencerequesthandler": {"distance": 0.8889, "methods": ["org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getpageparameters()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getresourcereference()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.respond(irequestcycle)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getstyle()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.detach(irequestcycle)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.resourcereferencerequesthandler(resourcereference)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.resourcereferencerequesthandler(resourcereference;pageparameters)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getresource()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getvariation()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getlocale()"]}, "resourcestreamrequesthandler": {"distance": 0.8077, "methods": ["org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.resourcestreamrequesthandler(iresourcestream)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.getfilename()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.respond(irequestcycle)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.setcontentdisposition(contentdisposition)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.getcacheduration()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.getcontentdisposition()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.getresourcestream()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.resourcestreamrequesthandler(iresourcestream;string)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.detach(irequestcycle)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.<clinit>()"]}, "feedbackcollector": {"distance": 0.8333, "methods": ["org.apache.wicket.feedback.feedbackcollector.feedbackcollector(component)", "org.apache.wicket.feedback.feedbackcollector.collect(ifeedbackmessagefilter)"]}, "feedbackmessage": {"distance": 1.0467, "methods": ["org.apache.wicket.feedback.feedbackmessage.getmessage()", "org.apache.wicket.feedback.feedbackmessage.feedbackmessage(component;serializable;int)"]}, "feedbackmessages": {"distance": 0.8095, "methods": ["org.apache.wicket.feedback.feedbackmessages.clear(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.iterator()", "org.apache.wicket.feedback.feedbackmessages.messages(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.add(feedbackmessage)", "org.apache.wicket.feedback.feedbackmessages.feedbackmessages()", "org.apache.wicket.feedback.feedbackmessages.detach()", "org.apache.wicket.feedback.feedbackmessages.<clinit>()", "org.apache.wicket.feedback.feedbackmessages.error(component;serializable)"]}, "urlresourcestream": {"distance": 0.9143, "methods": ["org.apache.wicket.core.util.resource.urlresourcestream.geturl()", "org.apache.wicket.core.util.resource.urlresourcestream.getdata(boolean)", "org.apache.wicket.core.util.resource.urlresourcestream.<clinit>()", "org.apache.wicket.core.util.resource.urlresourcestream.urlresourcestream(url)", "org.apache.wicket.core.util.resource.urlresourcestream.getinputstream()", "org.apache.wicket.core.util.resource.urlresourcestream.tostring()", "org.apache.wicket.core.util.resource.urlresourcestream.getcontenttype()", "org.apache.wicket.core.util.resource.urlresourcestream.close()", "org.apache.wicket.core.util.resource.urlresourcestream.updatecontentlength()", "org.apache.wicket.core.util.resource.urlresourcestream.locationasstring()", "org.apache.wicket.core.util.resource.urlresourcestream.lastmodifiedtime()"]}, "webexternalresourcestream": {"distance": 0.875, "methods": ["org.apache.wicket.core.util.resource.webexternalresourcestream.close()", "org.apache.wicket.core.util.resource.webexternalresourcestream.<clinit>()", "org.apache.wicket.core.util.resource.webexternalresourcestream.length()", "org.apache.wicket.core.util.resource.webexternalresourcestream.webexternalresourcestream(string)", "org.apache.wicket.core.util.resource.webexternalresourcestream.getcontenttype()", "org.apache.wicket.core.util.resource.webexternalresourcestream.lastmodifiedtime()", "org.apache.wicket.core.util.resource.webexternalresourcestream.getinputstream()"]}, "abstractrepeater": {"distance": 1.0667, "methods": ["org.apache.wicket.markup.repeater.abstractrepeater.abstractrepeater(string;imodel)", "org.apache.wicket.markup.repeater.abstractrepeater.onbeforerender()"]}, "integerconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.integerconverter.<clinit>()", "org.apache.wicket.util.convert.converter.integerconverter.gettargettype()", "org.apache.wicket.util.convert.converter.integerconverter.integerconverter()", "org.apache.wicket.util.convert.converter.integerconverter.converttoobject(string;locale)"]}, "sqltimestampconverter": {"distance": 0.8333, "methods": ["org.apache.wicket.util.convert.converter.sqltimestampconverter.sqltimestampconverter()"]}, "characterconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.characterconverter.<clinit>()", "org.apache.wicket.util.convert.converter.characterconverter.characterconverter()"]}, "abstractconverter": {"distance": 1.3333, "methods": ["org.apache.wicket.util.convert.converter.abstractconverter.abstractconverter()", "org.apache.wicket.util.convert.converter.abstractconverter.newconversionexception(string;object;locale)", "org.apache.wicket.util.convert.converter.abstractconverter.parse(format;object;locale)"]}, "bigdecimalconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.bigdecimalconverter.bigdecimalconverter()"]}, "defaultpagestore$serializedpage": {"distance": 1.0625, "methods": ["org.apache.wicket.pagestore.defaultpagestore$serializedpage.defaultpagestore$serializedpage(string;int;byte[])", "org.apache.wicket.pagestore.defaultpagestore$serializedpage.getdata()", "org.apache.wicket.pagestore.defaultpagestore$serializedpage.getsessionid()", "org.apache.wicket.pagestore.defaultpagestore$serializedpage.equals(object)", "org.apache.wicket.pagestore.defaultpagestore$serializedpage.access$000(serializedpage)", "org.apache.wicket.pagestore.defaultpagestore$serializedpage.getpageid()"]}, "defaultpagestore": {"distance": 0.8214, "methods": ["org.apache.wicket.pagestore.defaultpagestore.getpage(string;int)", "org.apache.wicket.pagestore.defaultpagestore.deserializepage(byte[])", "org.apache.wicket.pagestore.defaultpagestore.defaultpagestore(iserializer;idatastore;int)", "org.apache.wicket.pagestore.defaultpagestore.serializepage(string;imanageablepage)", "org.apache.wicket.pagestore.defaultpagestore.storepagedata(string;int;byte[])", "org.apache.wicket.pagestore.defaultpagestore.storepage(string;imanageablepage)"]}, "javaserializer": {"distance": 1.0, "methods": ["org.apache.wicket.serialize.java.javaserializer.deserialize(byte[])", "org.apache.wicket.serialize.java.javaserializer.newobjectinputstream(inputstream)", "org.apache.wicket.serialize.java.javaserializer.newobjectoutputstream(outputstream)", "org.apache.wicket.serialize.java.javaserializer.javaserializer(string)", "org.apache.wicket.serialize.java.javaserializer.<clinit>()", "org.apache.wicket.serialize.java.javaserializer.serialize(object)"]}, "urlencoder": {"distance": 1.6667, "methods": ["org.apache.wicket.util.encoding.urlencoder.encode(string;charset)", "org.apache.wicket.util.encoding.urlencoder.encode(string;string)", "org.apache.wicket.util.encoding.urlencoder.urlencoder(type)", "org.apache.wicket.util.encoding.urlencoder.<clinit>()"]}, "urldecoder": {"distance": 1.6667, "methods": ["org.apache.wicket.util.encoding.urldecoder.<clinit>()", "org.apache.wicket.util.encoding.urldecoder.urldecoder(boolean)", "org.apache.wicket.util.encoding.urldecoder.decode(string;charset)", "org.apache.wicket.util.encoding.urldecoder.decode(string;string)"]}, "file": {"distance": 1.0714, "methods": ["org.apache.wicket.util.file.file.lastmodifiedtime()", "org.apache.wicket.util.file.files.getlocalfilefromurl(string)", "org.apache.wicket.core.util.file.webapplicationpath.webapplicationpath(servletcontext;string)", "org.apache.wicket.util.file.path.path(folder)", "org.apache.wicket.util.file.files.getlastmodified(file)", "org.apache.wicket.util.file.file.file(file)", "org.apache.wicket.util.file.filecleaner.filecleaner()", "org.apache.wicket.util.file.files.<clinit>()", "org.apache.wicket.util.file.filecleaningtracker.filecleaningtracker()", "org.apache.wicket.core.util.file.webapplicationpath.<clinit>()", "org.apache.wicket.util.file.file.file(string)", "org.apache.wicket.core.util.file.webapplicationpath.find(class;string)", "org.apache.wicket.util.file.file.file(file;string)", "org.apache.wicket.util.file.path.path(string)", "org.apache.wicket.util.file.filecleaningtracker.exitwhenfinished()", "org.apache.wicket.util.file.filecleaner.destroy()", "org.apache.wicket.util.file.folder.folder(string)", "org.apache.wicket.util.file.path.find(class;string)", "org.apache.wicket.util.file.files.getlocalfilefromurl(url)"]}, "filecleaningtracker": {"distance": 1.0333, "methods": ["org.apache.wicket.util.file.filecleaningtracker.filecleaningtracker()", "org.apache.wicket.util.file.filecleaningtracker.exitwhenfinished()"]}, "folder": {"distance": 0.9762, "methods": ["org.apache.wicket.util.file.folder.folder(string)"]}, "tagnameparser": {"distance": 1.3333, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.tagnameparser(charsequence)"]}, "person": {"distance": 0.8571, "methods": ["org.apache.wicket.util.lang.person.getaddresslist()", "org.apache.wicket.util.lang.person.getage()", "org.apache.wicket.util.lang.person.setaddressmap(map)", "org.apache.wicket.util.lang.person.getaddressarray()", "org.apache.wicket.util.lang.person.getaddressmap()", "org.apache.wicket.util.lang.person.setaddresslist(list)", "org.apache.wicket.util.lang.person.setcountry(country)", "org.apache.wicket.util.lang.person.getcountry()", "org.apache.wicket.util.lang.person.getaddressat(int)", "org.apache.wicket.util.lang.person.getonlygetterprimitive()", "org.apache.wicket.util.lang.person.getaddress()", "org.apache.wicket.util.lang.person.getonlygetterstring()", "org.apache.wicket.util.lang.person.setage(int)", "org.apache.wicket.util.lang.person.setaddress(address)", "org.apache.wicket.util.lang.person.setaddressat(int;address)", "org.apache.wicket.util.lang.person.getname()", "org.apache.wicket.util.lang.person.setaddressarray(address[])", "org.apache.wicket.util.lang.person.setname(charsequence)", "org.apache.wicket.util.lang.person.person()"]}, "javascriptutils": {"distance": 1.2, "methods": ["org.apache.wicket.core.util.string.javascriptutils.writejavascripturl(response;charsequence;string;boolean;string)"]}, "initializer": {"distance": 1.0, "methods": ["org.apache.wicket.initializer.init(application)", "org.apache.wicket.extensions.initializer.init(application)", "org.apache.wicket.velocity.initializer.init(application)", "org.apache.wicket.jmx.initializer.destroy(application)", "org.apache.wicket.extensions.initializer.destroy(application)", "org.apache.wicket.jmx.initializer.tostring()", "org.apache.wicket.extensions.initializer.tostring()", "org.apache.wicket.extensions.initializer.initializer()", "org.apache.wicket.initializer.initializer()", "org.apache.wicket.jmx.initializer.initializer()", "org.apache.wicket.jmx.initializer.register(object;objectname)", "org.apache.wicket.initializer.tostring()", "org.apache.wicket.velocity.initializer.getvelocityproperties(application)", "org.apache.wicket.velocity.initializer.initializer()", "org.apache.wicket.velocity.initializer.destroy(application)", "org.apache.wicket.initializer.destroy(application)", "org.apache.wicket.jmx.initializer.init(application)"]}, "markuptype": {"distance": 1.1667, "methods": ["org.apache.wicket.markup.markuptype.getextension()"]}, "markup": {"distance": 0.8333, "methods": ["org.apache.wicket.markup.html.link.abstractlink.abstractlink(string)", "org.apache.wicket.markup.rawmarkup.rawmarkup(charsequence)", "org.apache.wicket.markup.head.resourceaggregator.resourceaggregator(iheaderresponse)", "org.apache.wicket.markup.markup.getmarkupresourcestream()", "org.apache.wicket.markup.html.list.tabletest.tabletest()", "org.apache.wicket.markup.markupfactory.loadmarkup(markupcontainer;markupresourcestream;boolean)", "org.apache.wicket.markup.html.link.link.isenabled()", "org.apache.wicket.markup.html.list.listview.onpopulate()", "org.apache.wicket.markup.head.resourceaggregator.recordheaderitem(headeritem;set)", "org.apache.wicket.markup.parser.xmlpullparser.xmlpullparser()", "org.apache.wicket.markup.html.list.tabletest$2.tabletest$2(tabletest;string;imodel;int)", "org.apache.wicket.markup.html.securepackageresourceguard$searchpattern.isinclude()", "org.apache.wicket.markup.html.form.upload.fileuploadtest.fileuploadtest()", "org.apache.wicket.markup.html.list.pageablelistview.getfirstitemoffset()", "org.apache.wicket.markup.html.form.upload.fileupload.getinputstream()", "org.apache.wicket.markup.html.image.image.image(string;resourcereference)", "org.apache.wicket.markup.markupcachetest$markupcachingassumingcomponent.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.html.list.pageablelistview.getcurrentpage()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.gettextcolor()", "org.apache.wicket.markup.abstractmarkupparser.getmarkupfilters()", "org.apache.wicket.markup.head.priorityfirstcomparator$headeritemtype.priorityfirstcomparator$headeritemtype(string;int)", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.postprocess(markup)", "org.apache.wicket.markup.html.packageresourceguard.packageresourceguard()", "org.apache.wicket.markup.head.internal.headerresponse.wasitemrendered(headeritem)", "org.apache.wicket.markup.resolver.autolinkresolver.<clinit>()", "org.apache.wicket.markup.renderstrategy.childfirstheaderrenderstrategy.renderheader(htmlheadercontainer;headerstreamstate;component)", "org.apache.wicket.markup.html.navigation.paging.abstractpagingnavigationtest.abstractpagingnavigationtest()", "org.apache.wicket.markup.html.form.textfield.textfield(string)", "org.apache.wicket.markup.loader.defaultmarkuploader.loadmarkup(markupcontainer;markupresourcestream;imarkuploader;boolean)", "org.apache.wicket.markup.html.securepackageresourceguard$searchpattern.isactive()", "org.apache.wicket.markup.html.internal.headerresponsetest$1.getrealresponse()", "org.apache.wicket.markup.html.webpage.onafterrender()", "org.apache.wicket.markup.html.image.image.setimageresourcereference(resourcereference;pageparameters)", "org.apache.wicket.markup.html.form.abstracttextcomponent.convertinput()", "org.apache.wicket.markup.markupresourcestream.getcachekey()", "org.apache.wicket.markup.html.form.formcomponent.newvalidatable()", "org.apache.wicket.markup.html.form.form.ondetach()", "org.apache.wicket.markup.markupresourcestream.getcontainerinfo()", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.getwidth()", "org.apache.wicket.markup.head.priorityheaderitem.hashcode()", "org.apache.wicket.markup.html.form.formcomponent.visitformcomponentspostorder(component;ivisitor)", "org.apache.wicket.markup.markuptype.getextension()", "org.apache.wicket.markup.html.border.border.border(string)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.pagingnavigationlink(string;ipageable;long)", "org.apache.wicket.markup.html.form.validationerrorfeedback.validationerrorfeedback(ivalidationerror;serializable)", "org.apache.wicket.markup.html.list.listviewtest$1.listviewtest$1(listviewtest;string;imodel)", "org.apache.wicket.markup.markupparsertest.markupparsertest()", "org.apache.wicket.markup.markupfactory.getmarkupcache()", "org.apache.wicket.markup.abstractmarkupparser.handlerawtext(string)", "org.apache.wicket.markup.parser.filter.htmlheadersectionhandlertest$custommarkuppage.htmlheadersectionhandlertest$custommarkuppage(1)", "org.apache.wicket.markup.html.form.encryption.crypttest.crypttest()", "org.apache.wicket.markup.html.form.primitivetyperequiredtest.primitivetyperequiredtest()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlinktest.pagingnavigationlinktest()", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.downloadlinktest$filenamemodel(downloadlinktest)", "org.apache.wicket.markup.markupresourcestream.getresource()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.getstring(localizer;string;component)", "org.apache.wicket.markup.html.form.formcomponent$messagesource$1.formcomponent$messagesource$1(messagesource;string;boolean;map)", "org.apache.wicket.markup.markupresourcestream.markupresourcestream(iresourcestream;containerinfo;class)", "org.apache.wicket.markup.html.form.textfield.textfield(string;imodel)", "org.apache.wicket.markup.html.internal.htmlheadercontainer.newheaderresponse()", "org.apache.wicket.markup.html.form.formcomponent$messagesource$1.getvalue(string)", "org.apache.wicket.markup.html.form.formcomponenttest.formcomponenttest()", "org.apache.wicket.markup.html.form.formcomponent.reportrequirederror()", "org.apache.wicket.markup.html.form.formcomponent.error(ivalidationerror)", "org.apache.wicket.markup.html.webpage.<clinit>()", "org.apache.wicket.markup.html.form.formcomponent.formcomponent(string)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink$1.ajaxfallbacklink$1(ajaxfallbacklink;string)", "org.apache.wicket.markup.html.form.abstracttextcomponent.setconvertemptyinputstringtonull(boolean)", "org.apache.wicket.markup.html.securepackageresourceguard.securepackageresourceguard()", "org.apache.wicket.markup.componenttag.isclose()", "org.apache.wicket.markup.html.form.formcomponent.getconvertedinput()", "org.apache.wicket.markup.html.packageresourcetest.before()", "org.apache.wicket.markup.markupfactory.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.html.image.image.getstatelesshint()", "org.apache.wicket.markup.html.list.pageablelistview.getpagecount()", "org.apache.wicket.markup.markup.makeimmutable()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.isdefer()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.getfont()", "org.apache.wicket.ajax.markup.html.ajaxlink.ajaxlink(string)", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler$1.relativepathprefixhandler$1()", "org.apache.wicket.markup.head.resourceaggregator.wasrendered(object)", "org.apache.wicket.markup.html.packageresourceguard.setallowaccesstorootresources(boolean)", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.<clinit>()", "org.apache.wicket.markup.markup.markup(markupresourcestream)", "org.apache.wicket.markup.html.securepackageresourceguard.getpattern()", "org.apache.wicket.markup.parser.abstractmarkupfilter.setnextfilter(imarkupfilter)", "org.apache.wicket.markup.html.border.boxbordertest.boxbordertest()", "org.apache.wicket.markup.html.form.form.getmethod()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.ondetach()", "org.apache.wicket.markup.parser.filter.styleandscriptidentifiertest.styleandscriptidentifiertest()", "org.apache.wicket.markup.markupfactory.hasmarkupcache()", "org.apache.wicket.markup.html.form.validatorpropertiestest.newapplication()", "org.apache.wicket.markup.markupfactory$1.onappendmarkupfilter(imarkupfilter)", "org.apache.wicket.markup.html.list.pageablelistview.pageablelistview(string;imodel;int)", "org.apache.wicket.markup.html.form.formcomponent$1.formcomponent$1()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.adddefaultvars(map)", "org.apache.wicket.markup.html.packageresourceguard.acceptextension(string)", "org.apache.wicket.markup.html.form.formcomponent.getdefaultlabel()", "org.apache.wicket.markup.markupexception.markupexception(iresourcestream;string;throwable)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.newajaxeventbehavior(string)", "org.apache.wicket.markup.resolver.autolinkresolver.autolinkresolver()", "org.apache.wicket.markup.parser.xmlpullparser.getinputfrompositionmarker(int)", "org.apache.wicket.markup.markupcache.markupcache()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.tostring()", "org.apache.wicket.markup.html.webpage.webpage(pageparameters)", "org.apache.wicket.markup.html.form.formcomponent.visitcomponentspostorder(component;ivisitor)", "org.apache.wicket.markup.html.form.formcomponent.getform()", "org.apache.wicket.markup.html.form.form.findform(component)", "org.apache.wicket.markup.html.navigation.paging.abstractpagingnavigationtest$mockpageable.getpagecount()", "org.apache.wicket.markup.head.resourceaggregator.renderheaderitems()", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresourcetest.thumbnailimageresourcetest()", "org.apache.wicket.markup.html.form.formcomponent$1isvalidvisitor.component(formcomponent;ivisit)", "org.apache.wicket.markup.head.priorityheaderitem.getdependencies()", "org.apache.wicket.markup.head.priorityfirstcomparator.getitemtype(recordedheaderitem)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlinktest.before()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationincrementlink.pagingnavigationincrementlink(string;ipageable;int)", "org.apache.wicket.markup.html.packageresourceguardtest.packageresourceguardtest()", "org.apache.wicket.markup.html.form.formcomponent.getmodelobject()", "org.apache.wicket.markup.markupparser$markupfilterlist.add(imarkupfilter)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.setwidth(int)", "org.apache.wicket.markup.parser.filter.inlineenclosurehandler.inlineenclosurehandler()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.render(graphics2d;attributes)", "org.apache.wicket.markup.html.securepackageresourceguard.clearcache()", "org.apache.wicket.markup.html.form.formcomponent.getvalidators()", "org.apache.wicket.markup.componenttag.getid()", "org.apache.wicket.markup.html.form.formcomponent.gettype()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getrendertokens()", "org.apache.wicket.markup.html.webpage$1.webpage$1(webpage)", "org.apache.wicket.markup.head.internal.headerresponse.getresponse()", "org.apache.wicket.markup.markupfactory.onappendmarkupfilter(imarkupfilter)", "org.apache.wicket.markup.markupfactory.newxmlpullparser()", "org.apache.wicket.markup.html.form.form.form(string;imodel)", "org.apache.wicket.markup.parser.filter.rootmarkupfilter.nextelement()", "org.apache.wicket.markup.markupresourcestream.tostring()", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.wicketlinktaghandler()", "org.apache.wicket.markup.html.packageresourcetest$3.packageresourcetest$3(packageresourcetest;class;string;locale;string;string)", "org.apache.wicket.markup.html.form.upload.fileupload.fileupload(fileitem)", "org.apache.wicket.markup.markupcache$defaultcacheimplementation.put(object;object)", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.getcolor()", "org.apache.wicket.markup.renderstrategy.abstractheaderrenderstrategy.abstractheaderrenderstrategy()", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.render(attributes)", "org.apache.wicket.markup.repeater.abstractrepeater.abstractrepeater(string;imodel)", "org.apache.wicket.markup.head.resourceaggregator.close()", "org.apache.wicket.markup.html.securepackageresourceguard$simplecache.put(object;object)", "org.apache.wicket.markup.parser.filter.htmlhandler.htmlhandler()", "org.apache.wicket.markup.markup.size()", "org.apache.wicket.markup.defaultmarkupcachekeyprovidertest.defaultmarkupcachekeyprovidertest()", "org.apache.wicket.markup.html.link.link.getstatelesshint()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.equals(object)", "org.apache.wicket.markup.html.form.formcomponent.getinputasarray()", "org.apache.wicket.markup.renderstrategy.childfirstheaderrenderstrategy.renderchildheaders(htmlheadercontainer;component)", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.<clinit>()", "org.apache.wicket.markup.abstractmarkupparser.abstractmarkupparser(string)", "org.apache.wicket.markup.html.form.formcomponent$validatableadapter.formcomponent$validatableadapter(formcomponent)", "org.apache.wicket.markup.html.border.border.addtoborder(component[])", "org.apache.wicket.markup.html.form.abstracttextcomponent.abstracttextcomponent(string;imodel)", "org.apache.wicket.markup.html.image.resource.localizedimageresource.bind()", "org.apache.wicket.markup.parser.xmltag.isclose()", "org.apache.wicket.markup.resolver.htmlheaderresolver.htmlheaderresolver()", "org.apache.wicket.markup.parser.filter.wickettagidentifier.registerwellknowntagname(string)", "org.apache.wicket.markup.head.resourceaggregator.markrendered(object)", "org.apache.wicket.markup.head.cssheaderitem.cssheaderitem(string)", "org.apache.wicket.markup.defaultmarkupresourcestreamprovider.defaultmarkupresourcestreamprovider()", "org.apache.wicket.markup.html.form.form.getrootform()", "org.apache.wicket.markup.html.internal.htmlheadercontainer$1.htmlheadercontainer$1(htmlheadercontainer)", "org.apache.wicket.markup.html.form.formcomponent$2.visitobject(object)", "org.apache.wicket.markup.resolver.markupinheritanceresolver.<clinit>()", "org.apache.wicket.markup.html.form.abstractchoice.abstractchoice(string;list)", "org.apache.wicket.markup.html.list.pageablelistview.getviewsize()", "org.apache.wicket.markup.head.noheaderitem.<clinit>()", "org.apache.wicket.markup.head.cssheaderitem.getcondition()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.geturl()", "org.apache.wicket.markup.head.cssreferenceheaderitem.getpageparameters()", "org.apache.wicket.markup.html.securepackageresourceguardtest.securepackageresourceguardtest()", "org.apache.wicket.markup.html.list.listview.getlist()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationincrementlinktest.before()", "org.apache.wicket.markup.markupcache$defaultcacheimplementation.clear()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.getheaderresponse()", "org.apache.wicket.markup.resolver.wicketcontainerresolver.wicketcontainerresolver()", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.ajaxfallbacklink(string)", "org.apache.wicket.markup.parser.filter.openclosetagexpander.openclosetagexpander()", "org.apache.wicket.markup.html.image.resource.localizedimageresource.getresource()", "org.apache.wicket.markup.markupcache.getmarkup(markupcontainer;class;boolean)", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.getimagedata(attributes)", "org.apache.wicket.markup.html.securepackageresourceguard$searchpattern.setpattern(string)", "org.apache.wicket.markup.parser.filter.wicketremovetaghandler.wicketremovetaghandler()", "org.apache.wicket.markup.html.webpage.webpage()", "org.apache.wicket.markup.html.image.image.image(string;resourcereference;pageparameters)", "org.apache.wicket.markup.html.packageresourceguard.acceptfile(string)", "org.apache.wicket.markup.html.link.downloadlinktest$1.downloadlinktest$1(downloadlinktest)", "org.apache.wicket.markup.parser.filter.headersectiontest.headersectiontest()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getreference()", "org.apache.wicket.markup.markupfactory.get()", "org.apache.wicket.markup.html.link.link.link(string)", "org.apache.wicket.markup.html.decoratingheaderresponse.close()", "org.apache.wicket.markup.parser.filter.htmlheadersectionhandler.htmlheadersectionhandler(markup)", "org.apache.wicket.markup.parser.filter.rootmarkupfilter.rootmarkupfilter(ixmlpullparser)", "org.apache.wicket.markup.markupcache.getmarkupcachekeyprovider(markupcontainer)", "org.apache.wicket.ajax.markup.html.ajaxlink.ajaxlink(string;imodel)", "org.apache.wicket.markup.html.form.formcomponent$1.visitchildren(object)", "org.apache.wicket.markup.html.form.formcomponent$messagesource.substitute(string;map)", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.wraponassignment(component)", "org.apache.wicket.markup.markupparser$markupfilterlist.onadd(imarkupfilter)", "org.apache.wicket.markup.html.form.form$2.form$2(form)", "org.apache.wicket.markup.html.packageresourcetest$2.packageresourcetest$2(packageresourcetest;class;string;locale;string;string)", "org.apache.wicket.markup.html.border.bordertesthierarchypage_4.bordertesthierarchypage_4()", "org.apache.wicket.markup.html.form.formcomponent.validaterequired()", "org.apache.wicket.markup.parser.filter.headersectionpage_13.headersectionpage_13()", "org.apache.wicket.markup.componenttag.ismodified()", "org.apache.wicket.markup.head.resourceaggregator.getitemtoberendered(headeritem)", "org.apache.wicket.markup.html.border.bordercomponent1.bordercomponent1(string)", "org.apache.wicket.markup.html.form.formcomponent.getinputname()", "org.apache.wicket.markup.parser.abstractmarkupfilter.<clinit>()", "org.apache.wicket.markup.head.priorityfirstcomparator.inversedcomponentorder(recordedheaderitem;recordedheaderitem)", "org.apache.wicket.markup.parser.filter.rootmarkupfilter.getnextfilter()", "org.apache.wicket.markup.loader.simplemarkuploader.loadmarkup(markupcontainer;markupresourcestream;imarkuploader;boolean)", "org.apache.wicket.markup.html.image.resource.localizedimageresource.isstateless()", "org.apache.wicket.markup.markupcache$defaultcacheimplementation.containskey(object)", "org.apache.wicket.markup.html.form.formcomponent$messagesource.getlabel()", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.detach()", "org.apache.wicket.markup.markupcache$1.markupcache$1(markupcache;markupresourcestream;imodificationwatcher;string)", "org.apache.wicket.markup.markupresourcestream.lastmodifiedtime()", "org.apache.wicket.markup.html.componentmarkupidtest.componentmarkupidtest()", "org.apache.wicket.markup.abstractmarkupparser.removecomment(string)", "org.apache.wicket.markup.html.form.abstractchoice.abstractchoice(string;imodel;ichoicerenderer)", "org.apache.wicket.markup.renderstrategy.childfirstheaderrenderstrategy$1.childfirstheaderrenderstrategy$1(childfirstheaderrenderstrategy;component;htmlheadercontainer)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklinktest.ajaxfallbacklinktest()", "org.apache.wicket.markup.componenttag.getflag(int)", "org.apache.wicket.markup.markupparser.initializemarkupfilters(markup)", "org.apache.wicket.markup.parser.xmlpullparser.next()", "org.apache.wicket.markup.abstractmarkupparser.parsemarkup()", "org.apache.wicket.markup.html.webpage.getmarkuptype()", "org.apache.wicket.markup.renderstrategy.abstractheaderrenderstrategy.renderapplicationlevelheaders(htmlheadercontainer)", "org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.wicketmessagetaghandler()", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.rendereddynamicimageresource(int;int;string)", "org.apache.wicket.markup.html.form.formcomponenttest$1myvalidator.formcomponenttest$1myvalidator(formcomponenttest)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.invalidate()", "org.apache.wicket.markup.resolver.autolinkresolver$abstractautolinkresolverdelegate.autolinkresolver$abstractautolinkresolverdelegate()", "org.apache.wicket.markup.html.pages.exceptionerrorpage.geterrormessage(throwable)", "org.apache.wicket.markup.foo.getlocale()", "org.apache.wicket.markup.html.panel.panel.panel(string)", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.thumbnailimageresource(iresource;int)", "org.apache.wicket.markup.html.pages.exceptionerrorpage$1.exceptionerrorpage$1(exceptionerrorpage;string;page)", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.styleandscriptidentifier()", "org.apache.wicket.markup.html.form.form.onformsubmitted()", "org.apache.wicket.markup.html.webmarkupcontainer.webmarkupcontainer(string;imodel)", "org.apache.wicket.markup.html.form.dropdownchoice.dropdownchoice(string;list)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string;boolean;string)", "org.apache.wicket.markup.htmlspecialtag.getxmltag()", "org.apache.wicket.markup.markupfactory.<clinit>()", "org.apache.wicket.markup.html.decoratingheaderresponse.wasrendered(object)", "org.apache.wicket.markup.resolver.autolinkresolver$resourcereferenceresolverdelegate.autolinkresolver$resourcereferenceresolverdelegate(string)", "org.apache.wicket.markup.renderstrategy.childfirstheaderrenderstrategy$1.precheck(component)", "org.apache.wicket.markup.html.list.listviewtest.listviewtest()", "org.apache.wicket.markup.parser.filter.rootmarkupfilter.postprocess(markup)", "org.apache.wicket.markup.parser.xmltag.makeimmutable()", "org.apache.wicket.markup.markupresourcestream.markupresourcestream(iresourcestream)", "org.apache.wicket.markup.html.form.choicerenderer.choicerenderer()", "org.apache.wicket.markup.resolver.wicketmessageresolver.wicketmessageresolver()", "org.apache.wicket.markup.html.link.downloadlink.detachmodels()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.hashcode()", "org.apache.wicket.markup.html.webpage.commoninit()", "org.apache.wicket.markup.html.form.textfield.textfield(string;class)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklinktest$onlyanchorareaandlinkpage.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.componenttag.componenttag(xmltag)", "org.apache.wicket.markup.html.form.form.getrootformrelativeid(component)", "org.apache.wicket.markup.html.basic.label.label(string;imodel)", "org.apache.wicket.markup.html.form.formcomponent$1.visitobject(object)", "org.apache.wicket.markup.markupparser$markupfilterlist.add(imarkupfilter;class)", "org.apache.wicket.markup.markupexception.getmarkupstream()", "org.apache.wicket.markup.parser.filter.enclosurehandler.<clinit>()", "org.apache.wicket.markup.abstractmarkupparser.parse()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationincrementlink.isfirst()", "org.apache.wicket.markup.head.noheaderitem.get()", "org.apache.wicket.markup.html.packageresourcetest$1.packageresourcetest$1(packageresourcetest;class;string;locale;string;string)", "org.apache.wicket.markup.html.basic.simplepagetest.simplepagetest()", "org.apache.wicket.markup.head.resourceaggregator$recordedheaderitem.getitem()", "org.apache.wicket.markup.head.internal.headerresponse.markitemrendered(headeritem)", "org.apache.wicket.markup.html.form.formcomponent.isrequired()", "org.apache.wicket.markup.html.border.border.border(string;imodel)", "org.apache.wicket.markup.renderstrategy.childfirstheaderrenderstrategy.childfirstheaderrenderstrategy()", "org.apache.wicket.markup.markupparser$markupfilterlist.firstindexofclass(class)", "org.apache.wicket.markup.head.internal.headerresponse.wasrendered(object)", "org.apache.wicket.markup.markupfactory$1.markupfactory$1(markupfactory;ixmlpullparser;markupresourcestream)", "org.apache.wicket.markup.html.pages.abstracterrorpage.abstracterrorpage()", "org.apache.wicket.markup.html.pages.exceptionerrorpage.exceptionerrorpage(throwable;page)", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresourcefactory.defaultbuttonimageresourcefactory()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.renderheadertagbody(headerstreamstate)", "org.apache.wicket.markup.parser.xmltag$textsegment.xmltag$textsegment(charsequence;int;int;int)", "org.apache.wicket.markup.html.border.boxbordertestpage_10.boxbordertestpage_10()", "org.apache.wicket.markup.markupcache.putintocache(string;markupcontainer;markup)", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar$componentinitializer.uploadprogressbar$componentinitializer()", "org.apache.wicket.markup.parser.xmlpullparser.parsetagtext(xmltag;string)", "org.apache.wicket.markup.html.image.resource.localizedimageresource.setresourcereference(resourcereference;pageparameters)", "org.apache.wicket.markup.markupelement.markupelement()", "org.apache.wicket.markup.html.internal.headerresponsetest$2.headerresponsetest$2(headerresponsetest;string)", "org.apache.wicket.markup.renderstrategy.childfirstheaderrenderstrategy$1.component(component;ivisit)", "org.apache.wicket.markup.parser.abstractmarkupfilter.onspecialtag(htmlspecialtag)", "org.apache.wicket.markup.html.form.abstracttextcomponent.getmodeltype(imodel)", "org.apache.wicket.markup.html.form.abstractsingleselectchoice.abstractsingleselectchoice(string;list)", "org.apache.wicket.markup.html.form.textfield.textfield(string;imodel;class)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.getimagedata(attributes)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationincrementlink.getpagenumber()", "org.apache.wicket.markup.head.priorityfirstcomparator.compare(recordedheaderitem;recordedheaderitem)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;string)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.oninitialize()", "org.apache.wicket.markup.markupcache.onmarkupnotfound(string;markupcontainer;markup)", "org.apache.wicket.markup.parser.xmlpullparser.getdoctype()", "org.apache.wicket.markup.html.securepackageresourceguard$searchpattern.securepackageresourceguard$searchpattern(string)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getpageparameters()", "org.apache.wicket.markup.markupresourcestream.setdoctype(charsequence)", "org.apache.wicket.markup.html.basic.simplepage_5.simplepage_5()", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.shouldwrapincdata(string)", "org.apache.wicket.markup.markupfactory.getmarkuploader()", "org.apache.wicket.markup.html.link.abstractlink.ondetach()", "org.apache.wicket.markup.resolver.autolinkresolver$anchorresolverdelegate.autolinkresolver$anchorresolverdelegate()", "org.apache.wicket.markup.html.image.resource.localizedimageresource.setresource(iresource)", "org.apache.wicket.markup.html.packageresourceguard.<clinit>()", "org.apache.wicket.ajax.markup.html.ajaxfallbacklinktest$onlyanchorareaandlinkpage.ajaxfallbacklinktest$onlyanchorareaandlinkpage()", "org.apache.wicket.markup.markupnotfoundexception.markupnotfoundexception(string)", "org.apache.wicket.markup.markupcache$defaultcacheimplementation.shutdown()", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.get()", "org.apache.wicket.markup.html.link.abstractlink.abstractlink(string;imodel)", "org.apache.wicket.markup.renderstrategy.deepchildfirstvisitor.deepchildfirstvisitor()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.getpagenumber()", "org.apache.wicket.markup.html.form.formcomponent.add(ivalidator)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.ajaxfallbacklink(string;imodel)", "org.apache.wicket.markup.head.priorityfirstcomparator.compare(object;object)", "org.apache.wicket.markup.htmlspecialtag.gethttptagtype()", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.relativepathprefixhandler(markupresourcestream)", "org.apache.wicket.markup.html.form.formcomponent.isvalid()", "org.apache.wicket.markup.markupcachetest$1.markupcachetest$1(markupcachetest)", "org.apache.wicket.markup.head.noheaderitem.noheaderitem()", "org.apache.wicket.markup.html.list.pageablelistview.getitemsperpage()", "org.apache.wicket.markup.html.image.resource.localizedimageresource.localizedimageresource(component)", "org.apache.wicket.markup.html.form.autolabeltextresolver.<clinit>()", "org.apache.wicket.markup.html.link.link.getautoenable()", "org.apache.wicket.markup.markupexception.tostring()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.<clinit>()", "org.apache.wicket.markup.head.resourceaggregator.renderdependencies(headeritem;set)", "org.apache.wicket.markup.foo.getmarkuptype()", "org.apache.wicket.markup.head.cssheaderitem.forreference(resourcereference;pageparameters;string;string)", "org.apache.wicket.markup.html.form.formcomponent$1isvalidvisitor.component(object;ivisit)", "org.apache.wicket.markup.html.form.formcomponent.validatevalidators()", "org.apache.wicket.markup.renderstrategy.abstractheaderrenderstrategy.get()", "org.apache.wicket.markup.resolver.fragmentresolver.fragmentresolver()", "org.apache.wicket.markup.html.basic.multilinelabel.multilinelabel(string;string)", "org.apache.wicket.markup.parser.abstractmarkupfilter.nextelement()", "org.apache.wicket.markup.parser.xmlpullparser.parse(inputstream;string)", "org.apache.wicket.markup.html.form.formcomponent.getdefaultlabel(string)", "org.apache.wicket.markup.markupcache$defaultcacheimplementation.markupcache$defaultcacheimplementation()", "org.apache.wicket.markup.html.link.link.link(string;imodel)", "org.apache.wicket.markup.html.decoratingheaderresponse.decoratingheaderresponse(iheaderresponse)", "org.apache.wicket.markup.html.panel.abstractmarkupsourcingstrategy.renderhead(component;htmlheadercontainer)", "org.apache.wicket.markup.head.resourceaggregator$recordedheaderitemlocation.getrenderbase()", "org.apache.wicket.markup.html.form.formcomponent.settype(class)", "org.apache.wicket.markup.head.resourceaggregator.render(headeritem)", "org.apache.wicket.markup.html.list.listview.setstartindex(int)", "org.apache.wicket.markup.html.basic.label.label(string;string)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string;boolean)", "org.apache.wicket.markup.html.form.form.getstatelesshint()", "org.apache.wicket.markup.repeater.abstractrepeater.onbeforerender()", "org.apache.wicket.markup.parser.filter.wicketcontainertaghandler.wicketcontainertaghandler(boolean)", "org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.wicketmessagetaghandler(markupresourcestream)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.render(response)", "org.apache.wicket.markup.html.webmarkupcontainer.webmarkupcontainer(string)", "org.apache.wicket.markup.html.form.form.getformvalidators()", "org.apache.wicket.markup.html.form.autolabeltaghandler.autolabeltaghandler()", "org.apache.wicket.markup.html.form.formcomponent$validatableadapter.formcomponent$validatableadapter(formcomponent;1)", "org.apache.wicket.markup.html.securepackageresourceguard.securepackageresourceguard(concurrentmap)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklinktest$onlyanchorareaandlinkpage.ajaxfallbacklinktest$onlyanchorareaandlinkpage(1)", "org.apache.wicket.markup.html.list.listview.getstartindex()", "org.apache.wicket.markup.html.form.validatorpropertiestest.validatorpropertiestest()", "org.apache.wicket.markup.html.securepackageresourceguard.addpattern(string)", "org.apache.wicket.markup.html.form.formcomponent$2.formcomponent$2()", "org.apache.wicket.markup.head.priorityheaderitem.priorityheaderitem(headeritem)", "org.apache.wicket.markup.markup.addmarkupelement(markupelement)", "org.apache.wicket.markup.renderstrategy.deepchildfirstvisitor.visit(component;visit)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getcharset()", "org.apache.wicket.markup.html.form.formcomponent.validate()", "org.apache.wicket.markup.head.priorityfirstcomparator$headeritemtype.<clinit>()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar$componentinitializer.init(application)", "org.apache.wicket.markup.parser.xmlpullparser.specialtaghandling(string;int;int)", "org.apache.wicket.markup.resolver.htmlheaderresolver.<clinit>()", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string;boolean;string;string)", "org.apache.wicket.markup.html.form.abstracttextcomponent.getconvertemptyinputstringtonull()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.prefix(string;string)", "org.apache.wicket.markup.markup.get(int)", "org.apache.wicket.markup.parser.abstractmarkupfilter.abstractmarkupfilter()", "org.apache.wicket.markup.containerinfo.getcontainerclass()", "org.apache.wicket.markup.parser.filter.htmlhandler.postprocess(markup)", "org.apache.wicket.markup.html.image.image.getimageresource()", "org.apache.wicket.markup.html.form.upload.fileupload.closestreams()", "org.apache.wicket.markup.html.form.formcomponent.processchildren()", "org.apache.wicket.markup.html.navigation.paging.abstractpagingnavigationtest$mockpageable.abstractpagingnavigationtest$mockpageable(abstractpagingnavigationtest)", "org.apache.wicket.markup.html.form.form.form(string)", "org.apache.wicket.markup.html.navigation.paging.abstractpagingnavigationtest$mockpageable.getcurrentpage()", "org.apache.wicket.markup.renderstrategy.deepchildfirstvisitor.visit(component)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationincrementlinktest.pagingnavigationincrementlinktest()", "org.apache.wicket.markup.abstractmarkupparser.getnexttag()", "org.apache.wicket.markup.html.form.formcomponent.setrequired(boolean)", "org.apache.wicket.markup.parser.filter.wickettagidentifier.wickettagidentifier(markupresourcestream)", "org.apache.wicket.markup.markupcache.shutdown()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.getbackgroundcolor()", "org.apache.wicket.markup.html.form.formcomponent$1isvalidvisitor.formcomponent$1isvalidvisitor(formcomponent)", "org.apache.wicket.markup.head.cssreferenceheaderitem.getreference()", "org.apache.wicket.markup.html.link.link.setautoenable(boolean)", "org.apache.wicket.markup.markupparser.markupparser(string)", "org.apache.wicket.markup.parser.filter.wicketnamespacehandler.wicketnamespacehandler(markupresourcestream)", "org.apache.wicket.markup.markupparser.getmarkupfilters()", "org.apache.wicket.markup.markupcachetest$markupcachingassumingcomponent.markupcachetest$markupcachingassumingcomponent(string)", "org.apache.wicket.markup.markupresourcestream.locationasstring()", "org.apache.wicket.markup.html.basic.simplepanel_6.simplepanel_6(string)", "org.apache.wicket.markup.html.basic.simplepage_6.simplepage_6()", "org.apache.wicket.markup.html.transparentwebmarkupcontainer.transparentwebmarkupcontainer(string)", "org.apache.wicket.markup.markupcache$defaultcacheimplementation.get(object)", "org.apache.wicket.markup.abstractmarkupparser.postprocess(markup)", "org.apache.wicket.markup.parser.abstractmarkupfilter.getnextfilter()", "org.apache.wicket.markup.head.priorityheaderitem.getwrapped()", "org.apache.wicket.markup.html.webcomponent.webcomponent(string;imodel)", "org.apache.wicket.markup.html.packageresourceguard.acceptabsolutepath(string)", "org.apache.wicket.markup.html.securepackageresourceguard$searchpattern.matches(string)", "org.apache.wicket.markup.html.webpage.dirty(boolean)", "org.apache.wicket.markup.html.internal.htmlheadercontainer.htmlheadercontainer(string)", "org.apache.wicket.markup.html.form.labeledwebmarkupcontainer.labeledwebmarkupcontainer(string;imodel)", "org.apache.wicket.markup.html.image.image.setimageresource(iresource)", "org.apache.wicket.markup.parser.filter.enclosurehandler.enclosurehandler()", "org.apache.wicket.markup.head.cssreferenceheaderitem.geturl()", "org.apache.wicket.markup.head.cssreferenceheaderitem.render(response)", "org.apache.wicket.markup.resolver.wicketcontainerresolver.<clinit>()", "org.apache.wicket.markup.defaultmarkupcachekeyprovider.defaultmarkupcachekeyprovider()", "org.apache.wicket.markup.markupfactory.getmarkupresourcestreamprovider(markupcontainer)", "org.apache.wicket.markup.head.cssreferenceheaderitem.getrendertokens()", "org.apache.wicket.markup.markupfactory.markupfactory()", "org.apache.wicket.markup.parser.filter.openclosetagexpander.nextelement()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.<clinit>()", "org.apache.wicket.markup.html.pages.exceptionerrorpage.outputthrowable(throwable;stringbuilder;boolean)", "org.apache.wicket.markup.html.packageresourcetest.packageresourcetest()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.defaultbuttonimageresource(int;int;string)", "org.apache.wicket.markup.html.form.formcomponent$messagesource.formcomponent$messagesource(formcomponent)", "org.apache.wicket.markup.html.panel.panel.<clinit>()", "org.apache.wicket.markup.parser.xmltag.xmltag(textsegment;tagtype)", "org.apache.wicket.markup.defaultmarkupresourcestreamprovider.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.markupcache.loadmarkup(markupcontainer;markupresourcestream;boolean)", "org.apache.wicket.markup.abstractmarkupparser.abstractmarkupparser(ixmlpullparser;markupresourcestream)", "org.apache.wicket.markup.markupfactory.checkmarkuptype(markupcontainer)", "org.apache.wicket.markup.markupcachetest.markupcachetest()", "org.apache.wicket.markup.markupresourcestream.setcachekey(string)", "org.apache.wicket.markup.html.webpage.validateheaders()", "org.apache.wicket.markup.markupcache.getmarkupfromcache(string;markupcontainer)", "org.apache.wicket.markup.html.form.formcomponent.formcomponent(string;imodel)", "org.apache.wicket.markup.html.panel.emptypanel.emptypanel(string)", "org.apache.wicket.markup.markupparser.markupparser(ixmlpullparser;markupresourcestream)", "org.apache.wicket.markup.head.resourceaggregator$recordedheaderitem.addlocation(object;int;int)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.gettype()", "org.apache.wicket.markup.html.list.tabletest.createtable(int;int)", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.setautomaticlinking(boolean)", "org.apache.wicket.markup.containerinfo.containerinfo(markupcontainer)", "org.apache.wicket.markup.html.webcomponent.webcomponent(string)", "org.apache.wicket.markup.containerinfo.containerinfo(class;locale;string;string;markuptype)", "org.apache.wicket.markup.html.form.formcomponent.getvalidatorkeyprefix()", "org.apache.wicket.markup.html.form.abstractchoice.setchoicerenderer(ichoicerenderer)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklinktest$onlyanchorareaandlinkpage$1.ajaxfallbacklinktest$onlyanchorareaandlinkpage$1(onlyanchorareaandlinkpage;string)", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.<clinit>()", "org.apache.wicket.markup.loader.defaultmarkuploader.defaultmarkuploader()", "org.apache.wicket.markup.loader.inheritedmarkupmarkuploader.loadmarkup(markupcontainer;markupresourcestream;imarkuploader;boolean)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.setheight(int)", "org.apache.wicket.markup.parser.abstractmarkupfilter.postprocess(markup)", "org.apache.wicket.markup.foo.foo(string)", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.conditionalcommentfilter()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.javascriptreferenceheaderitem(resourcereference;pageparameters;string;boolean;string;string)", "org.apache.wicket.markup.markupfactory.getmarkup(markupcontainer;class;boolean)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getdependencies()", "org.apache.wicket.markup.html.link.downloadlinktest.downloadlinktest()", "org.apache.wicket.markup.head.internal.headerresponse.markrendered(object)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string)", "org.apache.wicket.markup.markupcachetest$markupcachingassumingcomponent.getmarkuptype()", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.onspecialtag(htmlspecialtag)", "org.apache.wicket.markup.markupparser.onappendmarkupfilter(imarkupfilter)", "org.apache.wicket.markup.head.internal.headerresponse.headerresponse()", "org.apache.wicket.markup.html.form.labeledwebmarkupcontainer.getlabel()", "org.apache.wicket.markup.html.decoratingheaderresponse.getrealresponse()", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.getmarkup(markupcontainer;component)", "org.apache.wicket.markup.parser.filter.headforcetagidhandler.headforcetagidhandler(class)", "org.apache.wicket.markup.head.priorityfirstcomparator.comparewithingroup(recordedheaderitem;recordedheaderitem)", "org.apache.wicket.markup.markupfactory.newmarkupparser(markupresourcestream)", "org.apache.wicket.markup.html.image.image.image(string;iresource)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationincrementlink.islast()", "org.apache.wicket.markup.parser.filter.headersectionpanel_4.headersectionpanel_4(string)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.converttolist(throwable)", "org.apache.wicket.markup.html.basic.simplepage_8.simplepage_8()", "org.apache.wicket.markup.head.javascriptheaderitem.internalrenderjavascriptreference(response;string;string;boolean;string;string)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.linksto(page)", "org.apache.wicket.markup.parser.filter.htmlheadersectionhandlertest$custommarkuppage.htmlheadersectionhandlertest$custommarkuppage()", "org.apache.wicket.markup.html.pages.exceptionerrorpage.getstacktrace(throwable)", "org.apache.wicket.markup.html.form.formcomponent$2.visitchildren(object)", "org.apache.wicket.markup.html.list.pageablelistview.getitemcount()", "org.apache.wicket.markup.markupcache.loadmarkupandwatchforchanges(markupcontainer;markupresourcestream;boolean)", "org.apache.wicket.markup.html.securepackageresourceguard$simplecache.put(string;boolean)", "org.apache.wicket.markup.resolver.wicketmessageresolver.<clinit>()", "org.apache.wicket.markup.html.form.abstracttextcomponent.isinputnullable()", "org.apache.wicket.markup.html.form.autolabelresolver.<clinit>()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getprovidedresources()", "org.apache.wicket.markup.html.list.listview.getviewsize()", "org.apache.wicket.markup.head.cssreferenceheaderitem.cssreferenceheaderitem(resourcereference;pageparameters;string;string)", "org.apache.wicket.markup.html.form.form.onbeforerender()", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.postprocess(markup)", "org.apache.wicket.markup.html.securepackageresourceguard$searchpattern.converttoregex(string)", "org.apache.wicket.markup.head.javascriptheaderitem.getcondition()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.getmessage(string;map)", "org.apache.wicket.markup.markupcachetest.before()", "org.apache.wicket.markup.html.decoratingheaderresponse.markrendered(object)", "org.apache.wicket.markup.html.list.listviewtest.createlistview(int)", "org.apache.wicket.markup.markupcache.newcacheimplementation()", "org.apache.wicket.markup.head.cssheaderitem.internalrendercssreference(response;string;string;string)", "org.apache.wicket.markup.head.resourceaggregator$recordedheaderitem.getlocations()", "org.apache.wicket.markup.html.form.validationerrorfeedback.tostring()", "org.apache.wicket.markup.renderstrategy.abstractheaderrenderstrategy.renderrootcomponent(htmlheadercontainer;headerstreamstate;component)", "org.apache.wicket.markup.html.pages.abstracterrorpage.isversioned()", "org.apache.wicket.markup.html.securepackageresourceguard.<clinit>()", "org.apache.wicket.markup.html.basic.multilinelabel.multilinelabel(string;imodel)", "org.apache.wicket.markup.markupresourcestream.setwicketnamespace(string)", "org.apache.wicket.markup.head.headeritem.headeritem()", "org.apache.wicket.markup.head.resourceaggregator.rendercombinedeventscripts()", "org.apache.wicket.markup.html.border.border$borderbodycontainer.border$borderbodycontainer(border;string)", "org.apache.wicket.markup.parser.filter.htmlheadersectionhandlertest$custommarkuppage.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.htmlspecialtag.htmlspecialtag(xmltag;httptagtype)", "org.apache.wicket.markup.html.form.form.findsubmittingbutton()", "org.apache.wicket.markup.markupfactory.getcontainerclass(markupcontainer;class)", "org.apache.wicket.markup.html.basic.label.label(string)", "org.apache.wicket.markup.html.securepackageresourceguard.acceptabsolutepath(string)", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.downloadlinktest$filenamemodel(downloadlinktest;1)", "org.apache.wicket.markup.markupparser$markupfilterlist.markupparser$markupfilterlist(markupparser)", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadstatusresource.uploadstatusresource()", "org.apache.wicket.markup.html.form.abstracttextcomponent.resolvetype()", "org.apache.wicket.markup.head.resourceaggregator$recordedheaderitem.resourceaggregator$recordedheaderitem(headeritem)", "org.apache.wicket.markup.resolver.fragmentresolver.<clinit>()", "org.apache.wicket.markup.html.link.abstractlink.onbeforerender()", "org.apache.wicket.markup.markupresourcestream.setencoding(string)", "org.apache.wicket.markup.html.form.formcomponent$messagesource.formcomponent$messagesource(formcomponent;1)", "org.apache.wicket.markup.head.priorityfirstcomparator.priorityfirstcomparator(boolean)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.getheight()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.cullpagenumber(long)", "org.apache.wicket.markup.rawmarkup.tostring()", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference)", "org.apache.wicket.markup.html.link.downloadlink.downloadlink(string;imodel;imodel)", "org.apache.wicket.markup.html.form.autolabelresolver.autolabelresolver()", "org.apache.wicket.markup.html.form.formcomponent.setconvertedinput(object)", "org.apache.wicket.markup.html.securepackageresourceguard$simplecache.securepackageresourceguard$simplecache(int)", "org.apache.wicket.markup.loader.simplemarkuploader.simplemarkuploader()", "org.apache.wicket.markup.resolver.autolinkresolver$tagreferenceresolver.autolinkresolver$tagreferenceresolver(string)", "org.apache.wicket.markup.defaultmarkupcachekeyprovider.getcachekey(markupcontainer;class)", "org.apache.wicket.markup.parser.xmlpullparser.getelement()", "org.apache.wicket.markup.markupfactory.getmarkup(markupcontainer;boolean)", "org.apache.wicket.markup.html.list.tabletest$1.tabletest$1(tabletest;string;imodel;int)", "org.apache.wicket.markup.html.form.autolabeltextresolver.autolabeltextresolver()", "org.apache.wicket.markup.resolver.markupinheritanceresolver.markupinheritanceresolver()", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.getscaledimageinstance(attributes)", "org.apache.wicket.markup.parser.abstractmarkupfilter.abstractmarkupfilter(markupresourcestream)", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.access$000()", "org.apache.wicket.markup.html.list.listview.setviewsize(int)", "org.apache.wicket.markup.loader.inheritedmarkupmarkuploader.inheritedmarkupmarkuploader()", "org.apache.wicket.markup.html.list.listview.listview(string;imodel)", "org.apache.wicket.markup.html.internal.headerresponsetest$1.headerresponsetest$1(headerresponsetest;response)", "org.apache.wicket.markup.html.form.formcomponenttest$1myvalidator.validate(ivalidatable)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getid()", "org.apache.wicket.markup.html.form.form.getvalidatorkeyprefix()", "org.apache.wicket.markup.parser.filter.htmlheadersectionhandlertest.htmlheadersectionhandlertest()", "org.apache.wicket.markup.head.resourceaggregator$recordedheaderitemlocation.resourceaggregator$recordedheaderitemlocation(object;int;int)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.isfirst()", "org.apache.wicket.markup.html.packageresourcetest$4.packageresourcetest$4(packageresourcetest;class;string;locale;string;string)", "org.apache.wicket.markup.head.internal.headerresponse.render(headeritem)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.islast()", "org.apache.wicket.markup.html.form.formcomponent.checkrequired()", "org.apache.wicket.markup.head.javascriptheaderitem.javascriptheaderitem(string)", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.relativepathprefixhandler()", "org.apache.wicket.markup.html.packageresourceguard.accept(class;string)", "org.apache.wicket.markup.html.list.pageablelistview.setcurrentpage(long)", "org.apache.wicket.markup.parser.xmlpullparser.getencoding()"]}, "markupfactory": {"distance": 0.9444, "methods": ["org.apache.wicket.markup.markupfactory.loadmarkup(markupcontainer;markupresourcestream;boolean)", "org.apache.wicket.markup.markupfactory.getmarkupcache()", "org.apache.wicket.markup.markupfactory.getmarkupresourcestream(markupcontainer;class)", "org.apache.wicket.markup.markupfactory.hasmarkupcache()", "org.apache.wicket.markup.markupfactory.onappendmarkupfilter(imarkupfilter)", "org.apache.wicket.markup.markupfactory.newxmlpullparser()", "org.apache.wicket.markup.markupfactory.get()", "org.apache.wicket.markup.markupfactory.<clinit>()", "org.apache.wicket.markup.markupfactory.getmarkuploader()", "org.apache.wicket.markup.markupfactory.getmarkupresourcestreamprovider(markupcontainer)", "org.apache.wicket.markup.markupfactory.markupfactory()", "org.apache.wicket.markup.markupfactory.checkmarkuptype(markupcontainer)", "org.apache.wicket.markup.markupfactory.getmarkup(markupcontainer;class;boolean)", "org.apache.wicket.markup.markupfactory.newmarkupparser(markupresourcestream)", "org.apache.wicket.markup.markupfactory.getcontainerclass(markupcontainer;class)", "org.apache.wicket.markup.markupfactory.getmarkup(markupcontainer;boolean)"]}, "markupparser": {"distance": 1.25, "methods": ["org.apache.wicket.markup.markupparser.initializemarkupfilters(markup)", "org.apache.wicket.markup.markupparser.markupparser(string)", "org.apache.wicket.markup.markupparser.getmarkupfilters()", "org.apache.wicket.markup.markupparser.markupparser(ixmlpullparser;markupresourcestream)", "org.apache.wicket.markup.markupparser.onappendmarkupfilter(imarkupfilter)"]}, "markupparser$markupfilterlist": {"distance": 1.25, "methods": ["org.apache.wicket.markup.markupparser$markupfilterlist.add(imarkupfilter)", "org.apache.wicket.markup.markupparser$markupfilterlist.onadd(imarkupfilter)", "org.apache.wicket.markup.markupparser$markupfilterlist.add(imarkupfilter;class)", "org.apache.wicket.markup.markupparser$markupfilterlist.firstindexofclass(class)", "org.apache.wicket.markup.markupparser$markupfilterlist.markupparser$markupfilterlist(markupparser)"]}, "markupresourcestream": {"distance": 0.9505, "methods": ["org.apache.wicket.markup.markupresourcestream.getcachekey()", "org.apache.wicket.markup.markupresourcestream.getcontainerinfo()", "org.apache.wicket.markup.markupresourcestream.getresource()", "org.apache.wicket.markup.markupresourcestream.markupresourcestream(iresourcestream;containerinfo;class)", "org.apache.wicket.markup.markupresourcestream.tostring()", "org.apache.wicket.markup.markupresourcestream.lastmodifiedtime()", "org.apache.wicket.markup.markupresourcestream.markupresourcestream(iresourcestream)", "org.apache.wicket.markup.markupresourcestream.setdoctype(charsequence)", "org.apache.wicket.markup.markupresourcestream.locationasstring()", "org.apache.wicket.markup.markupresourcestream.setcachekey(string)", "org.apache.wicket.markup.markupresourcestream.setwicketnamespace(string)", "org.apache.wicket.markup.markupresourcestream.setencoding(string)"]}, "abstractmarkupparser": {"distance": 0.9375, "methods": ["org.apache.wicket.markup.abstractmarkupparser.getmarkupfilters()", "org.apache.wicket.markup.abstractmarkupparser.handlerawtext(string)", "org.apache.wicket.markup.abstractmarkupparser.abstractmarkupparser(string)", "org.apache.wicket.markup.abstractmarkupparser.removecomment(string)", "org.apache.wicket.markup.abstractmarkupparser.parsemarkup()", "org.apache.wicket.markup.abstractmarkupparser.parse()", "org.apache.wicket.markup.abstractmarkupparser.getnexttag()", "org.apache.wicket.markup.abstractmarkupparser.postprocess(markup)", "org.apache.wicket.markup.abstractmarkupparser.abstractmarkupparser(ixmlpullparser;markupresourcestream)"]}, "containerinfo": {"distance": 0.84, "methods": ["org.apache.wicket.markup.containerinfo.getcontainerclass()", "org.apache.wicket.markup.containerinfo.containerinfo(markupcontainer)", "org.apache.wicket.markup.containerinfo.containerinfo(class;locale;string;string;markuptype)"]}, "componenttag": {"distance": 0.9581, "methods": ["org.apache.wicket.markup.componenttag.isclose()", "org.apache.wicket.markup.componenttag.getid()", "org.apache.wicket.markup.componenttag.ismodified()", "org.apache.wicket.markup.componenttag.getflag(int)", "org.apache.wicket.markup.componenttag.componenttag(xmltag)"]}, "defaultpagefactory": {"distance": 1.3333, "methods": ["org.apache.wicket.session.defaultpagefactory.processpage(irequestablepage;pageparameters)", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.defaultpagefactory.newpage(constructor;pageparameters)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;object)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.defaultpagefactory.isbookmarkable(class)", "org.apache.wicket.session.defaultpagefactory.<clinit>()"]}, "httpsessionstore$sessionbindinglistener": {"distance": 1.3333, "methods": ["org.apache.wicket.session.httpsessionstore$sessionbindinglistener.httpsessionstore$sessionbindinglistener(string)"]}, "httpsessionstore": {"distance": 0.9474, "methods": ["org.apache.wicket.session.httpsessionstore.registerunboundlistener(unboundlistener)", "org.apache.wicket.session.httpsessionstore.lookup(request)", "org.apache.wicket.session.httpsessionstore.httpsessionstore()", "org.apache.wicket.session.httpsessionstore.getattribute(request;string)", "org.apache.wicket.session.httpsessionstore.destroy()", "org.apache.wicket.session.httpsessionstore.setattribute(request;string;serializable)", "org.apache.wicket.session.httpsessionstore.getbindlisteners()", "org.apache.wicket.session.httpsessionstore.gethttpservletrequest(request)", "org.apache.wicket.session.httpsessionstore.bind(request;session)", "org.apache.wicket.session.httpsessionstore.gethttpsession(request;boolean)", "org.apache.wicket.session.httpsessionstore.onbind(request;session)", "org.apache.wicket.session.httpsessionstore.getsessionid(request;boolean)", "org.apache.wicket.session.httpsessionstore.getsessionattributeprefix(request)"]}, "classvisitfilter": {"distance": 1.0, "methods": ["org.apache.wicket.util.visit.classvisitfilter.visitobject(object)", "org.apache.wicket.util.visit.classvisitfilter.visitchildren(object)", "org.apache.wicket.util.visit.classvisitfilter.classvisitfilter(class)"]}, "conditionalcommentfilter": {"distance": 1.5, "methods": ["org.apache.wicket.markup.parser.filter.conditionalcommentfilter.conditionalcommentfilter()", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.onspecialtag(htmlspecialtag)", "org.apache.wicket.markup.parser.filter.conditionalcommentfilter.postprocess(markup)"]}, "enclosurehandler": {"distance": 1.6, "methods": ["org.apache.wicket.markup.parser.filter.enclosurehandler.<clinit>()", "org.apache.wicket.markup.parser.filter.enclosurehandler.enclosurehandler()"]}, "openclosetagexpander": {"distance": 0.8333, "methods": ["org.apache.wicket.markup.parser.filter.openclosetagexpander.openclosetagexpander()", "org.apache.wicket.markup.parser.filter.openclosetagexpander.nextelement()"]}, "styleandscriptidentifier": {"distance": 1.0, "methods": ["org.apache.wicket.markup.parser.filter.styleandscriptidentifier.postprocess(markup)", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.styleandscriptidentifier()", "org.apache.wicket.markup.parser.filter.styleandscriptidentifier.shouldwrapincdata(string)"]}, "htmlhandler": {"distance": 1.3333, "methods": ["org.apache.wicket.markup.parser.filter.htmlhandler.htmlhandler()", "org.apache.wicket.markup.parser.filter.htmlhandler.postprocess(markup)"]}, "inlineenclosurehandler": {"distance": 1.6, "methods": ["org.apache.wicket.markup.parser.filter.inlineenclosurehandler.inlineenclosurehandler()"]}, "relativepathprefixhandler": {"distance": 1.6, "methods": ["org.apache.wicket.markup.parser.filter.relativepathprefixhandler.<clinit>()", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.relativepathprefixhandler(markupresourcestream)", "org.apache.wicket.markup.parser.filter.relativepathprefixhandler.relativepathprefixhandler()"]}, "wicketmessagetaghandler": {"distance": 2.0, "methods": ["org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.wicketmessagetaghandler()", "org.apache.wicket.markup.parser.filter.wicketmessagetaghandler.wicketmessagetaghandler(markupresourcestream)"]}, "wicketlinktaghandler": {"distance": 1.1333, "methods": ["org.apache.wicket.markup.parser.filter.wicketlinktaghandler.wicketlinktaghandler()", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.setautomaticlinking(boolean)", "org.apache.wicket.markup.parser.filter.wicketlinktaghandler.<clinit>()"]}, "delegatelogdata": {"distance": 1.0, "methods": ["org.apache.wicket.request.handler.logger.delegatelogdata.delegatelogdata(ilogdata)"]}, "abstracttime": {"distance": 1.0833, "methods": ["org.apache.wicket.util.time.abstracttime.<clinit>()", "org.apache.wicket.util.time.abstracttime.before(abstracttimevalue)", "org.apache.wicket.util.time.abstracttime.after(abstracttimevalue)", "org.apache.wicket.util.time.abstracttime.abstracttime(long)"]}, "time": {"distance": 1.0171, "methods": ["org.apache.wicket.util.time.duration.milliseconds(long)", "org.apache.wicket.util.time.time.<clinit>()", "org.apache.wicket.util.time.duration.hours(int)", "org.apache.wicket.util.time.duration.duration(long)", "org.apache.wicket.util.time.time.fromnow()", "org.apache.wicket.util.time.abstracttimevalue.abstracttimevalue(long)", "org.apache.wicket.util.time.time.time(long)", "org.apache.wicket.util.time.duration.sleep()", "org.apache.wicket.util.time.abstracttime.<clinit>()", "org.apache.wicket.util.time.abstracttime.before(abstracttimevalue)", "org.apache.wicket.util.time.duration.<clinit>()", "org.apache.wicket.util.time.time.subtract(time)", "org.apache.wicket.util.time.duration.minutes(int)", "org.apache.wicket.util.time.time.elapsedsince()", "org.apache.wicket.util.time.duration.seconds()", "org.apache.wicket.util.time.time.add(duration)", "org.apache.wicket.util.time.abstracttime.after(abstracttimevalue)", "org.apache.wicket.util.time.time.millis(long)", "org.apache.wicket.util.time.abstracttimevalue.getmilliseconds()", "org.apache.wicket.util.time.time.now()", "org.apache.wicket.util.time.duration.seconds(int)", "org.apache.wicket.util.time.abstracttime.abstracttime(long)", "org.apache.wicket.util.time.duration.days(int)"]}, "duration": {"distance": 1.1111, "methods": ["org.apache.wicket.util.time.duration.milliseconds(long)", "org.apache.wicket.util.time.duration.hours(int)", "org.apache.wicket.util.time.duration.duration(long)", "org.apache.wicket.util.time.duration.sleep()", "org.apache.wicket.util.time.duration.<clinit>()", "org.apache.wicket.util.time.duration.minutes(int)", "org.apache.wicket.util.time.duration.seconds()", "org.apache.wicket.util.time.duration.seconds(int)", "org.apache.wicket.util.time.duration.days(int)"]}, "abstractresourcestream": {"distance": 0.9375, "methods": ["org.apache.wicket.util.resource.abstractresourcestream.getlocale()", "org.apache.wicket.util.resource.abstractresourcestream.setvariation(string)", "org.apache.wicket.util.resource.abstractresourcestream.getstyle()", "org.apache.wicket.util.resource.abstractresourcestream.setstyle(string)", "org.apache.wicket.util.resource.abstractresourcestream.abstractresourcestream()", "org.apache.wicket.util.resource.abstractresourcestream.getvariation()", "org.apache.wicket.util.resource.abstractresourcestream.setlocale(locale)"]}, "abstractstringresourcestream": {"distance": 0.9778, "methods": ["org.apache.wicket.util.resource.abstractstringresourcestream.lastmodifiedtime()", "org.apache.wicket.util.resource.abstractstringresourcestream.abstractstringresourcestream(string)", "org.apache.wicket.util.resource.abstractstringresourcestream.length()", "org.apache.wicket.util.resource.abstractstringresourcestream.getcontenttype()", "org.apache.wicket.util.resource.abstractstringresourcestream.getinputstream()", "org.apache.wicket.util.resource.abstractstringresourcestream.getcharset()", "org.apache.wicket.util.resource.abstractstringresourcestream.close()"]}, "stringresourcestream": {"distance": 1.0, "methods": ["org.apache.wicket.util.resource.stringresourcestream.tostring()", "org.apache.wicket.util.resource.stringresourcestream.stringresourcestream(charsequence;string)", "org.apache.wicket.util.resource.stringresourcestream.getstring()", "org.apache.wicket.util.resource.stringresourcestream.stringresourcestream(charsequence)"]}, "requestadapter": {"distance": 0.8148, "methods": ["org.apache.wicket.page.requestadapter.requestadapter(ipagemanagercontext)", "org.apache.wicket.page.requestadapter.setsessionattribute(string;serializable)", "org.apache.wicket.page.requestadapter.getsessionid()", "org.apache.wicket.page.requestadapter.findpage(int)", "org.apache.wicket.page.requestadapter.touch(imanageablepage)", "org.apache.wicket.page.requestadapter.getsessionattribute(string)", "org.apache.wicket.page.requestadapter.bind()", "org.apache.wicket.page.requestadapter.commitrequest()"]}, "pagestoremanager": {"distance": 1.0, "methods": ["org.apache.wicket.page.pagestoremanager.newrequestadapter(ipagemanagercontext)", "org.apache.wicket.page.pagestoremanager.access$200(pagestoremanager)", "org.apache.wicket.page.pagestoremanager.pagestoremanager(string;ipagestore;ipagemanagercontext)", "org.apache.wicket.page.pagestoremanager.access$000()", "org.apache.wicket.page.pagestoremanager.access$100(pagestoremanager)"]}, "pagestoremanager$persistentrequestadapter": {"distance": 1.25, "methods": ["org.apache.wicket.page.pagestoremanager$persistentrequestadapter.getpage(int)", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.storetouchedpages(list)", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.getsessionentry(boolean)", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.getattributename()", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.pagestoremanager$persistentrequestadapter(pagestoremanager;ipagemanagercontext)"]}, "pagestoremanager$sessionentry": {"distance": 0.95, "methods": ["org.apache.wicket.page.pagestoremanager$sessionentry.findpage(int)", "org.apache.wicket.page.pagestoremanager$sessionentry.pagestoremanager$sessionentry(string;string)", "org.apache.wicket.page.pagestoremanager$sessionentry.getpagestore()", "org.apache.wicket.page.pagestoremanager$sessionentry.setsessioncache(list)", "org.apache.wicket.page.pagestoremanager$sessionentry.getpage(int)"]}, "pageaccesssynchronizer": {"distance": 1.0, "methods": ["org.apache.wicket.page.pageaccesssynchronizer.unlockallpages()", "org.apache.wicket.page.pageaccesssynchronizer.pageaccesssynchronizer(duration)", "org.apache.wicket.page.pageaccesssynchronizer.<clinit>()", "org.apache.wicket.page.pageaccesssynchronizer.internalunlockpages(integer)", "org.apache.wicket.page.pageaccesssynchronizer.lockpage(int)", "org.apache.wicket.page.pageaccesssynchronizer.adapt(ipagemanager)"]}, "abstractpagemanager": {"distance": 1.0625, "methods": ["org.apache.wicket.page.abstractpagemanager.commitrequest()", "org.apache.wicket.page.abstractpagemanager.touchpage(imanageablepage)", "org.apache.wicket.page.abstractpagemanager.getcontext()", "org.apache.wicket.page.abstractpagemanager.getpage(int)", "org.apache.wicket.page.abstractpagemanager.getrequestadapter()", "org.apache.wicket.page.abstractpagemanager.abstractpagemanager(ipagemanagercontext)"]}, "pagingnavigationlink": {"distance": 0.8667, "methods": ["org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.pagingnavigationlink(string;ipageable;long)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.getpagenumber()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.linksto(page)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.cullpagenumber(long)", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.isfirst()", "org.apache.wicket.markup.html.navigation.paging.pagingnavigationlink.islast()"]}, "requestlogger": {"distance": 0.9286, "methods": ["org.apache.wicket.jmx.requestlogger.requestlogger(application)"]}, "multilinelabel": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.basic.multilinelabel.multilinelabel(string;string)", "org.apache.wicket.markup.html.basic.multilinelabel.multilinelabel(string;imodel)"]}, "label": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.basic.label.label(string;imodel)", "org.apache.wicket.markup.html.basic.label.label(string;string)", "org.apache.wicket.markup.html.basic.label.label(string)"]}, "webpagerenderer": {"distance": 1.0, "methods": ["org.apache.wicket.request.handler.render.webpagerenderer.<clinit>()", "org.apache.wicket.request.handler.render.webpagerenderer.getandremovebufferedresponse(url)", "org.apache.wicket.request.handler.render.webpagerenderer.isajax(requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.renderpage(url;requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.respond(requestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.webpagerenderer(renderpagerequesthandler)"]}, "foo": {"distance": 0.9318, "methods": ["org.apache.wicket.markup.foo.getlocale()", "org.apache.wicket.markup.foo.getmarkuptype()", "org.apache.wicket.markup.foo.foo(string)"]}, "roles": {"distance": 1.3333, "methods": ["org.apache.wicket.authroles.authorization.strategies.role.roles.roles(string)", "org.apache.wicket.authroles.authorization.strategies.role.roles.roles()"]}, "abstractroleauthorizationstrategy": {"distance": 1.0, "methods": ["org.apache.wicket.authroles.authorization.strategies.role.abstractroleauthorizationstrategy.hasany(roles)", "org.apache.wicket.authroles.authorization.strategies.role.abstractroleauthorizationstrategy.abstractroleauthorizationstrategy(irolecheckingstrategy)"]}, "properties": {"distance": 1.0, "methods": ["org.apache.wicket.properties.testpage.gettext2()", "org.apache.wicket.properties.testpage.gettext9()", "org.apache.wicket.properties.testpage.gettext11()", "org.apache.wicket.properties.testpage.gettext14()", "org.apache.wicket.resource.properties.getstring(string)", "org.apache.wicket.properties.testpage$mytextfield.setinput(string)", "org.apache.wicket.properties.testpage$1.getvalidatorkeyprefix()", "org.apache.wicket.properties.testpage$mytextfield.testpage$mytextfield(string;string)", "org.apache.wicket.properties.mytesterapplication.mytesterapplication()", "org.apache.wicket.properties.propertiestest.propertiestest()", "org.apache.wicket.properties.testform.testform(string)", "org.apache.wicket.properties.testpage$1.testpage$1(testpage;string)", "org.apache.wicket.resource.properties.<clinit>()", "org.apache.wicket.resource.properties.properties(string;valuemap)", "org.apache.wicket.properties.testpage.gettext5()", "org.apache.wicket.properties.propertiestest$1.getvariation()", "org.apache.wicket.properties.testpage.gettext7()", "org.apache.wicket.properties.testpage.gettext4()", "org.apache.wicket.properties.testpage.gettext6()", "org.apache.wicket.properties.testpage.gettext8()", "org.apache.wicket.properties.propertiestest$1.propertiestest$1(propertiestest)", "org.apache.wicket.properties.testpage.testpage()", "org.apache.wicket.properties.propertiestest.newapplication()", "org.apache.wicket.properties.testpanel.testpanel(string)", "org.apache.wicket.properties.myapplication.myapplication()", "org.apache.wicket.properties.testpage.gettext1()", "org.apache.wicket.properties.testpage.gettext10()", "org.apache.wicket.properties.testpage.gettext13()", "org.apache.wicket.properties.testpage.gettext3()", "org.apache.wicket.properties.testpage.gettext12()", "org.apache.wicket.properties.testpage$mytextfield.getinput()"]}, "propertiesfactory": {"distance": 0.8857, "methods": ["org.apache.wicket.resource.propertiesfactory.load(class;string)", "org.apache.wicket.resource.propertiesfactory.<clinit>()", "org.apache.wicket.resource.propertiesfactory.newpropertiescache()", "org.apache.wicket.resource.propertiesfactory.loadfromloader(ipropertiesloader;iresourcestream)", "org.apache.wicket.resource.propertiesfactory.propertiesfactory(ipropertiesfactorycontext)"]}, "utfpropertiesfilepropertiesloader": {"distance": 1.0, "methods": ["org.apache.wicket.resource.utfpropertiesfilepropertiesloader.utfpropertiesfilepropertiesloader(string;string)", "org.apache.wicket.resource.utfpropertiesfilepropertiesloader.getfileextension()"]}, "xmlfilepropertiesloader": {"distance": 1.0, "methods": ["org.apache.wicket.resource.xmlfilepropertiesloader.xmlfilepropertiesloader(string)", "org.apache.wicket.resource.xmlfilepropertiesloader.getfileextension()"]}, "isopropertiesfilepropertiesloader": {"distance": 1.0, "methods": ["org.apache.wicket.resource.isopropertiesfilepropertiesloader.isopropertiesfilepropertiesloader(string)", "org.apache.wicket.resource.isopropertiesfilepropertiesloader.loadjavaproperties(inputstream)", "org.apache.wicket.resource.isopropertiesfilepropertiesloader.loadwicketproperties(inputstream)", "org.apache.wicket.resource.isopropertiesfilepropertiesloader.getfileextension()"]}, "resourcestreamlocator": {"distance": 1.0, "methods": ["org.apache.wicket.core.util.resource.locator.resourcestreamlocator.resourcestreamlocator()", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.locate(class;string;string;string;locale;string;boolean)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.locate(class;string)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.resourcestreamlocator(list)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.newresourcenameiterator(string;locale;string;string;string;boolean)", "org.apache.wicket.core.util.resource.locator.resourcestreamlocator.<clinit>()"]}, "resourcenameiterator": {"distance": 0.9286, "methods": ["org.apache.wicket.core.util.resource.locator.resourcenameiterator.getstyle()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.getlocale()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.prepend(object;char)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.resourcenameiterator(string;string;string;locale;iterable;boolean)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.tostring()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.newlocaleresourcenameiterator(locale;boolean)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.newstyleandvariationresourcenameiterator(string;string)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.hasnext()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.newextensionresourcenameiterator(iterable)", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.getvariation()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.getextension()", "org.apache.wicket.core.util.resource.locator.resourcenameiterator.next()"]}, "debugsettings": {"distance": 0.9231, "methods": ["org.apache.wicket.settings.def.debugsettings.islineprecisereportingonnewcomponentenabled()", "org.apache.wicket.settings.def.debugsettings.debugsettings()", "org.apache.wicket.settings.def.debugsettings.setajaxdebugmodeenabled(boolean)", "org.apache.wicket.settings.def.debugsettings.setdevelopmentutilitiesenabled(boolean)", "org.apache.wicket.settings.def.debugsettings.islineprecisereportingonaddcomponentenabled()", "org.apache.wicket.settings.def.debugsettings.setcomponentusecheck(boolean)", "org.apache.wicket.jmx.debugsettings.debugsettings(application)", "org.apache.wicket.settings.def.debugsettings.isdevelopmentutilitiesenabled()", "org.apache.wicket.settings.def.debugsettings.isoutputmarkupcontainerclassname()", "org.apache.wicket.settings.def.debugsettings.getcomponentusecheck()"]}, "applicationsettings": {"distance": 0.9231, "methods": ["org.apache.wicket.jmx.applicationsettings.applicationsettings(application)", "org.apache.wicket.settings.def.applicationsettings.setaccessdeniedpage(class)", "org.apache.wicket.settings.def.applicationsettings.getfeedbackmessagecleanupfilter()", "org.apache.wicket.settings.def.applicationsettings.checkpageclass(class)", "org.apache.wicket.settings.def.applicationsettings.setpageexpirederrorpage(class)", "org.apache.wicket.settings.def.applicationsettings.getclassresolver()", "org.apache.wicket.settings.def.applicationsettings.setinternalerrorpage(class)", "org.apache.wicket.settings.def.applicationsettings.applicationsettings()", "org.apache.wicket.settings.def.applicationsettings.setfeedbackmessagecleanupfilter(ifeedbackmessagefilter)"]}, "exceptionsettings": {"distance": 1.0, "methods": ["org.apache.wicket.settings.def.exceptionsettings.getunexpectedexceptiondisplay()", "org.apache.wicket.settings.def.exceptionsettings.exceptionsettings()", "org.apache.wicket.settings.def.exceptionsettings.setunexpectedexceptiondisplay(unexpectedexceptiondisplay)"]}, "frameworksettings": {"distance": 0.8333, "methods": ["org.apache.wicket.settings.def.frameworksettings.getserializer()", "org.apache.wicket.settings.def.frameworksettings.getdetachlistener()", "org.apache.wicket.settings.def.frameworksettings.frameworksettings(application)", "org.apache.wicket.settings.def.frameworksettings.dispatchevent(object;ievent;component)", "org.apache.wicket.settings.def.frameworksettings.add(ieventdispatcher)"]}, "javascriptlibrarysettings": {"distance": 0.8571, "methods": ["org.apache.wicket.settings.def.javascriptlibrarysettings.getwicketajaxreference()", "org.apache.wicket.settings.def.javascriptlibrarysettings.javascriptlibrarysettings()"]}, "markupsettings": {"distance": 0.9231, "methods": ["org.apache.wicket.settings.def.markupsettings.getstripcomments()", "org.apache.wicket.settings.def.markupsettings.markupsettings()", "org.apache.wicket.jmx.markupsettings.markupsettings(application)", "org.apache.wicket.settings.def.markupsettings.setstripwickettags(boolean)", "org.apache.wicket.settings.def.markupsettings.getautomaticlinking()", "org.apache.wicket.settings.def.markupsettings.setmarkupfactory(markupfactory)", "org.apache.wicket.settings.def.markupsettings.setstripcomments(boolean)", "org.apache.wicket.settings.def.markupsettings.getcompresswhitespace()", "org.apache.wicket.settings.def.markupsettings.getthrowexceptiononmissingxmldeclaration()", "org.apache.wicket.settings.def.markupsettings.getdefaultmarkupencoding()", "org.apache.wicket.settings.def.markupsettings.getdefaultbeforedisabledlink()", "org.apache.wicket.settings.def.markupsettings.getmarkupfactory()", "org.apache.wicket.settings.def.markupsettings.getdefaultafterdisabledlink()"]}, "storesettings": {"distance": 0.9722, "methods": ["org.apache.wicket.jmx.storesettings.storesettings(application)"]}, "requestcyclesettings": {"distance": 0.9231, "methods": ["org.apache.wicket.settings.def.requestcyclesettings.getgatherextendedbrowserinfo()", "org.apache.wicket.jmx.requestcyclesettings.requestcyclesettings(application)", "org.apache.wicket.settings.def.requestcyclesettings.getresponsefilters()", "org.apache.wicket.settings.def.requestcyclesettings.getresponserequestencoding()", "org.apache.wicket.settings.def.requestcyclesettings.requestcyclesettings()", "org.apache.wicket.settings.def.requestcyclesettings.getbufferresponse()", "org.apache.wicket.settings.def.requestcyclesettings.getrenderstrategy()", "org.apache.wicket.settings.def.requestcyclesettings.gettimeout()", "org.apache.wicket.settings.def.requestcyclesettings.addresponsefilter(iresponsefilter)"]}, "resourcesettings": {"distance": 0.9749, "methods": ["org.apache.wicket.settings.def.resourcesettings.getparentfolderplaceholder()", "org.apache.wicket.settings.def.resourcesettings.getdefaultcacheduration()", "org.apache.wicket.settings.def.resourcesettings.getcachingstrategy()", "org.apache.wicket.jmx.resourcesettings.resourcesettings(application)", "org.apache.wicket.settings.def.resourcesettings.getjavascriptcompressor()", "org.apache.wicket.settings.def.resourcesettings.getpropertiesfactory()", "org.apache.wicket.settings.def.resourcesettings.getresourcewatcher(boolean)", "org.apache.wicket.settings.def.resourcesettings.getresourcestreamlocator()", "org.apache.wicket.settings.def.resourcesettings.getresourcefinders()", "org.apache.wicket.settings.def.resourcesettings.setcsscompressor(icsscompressor)", "org.apache.wicket.settings.def.resourcesettings.getthrowexceptiononmissingresource()", "org.apache.wicket.settings.def.resourcesettings.getresourcepollfrequency()", "org.apache.wicket.settings.def.resourcesettings.setusedefaultonmissingresource(boolean)", "org.apache.wicket.settings.def.resourcesettings.setfilecleaner(ifilecleaner)", "org.apache.wicket.settings.def.resourcesettings.resourcesettings(application)", "org.apache.wicket.settings.def.resourcesettings.getpackageresourceguard()", "org.apache.wicket.settings.def.resourcesettings.setthrowexceptiononmissingresource(boolean)", "org.apache.wicket.settings.def.resourcesettings.setparentfolderplaceholder(string)", "org.apache.wicket.settings.def.resourcesettings.setresourcepollfrequency(duration)", "org.apache.wicket.settings.def.resourcesettings.getuseminifiedresources()", "org.apache.wicket.settings.def.resourcesettings.setcachingstrategy(iresourcecachingstrategy)", "org.apache.wicket.settings.def.resourcesettings.setuseminifiedresources(boolean)", "org.apache.wicket.settings.def.resourcesettings.getfilecleaner()", "org.apache.wicket.settings.def.resourcesettings.getstringresourceloaders()", "org.apache.wicket.settings.def.resourcesettings.getusedefaultonmissingresource()", "org.apache.wicket.settings.def.resourcesettings.getcsscompressor()", "org.apache.wicket.settings.def.resourcesettings.addresourcefactory(string;iresourcefactory)", "org.apache.wicket.settings.def.resourcesettings.isencodejsessionid()", "org.apache.wicket.settings.def.resourcesettings.getlocalizer()", "org.apache.wicket.settings.def.resourcesettings.setjavascriptcompressor(ijavascriptcompressor)", "org.apache.wicket.settings.def.resourcesettings.getheaderitemcomparator()"]}, "securitysettings": {"distance": 0.9495, "methods": ["org.apache.wicket.settings.def.securitysettings.getcryptfactory()", "org.apache.wicket.settings.def.securitysettings.getenforcemounts()", "org.apache.wicket.settings.def.securitysettings.getauthorizationstrategy()", "org.apache.wicket.settings.def.securitysettings.securitysettings()", "org.apache.wicket.jmx.securitysettings.securitysettings(application)", "org.apache.wicket.settings.def.securitysettings.setauthorizationstrategy(iauthorizationstrategy)", "org.apache.wicket.settings.def.securitysettings.getunauthorizedcomponentinstantiationlistener()"]}, "abstractstringlist": {"distance": 1.1111, "methods": ["org.apache.wicket.util.string.abstractstringlist.join(int;int;string)", "org.apache.wicket.util.string.abstractstringlist.join(string)", "org.apache.wicket.util.string.abstractstringlist.abstractstringlist()"]}, "letter": {"distance": 0.8333, "methods": ["org.apache.wicket.examples.hangman.letter.asstring()", "org.apache.wicket.examples.hangman.letter.tostring()", "org.apache.wicket.examples.hangman.letter.letter(char)"]}, "border": {"distance": 1.0, "methods": ["org.apache.wicket.markup.html.border.border.border(string)", "org.apache.wicket.markup.html.border.boxbordertest.boxbordertest()", "org.apache.wicket.markup.html.border.border.addtoborder(component[])", "org.apache.wicket.markup.html.border.bordertesthierarchypage_4.bordertesthierarchypage_4()", "org.apache.wicket.markup.html.border.bordercomponent1.bordercomponent1(string)", "org.apache.wicket.markup.html.border.border.border(string;imodel)", "org.apache.wicket.markup.html.border.boxbordertestpage_10.boxbordertestpage_10()", "org.apache.wicket.markup.html.border.border$borderbodycontainer.border$borderbodycontainer(border;string)"]}, "border$borderbodycontainer": {"distance": 1.0, "methods": ["org.apache.wicket.markup.html.border.border$borderbodycontainer.border$borderbodycontainer(border;string)"]}, "listenerinterfacelogdata": {"distance": 1.0139, "methods": ["org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.trytogetcomponentclass(ipageandcomponentprovider)", "org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.trytogetcomponentpath(ipageandcomponentprovider)", "org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.listenerinterfacelogdata(ipageandcomponentprovider;requestlistenerinterface;integer)", "org.apache.wicket.core.request.handler.logger.listenerinterfacelogdata.trytogetformsubmittingcomponent(ipageandcomponentprovider)"]}, "pagelogdata": {"distance": 1.0, "methods": ["org.apache.wicket.core.request.handler.logger.pagelogdata.pagelogdata(ipageprovider)", "org.apache.wicket.core.request.handler.logger.pagelogdata.trytogetpageclass(ipageprovider)"]}, "resourcereferencelogdata": {"distance": 1.0833, "methods": ["org.apache.wicket.core.request.handler.logger.resourcereferencelogdata.resourcereferencelogdata(resourcereferencerequesthandler)"]}, "resourcestreamlogdata": {"distance": 1.0833, "methods": ["org.apache.wicket.core.request.handler.logger.resourcestreamlogdata.resourcestreamlogdata(resourcestreamrequesthandler;iresourcestream)"]}, "abstractajaxbehavior": {"distance": 0.9444, "methods": ["org.apache.wicket.behavior.abstractajaxbehavior.abstractajaxbehavior()", "org.apache.wicket.behavior.abstractajaxbehavior.getcomponent()", "org.apache.wicket.behavior.abstractajaxbehavior.bind(component)"]}, "behavior": {"distance": 1.0714, "methods": ["org.apache.wicket.behavior.abstractajaxbehavior.abstractajaxbehavior()", "org.apache.wicket.behavior.behavior.onevent(component;ievent)", "org.apache.wicket.behavior.immutablebehavioridstest$mypage.getcontainer()", "org.apache.wicket.behavior.behavior.bind(component)", "org.apache.wicket.behavior.abstractajaxbehavior.getcomponent()", "org.apache.wicket.behavior.behavior.isenabled(component)", "org.apache.wicket.behavior.behavior.onconfigure(component)", "org.apache.wicket.behavior.immutablebehavioridstest$linkbehavior.immutablebehavioridstest$linkbehavior(string)", "org.apache.wicket.behavior.immutablebehavioridstest.immutablebehavioridstest()", "org.apache.wicket.behavior.behavior.getstatelesshint(component)", "org.apache.wicket.behavior.behavior.detach(component)", "org.apache.wicket.behavior.immutablebehavioridstest$mypage.immutablebehavioridstest$mypage()", "org.apache.wicket.behavior.behavior.istemporary(component)", "org.apache.wicket.behavior.immutablebehavioridstest$mypage.access$000(mypage)", "org.apache.wicket.behavior.behavior.behavior()", "org.apache.wicket.behavior.behavior.unbind(component)", "org.apache.wicket.behavior.abstractajaxbehavior.bind(component)"]}, "abstracterrorpage": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.pages.abstracterrorpage.abstracterrorpage()", "org.apache.wicket.markup.html.pages.abstracterrorpage.isversioned()"]}, "exceptionerrorpage": {"distance": 1.1667, "methods": ["org.apache.wicket.markup.html.pages.exceptionerrorpage.geterrormessage(throwable)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.exceptionerrorpage(throwable;page)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.outputthrowable(throwable;stringbuilder;boolean)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.converttolist(throwable)", "org.apache.wicket.markup.html.pages.exceptionerrorpage.getstacktrace(throwable)"]}, "abstractobjectchecker": {"distance": 1.0, "methods": ["org.apache.wicket.core.util.objects.checker.abstractobjectchecker.getexclusions()", "org.apache.wicket.core.util.objects.checker.abstractobjectchecker.check(object)", "org.apache.wicket.core.util.objects.checker.abstractobjectchecker.abstractobjectchecker()", "org.apache.wicket.core.util.objects.checker.abstractobjectchecker.abstractobjectchecker(list)", "org.apache.wicket.core.util.objects.checker.abstractobjectchecker.<clinit>()"]}, "checkingobjectoutputstream": {"distance": 1.1333, "methods": ["org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.checkfields(object;objectstreamclass)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.check(object)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.access$484(checkingobjectoutputstream;object)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.reset()", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.access$302(checkingobjectoutputstream;charsequence)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.access$600()", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.close()", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.toprettyprintedstack(string)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.checkingobjectoutputstream(outputstream;iobjectchecker[])", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.<clinit>()", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.access$200(checkingobjectoutputstream)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.internalcheck(object)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.writeobjectoverride(object)", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.isavailable()", "org.apache.wicket.core.util.objects.checker.checkingobjectoutputstream.access$500(checkingobjectoutputstream;object)"]}, "stringresourcemodel": {"distance": 0.9167, "methods": ["org.apache.wicket.model.stringresourcemodel.getstring()", "org.apache.wicket.model.stringresourcemodel.wraponassignment(component)", "org.apache.wicket.model.stringresourcemodel.getresourcekey()", "org.apache.wicket.model.stringresourcemodel.escapequotes(string)", "org.apache.wicket.model.stringresourcemodel.getparameters()", "org.apache.wicket.model.stringresourcemodel.getlocalizer()", "org.apache.wicket.model.stringresourcemodel.stringresourcemodel(string;component;imodel;string;object[])", "org.apache.wicket.model.stringresourcemodel.getstring(component)", "org.apache.wicket.model.stringresourcemodel.stringresourcemodel(string;component;imodel;object[])", "org.apache.wicket.model.stringresourcemodel.access$000(stringresourcemodel)", "org.apache.wicket.model.stringresourcemodel.access$100(stringresourcemodel;component)", "org.apache.wicket.model.stringresourcemodel.stringresourcemodel(string;imodel;object[])", "org.apache.wicket.model.stringresourcemodel.ondetach()", "org.apache.wicket.model.stringresourcemodel.load()", "org.apache.wicket.model.stringresourcemodel.setobject(string)"]}, "resourcemodel$assignmentwrapper": {"distance": 0.8333, "methods": ["org.apache.wicket.model.resourcemodel$assignmentwrapper.load()", "org.apache.wicket.model.resourcemodel$assignmentwrapper.ondetach()", "org.apache.wicket.model.resourcemodel$assignmentwrapper.resourcemodel$assignmentwrapper(resourcemodel;component)"]}, "resourcemodel": {"distance": 1.3333, "methods": ["org.apache.wicket.model.resourcemodel.resourcemodel(string;string)", "org.apache.wicket.model.resourcemodel.resourcemodel(string)", "org.apache.wicket.model.resourcemodel.access$000(resourcemodel)", "org.apache.wicket.model.resourcemodel.wraponassignment(component)", "org.apache.wicket.model.resourcemodel.access$100(resourcemodel)"]}, "propertymodel": {"distance": 1.0, "methods": ["org.apache.wicket.model.propertymodel.propertymodel(object;string)", "org.apache.wicket.model.propertymodel.propertyexpression()", "org.apache.wicket.model.propertymodel.tostring()"]}, "compoundpropertymodel$attachedcompoundpropertymodel": {"distance": 0.8333, "methods": ["org.apache.wicket.model.compoundpropertymodel$attachedcompoundpropertymodel.compoundpropertymodel$attachedcompoundpropertymodel(compoundpropertymodel;component)", "org.apache.wicket.model.compoundpropertymodel$attachedcompoundpropertymodel.propertyexpression()", "org.apache.wicket.model.compoundpropertymodel$attachedcompoundpropertymodel.detach()", "org.apache.wicket.model.compoundpropertymodel$attachedcompoundpropertymodel.getwrappedmodel()"]}, "compoundpropertymodel": {"distance": 1.5, "methods": ["org.apache.wicket.model.compoundpropertymodel.compoundpropertymodel(object)", "org.apache.wicket.model.compoundpropertymodel.wraponinheritance(component)", "org.apache.wicket.model.compoundpropertymodel.propertyexpression(component)"]}, "abstractpropertymodel": {"distance": 1.125, "methods": ["org.apache.wicket.model.abstractpropertymodel.setobject(object)", "org.apache.wicket.model.abstractpropertymodel.getobject()", "org.apache.wicket.model.abstractpropertymodel.abstractpropertymodel(object)", "org.apache.wicket.model.abstractpropertymodel.getinnermostmodelorobject()"]}, "abstractreadonlymodel": {"distance": 1.3333, "methods": ["org.apache.wicket.model.abstractreadonlymodel.detach()", "org.apache.wicket.model.abstractreadonlymodel.abstractreadonlymodel()", "org.apache.wicket.model.abstractreadonlymodel.tostring()"]}, "filenamewithversionresourcecachingstrategy": {"distance": 0.8333, "methods": ["org.apache.wicket.request.resource.caching.filenamewithversionresourcecachingstrategy.decorateurl(resourceurl;istaticcacheableresource)", "org.apache.wicket.request.resource.caching.filenamewithversionresourcecachingstrategy.undecorateurl(resourceurl)", "org.apache.wicket.request.resource.caching.filenamewithversionresourcecachingstrategy.filenamewithversionresourcecachingstrategy(string;iresourceversion)"]}, "noopresourcecachingstrategy": {"distance": 1.5, "methods": ["org.apache.wicket.request.resource.caching.noopresourcecachingstrategy.<clinit>()", "org.apache.wicket.request.resource.caching.noopresourcecachingstrategy.noopresourcecachingstrategy()", "org.apache.wicket.request.resource.caching.noopresourcecachingstrategy.undecorateurl(resourceurl)", "org.apache.wicket.request.resource.caching.noopresourcecachingstrategy.decorateurl(resourceurl;istaticcacheableresource)", "org.apache.wicket.request.resource.caching.noopresourcecachingstrategy.decorateresponse(resourceresponse;istaticcacheableresource)"]}, "webapplicationpath": {"distance": 1.25, "methods": ["org.apache.wicket.core.util.file.webapplicationpath.webapplicationpath(servletcontext;string)", "org.apache.wicket.core.util.file.webapplicationpath.<clinit>()", "org.apache.wicket.core.util.file.webapplicationpath.find(class;string)"]}, "conversionexception": {"distance": 0.9423, "methods": ["org.apache.wicket.util.convert.conversionexception.conversionexception(string)", "org.apache.wicket.util.convert.conversionexception.setsourcevalue(object)", "org.apache.wicket.util.convert.conversionexception.settargettype(class)", "org.apache.wicket.util.convert.conversionexception.setconverter(iconverter)", "org.apache.wicket.util.convert.conversionexception.setformat(format)", "org.apache.wicket.util.convert.conversionexception.setlocale(locale)"]}, "staticresourceversion": {"distance": 1.0, "methods": ["org.apache.wicket.request.resource.caching.version.staticresourceversion.staticresourceversion(string)", "org.apache.wicket.request.resource.caching.version.staticresourceversion.getversion(istaticcacheableresource)"]}, "bundlestringresourceloader": {"distance": 1.0, "methods": ["org.apache.wicket.resource.loader.bundlestringresourceloader.bundlestringresourceloader(string)", "org.apache.wicket.resource.loader.bundlestringresourceloader.loadstringresource(class;string;locale;string;string)"]}, "initializerstringresourceloader": {"distance": 1.5, "methods": ["org.apache.wicket.resource.loader.initializerstringresourceloader.loadstringresource(class;string;locale;string;string)", "org.apache.wicket.resource.loader.initializerstringresourceloader.initializerstringresourceloader(list)", "org.apache.wicket.resource.loader.initializerstringresourceloader.<clinit>()", "org.apache.wicket.resource.loader.initializerstringresourceloader.loadstringresource(component;string;locale;string;string)"]}, "abstractclassresolver": {"distance": 1.0, "methods": ["org.apache.wicket.application.abstractclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.abstractclassresolver.abstractclassresolver()", "org.apache.wicket.application.abstractclassresolver.resolveclass(string)", "org.apache.wicket.application.abstractclassresolver.getresources(string)"]}, "dummyhomepage": {"distance": 1.5, "methods": ["org.apache.wicket.util.tester.dummyhomepage.dummyhomepage()"]}, "result": {"distance": 1.3333, "methods": ["org.apache.wicket.util.tester.result.result(boolean;string)", "org.apache.wicket.util.tester.result.result(boolean)", "org.apache.wicket.util.tester.result.wasfailed()", "org.apache.wicket.util.tester.result.<clinit>()", "org.apache.wicket.util.tester.result.pass()"]}, "wickettester": {"distance": 0.8529, "methods": ["org.apache.wicket.util.tester.wickettester.assertcontains(string)", "org.apache.wicket.util.tester.wickettester.assertredirecturl(string)", "org.apache.wicket.util.tester.wickettester.assertnoerrormessage()", "org.apache.wicket.util.tester.wickettester.wickettester(webapplication)", "org.apache.wicket.util.tester.wickettester.executetest(class;class;string)", "org.apache.wicket.util.tester.wickettester.<clinit>()", "org.apache.wicket.util.tester.wickettester.assertresult(result)", "org.apache.wicket.util.tester.wickettester.wickettester()", "org.apache.wicket.util.tester.wickettester.wickettester(webapplication;string)"]}, "basewickettester$testfilterconfig": {"distance": 1.0, "methods": ["org.apache.wicket.util.tester.basewickettester$testfilterconfig.getfiltername()", "org.apache.wicket.util.tester.basewickettester$testfilterconfig.getservletcontext()", "org.apache.wicket.util.tester.basewickettester$testfilterconfig.basewickettester$testfilterconfig(basewickettester)"]}, "autolinkresolver": {"distance": 0.9, "methods": ["org.apache.wicket.markup.resolver.autolinkresolver.<clinit>()", "org.apache.wicket.markup.resolver.autolinkresolver.autolinkresolver()"]}, "htmlheaderresolver": {"distance": 2.0, "methods": ["org.apache.wicket.markup.resolver.htmlheaderresolver.htmlheaderresolver()", "org.apache.wicket.markup.resolver.htmlheaderresolver.<clinit>()"]}, "abstractlink": {"distance": 0.875, "methods": ["org.apache.wicket.markup.html.link.abstractlink.abstractlink(string)", "org.apache.wicket.markup.html.link.abstractlink.ondetach()", "org.apache.wicket.markup.html.link.abstractlink.abstractlink(string;imodel)", "org.apache.wicket.markup.html.link.abstractlink.onbeforerender()"]}, "downloadlink": {"distance": 0.9167, "methods": ["org.apache.wicket.markup.html.link.downloadlink.detachmodels()", "org.apache.wicket.markup.html.link.downloadlink.downloadlink(string;imodel;imodel)"]}, "link": {"distance": 0.9583, "methods": ["org.apache.wicket.markup.html.link.abstractlink.abstractlink(string)", "org.apache.wicket.markup.html.link.link.isenabled()", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.downloadlinktest$filenamemodel(downloadlinktest)", "org.apache.wicket.markup.html.link.link.getstatelesshint()", "org.apache.wicket.markup.html.link.downloadlinktest$1.downloadlinktest$1(downloadlinktest)", "org.apache.wicket.markup.html.link.link.link(string)", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.wraponassignment(component)", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.detach()", "org.apache.wicket.markup.html.link.downloadlink.detachmodels()", "org.apache.wicket.markup.html.link.abstractlink.ondetach()", "org.apache.wicket.markup.html.link.abstractlink.abstractlink(string;imodel)", "org.apache.wicket.markup.html.link.link.getautoenable()", "org.apache.wicket.markup.html.link.link.link(string;imodel)", "org.apache.wicket.markup.html.link.link.setautoenable(boolean)", "org.apache.wicket.markup.html.link.downloadlinktest.downloadlinktest()", "org.apache.wicket.markup.html.link.downloadlinktest$filenamemodel.downloadlinktest$filenamemodel(downloadlinktest;1)", "org.apache.wicket.markup.html.link.abstractlink.onbeforerender()", "org.apache.wicket.markup.html.link.downloadlink.downloadlink(string;imodel;imodel)"]}, "ajaxeventbehavior": {"distance": 1.0, "methods": ["org.apache.wicket.ajax.ajaxeventbehavior.ajaxeventbehavior(string)", "org.apache.wicket.ajax.ajaxeventbehavior.oncheckevent(string)"]}, "ajaxchannel": {"distance": 0.8889, "methods": ["org.apache.wicket.ajax.ajaxchannel.getchannelname()", "org.apache.wicket.ajax.ajaxchannel.getshorttype(type)", "org.apache.wicket.ajax.ajaxchannel.ajaxchannel(string;type)", "org.apache.wicket.ajax.ajaxchannel.tostring()"]}, "abstractdefaultajaxbehavior": {"distance": 1.0769, "methods": ["org.apache.wicket.ajax.abstractdefaultajaxbehavior.onbind()", "org.apache.wicket.ajax.abstractdefaultajaxbehavior.abstractdefaultajaxbehavior()"]}, "defaultmarkupsourcingstrategy": {"distance": 1.25, "methods": ["org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.get()", "org.apache.wicket.markup.html.panel.defaultmarkupsourcingstrategy.getmarkup(markupcontainer;component)"]}, "webclientinfo": {"distance": 1.25, "methods": ["org.apache.wicket.protocol.http.request.webclientinfo.setchromeproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.webclientinfo(requestcycle)", "org.apache.wicket.protocol.http.request.webclientinfo.getuseragent()", "org.apache.wicket.protocol.http.request.webclientinfo.init()", "org.apache.wicket.protocol.http.request.webclientinfo.setsafariproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.setmajorminorversionbypattern(string)", "org.apache.wicket.protocol.http.request.webclientinfo.setoperaproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.setmozillaproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.getremoteaddr(requestcycle)", "org.apache.wicket.protocol.http.request.webclientinfo.setinternetexplorerproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.getproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.setkonquerorproperties()", "org.apache.wicket.protocol.http.request.webclientinfo.getuseragentstringlc()", "org.apache.wicket.protocol.http.request.webclientinfo.webclientinfo(requestcycle;string)"]}, "defaultbuttonimageresource": {"distance": 0.994, "methods": ["org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.gettextcolor()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.getfont()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.render(graphics2d;attributes)", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.getcolor()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.getbackgroundcolor()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.<clinit>()", "org.apache.wicket.markup.html.image.resource.defaultbuttonimageresource.defaultbuttonimageresource(int;int;string)"]}, "rendereddynamicimageresource": {"distance": 0.9333, "methods": ["org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.getwidth()", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.setwidth(int)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.render(attributes)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.rendereddynamicimageresource(int;int;string)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.invalidate()", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.getimagedata(attributes)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.gettype()", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.setheight(int)", "org.apache.wicket.markup.html.image.resource.rendereddynamicimageresource.getheight()"]}, "localizedimageresource": {"distance": 0.8611, "methods": ["org.apache.wicket.markup.html.image.resource.localizedimageresource.bind()", "org.apache.wicket.markup.html.image.resource.localizedimageresource.getresource()", "org.apache.wicket.markup.html.image.resource.localizedimageresource.isstateless()", "org.apache.wicket.markup.html.image.resource.localizedimageresource.setresourcereference(resourcereference;pageparameters)", "org.apache.wicket.markup.html.image.resource.localizedimageresource.setresource(iresource)", "org.apache.wicket.markup.html.image.resource.localizedimageresource.localizedimageresource(component)"]}, "webrequest": {"distance": 1.125, "methods": ["org.apache.wicket.request.http.webrequest.getifmodifiedsinceheader()", "org.apache.wicket.request.http.webrequest.isajax()", "org.apache.wicket.request.http.webrequest.webrequest()"]}, "webresponse": {"distance": 1.0, "methods": ["org.apache.wicket.request.http.webresponse.disablecaching()", "org.apache.wicket.request.http.webresponse.enablecaching(duration;cachescope)", "org.apache.wicket.request.http.webresponse.setlastmodifiedtime(time)", "org.apache.wicket.request.http.webresponse.setinlineheader(string)", "org.apache.wicket.request.http.webresponse.<clinit>()", "org.apache.wicket.request.http.webresponse.setattachmentheader(string)", "org.apache.wicket.request.http.webresponse.webresponse()"]}, "httpsessiondatastore": {"distance": 1.0833, "methods": ["org.apache.wicket.pagestore.memory.httpsessiondatastore.getdata(string;int)", "org.apache.wicket.pagestore.memory.httpsessiondatastore.destroy()", "org.apache.wicket.pagestore.memory.httpsessiondatastore.<clinit>()", "org.apache.wicket.pagestore.memory.httpsessiondatastore.storedata(string;int;byte[])", "org.apache.wicket.pagestore.memory.httpsessiondatastore.httpsessiondatastore(ipagemanagercontext;idatastoreevictionstrategy)", "org.apache.wicket.pagestore.memory.httpsessiondatastore.removedata(string;int)", "org.apache.wicket.pagestore.memory.httpsessiondatastore.getpagetable(boolean)", "org.apache.wicket.pagestore.memory.httpsessiondatastore.removedata(string)"]}, "ajaxlink": {"distance": 1.125, "methods": ["org.apache.wicket.ajax.markup.html.ajaxlink.ajaxlink(string)", "org.apache.wicket.ajax.markup.html.ajaxlink.ajaxlink(string;imodel)"]}, "ajaxfallbacklink": {"distance": 1.2, "methods": ["org.apache.wicket.ajax.markup.html.ajaxfallbacklink.newajaxeventbehavior(string)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.ajaxfallbacklink(string)", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.oninitialize()", "org.apache.wicket.ajax.markup.html.ajaxfallbacklink.ajaxfallbacklink(string;imodel)"]}, "inspectordebugpanel": {"distance": 1.3333, "methods": ["org.apache.wicket.devutils.debugbar.inspectordebugpanel.<clinit>()"]}, "sessionsizedebugpanel": {"distance": 1.5, "methods": ["org.apache.wicket.devutils.debugbar.sessionsizedebugpanel.<clinit>()"]}, "debugbar": {"distance": 2.0, "methods": ["org.apache.wicket.devutils.debugbar.debugbar.registercontributor(idebugbarcontributor;application)", "org.apache.wicket.devutils.debugbar.debugbar.getcontributors(application)", "org.apache.wicket.devutils.debugbar.versiondebugcontributor.versiondebugcontributor()", "org.apache.wicket.devutils.debugbar.versiondebugcontributor.<clinit>()", "org.apache.wicket.devutils.debugbar.sessionsizedebugpanel.<clinit>()", "org.apache.wicket.devutils.debugbar.pagesizedebugpanel.<clinit>()", "org.apache.wicket.devutils.debugbar.inspectordebugpanel.<clinit>()", "org.apache.wicket.devutils.debugbar.sessionsizedebugpanel$1.sessionsizedebugpanel$1()", "org.apache.wicket.devutils.debugbar.debugbarinitializer.tostring()", "org.apache.wicket.devutils.debugbar.debugbarinitializer.init(application)", "org.apache.wicket.devutils.debugbar.debugbarinitializer.destroy(application)", "org.apache.wicket.devutils.debugbar.debugbar.<clinit>()", "org.apache.wicket.devutils.debugbar.pagesizedebugpanel$1.pagesizedebugpanel$1()", "org.apache.wicket.devutils.debugbar.inspectordebugpanel$1.inspectordebugpanel$1()", "org.apache.wicket.devutils.debugbar.debugbar$1.debugbar$1()", "org.apache.wicket.devutils.debugbar.debugbarinitializer.debugbarinitializer()"]}, "pagesizedebugpanel": {"distance": 1.3333, "methods": ["org.apache.wicket.devutils.debugbar.pagesizedebugpanel.<clinit>()"]}, "listview": {"distance": 0.9545, "methods": ["org.apache.wicket.markup.html.list.listview.onpopulate()", "org.apache.wicket.markup.html.list.listview.getlist()", "org.apache.wicket.markup.html.list.listview.setstartindex(int)", "org.apache.wicket.markup.html.list.listview.getstartindex()", "org.apache.wicket.markup.html.list.listview.getviewsize()", "org.apache.wicket.markup.html.list.listview.setviewsize(int)", "org.apache.wicket.markup.html.list.listview.listview(string;imodel)"]}, "pageablelistview": {"distance": 0.8889, "methods": ["org.apache.wicket.markup.html.list.pageablelistview.getfirstitemoffset()", "org.apache.wicket.markup.html.list.pageablelistview.getcurrentpage()", "org.apache.wicket.markup.html.list.pageablelistview.getpagecount()", "org.apache.wicket.markup.html.list.pageablelistview.pageablelistview(string;imodel;int)", "org.apache.wicket.markup.html.list.pageablelistview.getviewsize()", "org.apache.wicket.markup.html.list.pageablelistview.getitemsperpage()", "org.apache.wicket.markup.html.list.pageablelistview.getitemcount()", "org.apache.wicket.markup.html.list.pageablelistview.setcurrentpage(long)"]}, "propertyresolverconverter": {"distance": 1.0, "methods": ["org.apache.wicket.core.util.lang.propertyresolverconverter.converttostring(object;locale)", "org.apache.wicket.core.util.lang.propertyresolverconverter.propertyresolverconverter(iconverterlocator;locale)", "org.apache.wicket.core.util.lang.propertyresolverconverter.convert(object;class)"]}, "wicketobjects$replaceobjectinputstream": {"distance": 1.0, "methods": ["org.apache.wicket.core.util.lang.wicketobjects$replaceobjectinputstream.resolveobject(object)", "org.apache.wicket.core.util.lang.wicketobjects$replaceobjectinputstream.resolveclass(objectstreamclass)", "org.apache.wicket.core.util.lang.wicketobjects$replaceobjectinputstream.wicketobjects$replaceobjectinputstream(inputstream;hashmap;classloader;1)", "org.apache.wicket.core.util.lang.wicketobjects$replaceobjectinputstream.wicketobjects$replaceobjectinputstream(inputstream;hashmap;classloader)"]}, "abortwithhttperrorcodeexception": {"distance": 1.3333, "methods": ["org.apache.wicket.request.http.flow.abortwithhttperrorcodeexception.abortwithhttperrorcodeexception(int;string)"]}, "abstractmarkupfilter": {"distance": 0.9583, "methods": ["org.apache.wicket.markup.parser.abstractmarkupfilter.setnextfilter(imarkupfilter)", "org.apache.wicket.markup.parser.abstractmarkupfilter.<clinit>()", "org.apache.wicket.markup.parser.abstractmarkupfilter.onspecialtag(htmlspecialtag)", "org.apache.wicket.markup.parser.abstractmarkupfilter.nextelement()", "org.apache.wicket.markup.parser.abstractmarkupfilter.abstractmarkupfilter()", "org.apache.wicket.markup.parser.abstractmarkupfilter.getnextfilter()", "org.apache.wicket.markup.parser.abstractmarkupfilter.postprocess(markup)", "org.apache.wicket.markup.parser.abstractmarkupfilter.abstractmarkupfilter(markupresourcestream)"]}, "xmltag$textsegment": {"distance": 1.5, "methods": ["org.apache.wicket.markup.parser.xmltag$textsegment.xmltag$textsegment(charsequence;int;int;int)"]}, "xmltag": {"distance": 0.9, "methods": ["org.apache.wicket.markup.parser.xmltag.isclose()", "org.apache.wicket.markup.parser.xmltag.makeimmutable()", "org.apache.wicket.markup.parser.xmltag.xmltag(textsegment;tagtype)"]}, "xmlpullparser": {"distance": 0.881, "methods": ["org.apache.wicket.markup.parser.xmlpullparser.xmlpullparser()", "org.apache.wicket.markup.parser.xmlpullparser.getinputfrompositionmarker(int)", "org.apache.wicket.markup.parser.xmlpullparser.next()", "org.apache.wicket.markup.parser.xmlpullparser.parsetagtext(xmltag;string)", "org.apache.wicket.markup.parser.xmlpullparser.getdoctype()", "org.apache.wicket.markup.parser.xmlpullparser.parse(inputstream;string)", "org.apache.wicket.markup.parser.xmlpullparser.specialtaghandling(string;int;int)", "org.apache.wicket.markup.parser.xmlpullparser.getelement()", "org.apache.wicket.markup.parser.xmlpullparser.getencoding()"]}, "requestcycle": {"distance": 0.9608, "methods": ["org.apache.wicket.request.cycle.requestcycle.renderurl(url;irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.getlisteners()", "org.apache.wicket.request.cycle.requestcycle.set(requestcycle)", "org.apache.wicket.request.cycle.requestcycle.geturlrenderer()", "org.apache.wicket.request.cycle.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.request.cycle.requestcycle.detach()", "org.apache.wicket.request.cycle.requestcycle.onendrequest()", "org.apache.wicket.request.cycle.requestcycle.handleexception(exception)", "org.apache.wicket.request.cycle.requestcycle.setrequest(request)", "org.apache.wicket.request.cycle.requestcycle.getrequest()", "org.apache.wicket.request.cycle.requestcycle.getresponse()", "org.apache.wicket.request.cycle.requestcycle.getrequesthandlerscheduledaftercurrent()", "org.apache.wicket.request.cycle.requestcycle.ondetach()", "org.apache.wicket.request.cycle.requestcycle.onevent(ievent)", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.get()", "org.apache.wicket.request.cycle.requestcycle.<clinit>()", "org.apache.wicket.request.cycle.requestcycle.executeexceptionrequesthandler(irequesthandler;int)", "org.apache.wicket.request.cycle.requestcycle.find(class)", "org.apache.wicket.request.cycle.requestcycle.getexceptionretrycount()", "org.apache.wicket.request.cycle.requestcycle.schedulerequesthandleraftercurrent(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(resourcereference;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.requestcycle(requestcyclecontext)", "org.apache.wicket.request.cycle.requestcycle.newurlrenderer()", "org.apache.wicket.request.cycle.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.request.cycle.requestcycle.oninternaldetach()", "org.apache.wicket.request.cycle.requestcycle.execute(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.getactiverequesthandler()", "org.apache.wicket.request.cycle.requestcycle.urlfor(resourcereference;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.getoriginalresponse()", "org.apache.wicket.request.cycle.requestcycle.resolverequesthandler()", "org.apache.wicket.request.cycle.requestcycle.onbeginrequest()", "org.apache.wicket.request.cycle.requestcycle.urlfor(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.processrequestanddetach()", "org.apache.wicket.request.cycle.requestcycle.setresponse(response)", "org.apache.wicket.request.cycle.requestcycle.processrequest()"]}, "requestcyclecontext": {"distance": 0.8571, "methods": ["org.apache.wicket.request.cycle.requestcyclecontext.getresponse()", "org.apache.wicket.request.cycle.requestcyclecontext.getrequestmapper()", "org.apache.wicket.request.cycle.requestcyclecontext.getexceptionmapper()", "org.apache.wicket.request.cycle.requestcyclecontext.getrequest()", "org.apache.wicket.request.cycle.requestcyclecontext.setrequestmapper(irequestmapper)", "org.apache.wicket.request.cycle.requestcyclecontext.requestcyclecontext(request;response;irequestmapper;iexceptionmapper)", "org.apache.wicket.request.cycle.requestcyclecontext.setexceptionmapper(iexceptionmapper)"]}, "requestcyclelistenercollection": {"distance": 1.0625, "methods": ["org.apache.wicket.request.cycle.requestcyclelistenercollection.onrequesthandlerscheduled(requestcycle;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onrequesthandlerexecuted(requestcycle;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onexception(requestcycle;exception)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.ondetach(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onurlmapped(requestcycle;irequesthandler;url)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onrequesthandlerresolved(requestcycle;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.requestcyclelistenercollection()", "org.apache.wicket.request.cycle.requestcyclelistenercollection.<clinit>()", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onbeginrequest(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onendrequest(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onexceptionrequesthandlerresolved(requestcycle;irequesthandler;exception)"]}, "wizard": {"distance": 1.0143, "methods": ["org.apache.wicket.extensions.wizard.wizardstep$formvalidatorwrapper.wizardstep$formvalidatorwrapper(wizardstep;1)", "org.apache.wicket.extensions.wizard.wizardstep.init(iwizardmodel)", "org.apache.wicket.extensions.wizard.wizardmodel.reset()", "org.apache.wicket.extensions.wizard.wizardmodel.findnextvisiblestep()", "org.apache.wicket.extensions.wizard.wizardmodel$1.wizardmodel$1()", "org.apache.wicket.extensions.wizard.abstractwizardmodel.fireactivestepchanged(iwizardstep)", "org.apache.wicket.extensions.wizard.wizardmodel.<clinit>()", "org.apache.wicket.extensions.wizard.wizardstep$formvalidatorwrapper.wizardstep$formvalidatorwrapper(wizardstep)", "org.apache.wicket.extensions.wizard.wizardstep.oninit(iwizardmodel)", "org.apache.wicket.extensions.wizard.wizardstep.getwizardmodel()", "org.apache.wicket.extensions.wizard.wizardmodel.add(iwizardstep)", "org.apache.wicket.extensions.wizard.wizardmodel$1.evaluate()", "org.apache.wicket.extensions.wizard.wizardstep.wizardstep()", "org.apache.wicket.extensions.wizard.wizardmodel.add(iwizardstep;icondition)", "org.apache.wicket.extensions.wizard.wizardmodeltest.wizardmodeltest()", "org.apache.wicket.extensions.wizard.abstractwizardmodel.abstractwizardmodel()", "org.apache.wicket.extensions.wizard.wizardmodel.wizardmodel()", "org.apache.wicket.extensions.wizard.wizardmodel.setactivestep(iwizardstep)", "org.apache.wicket.extensions.wizard.wizardmodel.stepiterator()"]}, "abstractwizardmodel": {"distance": 0.875, "methods": ["org.apache.wicket.extensions.wizard.abstractwizardmodel.fireactivestepchanged(iwizardstep)", "org.apache.wicket.extensions.wizard.abstractwizardmodel.abstractwizardmodel()"]}, "wizardstep": {"distance": 0.9286, "methods": ["org.apache.wicket.extensions.wizard.wizardstep.init(iwizardmodel)", "org.apache.wicket.extensions.wizard.wizardstep.oninit(iwizardmodel)", "org.apache.wicket.extensions.wizard.wizardstep.getwizardmodel()", "org.apache.wicket.extensions.wizard.wizardstep.wizardstep()"]}, "wizardmodel": {"distance": 0.8333, "methods": ["org.apache.wicket.extensions.wizard.wizardmodel.reset()", "org.apache.wicket.extensions.wizard.wizardmodel.findnextvisiblestep()", "org.apache.wicket.extensions.wizard.wizardmodel.<clinit>()", "org.apache.wicket.extensions.wizard.wizardmodel.add(iwizardstep)", "org.apache.wicket.extensions.wizard.wizardmodel.add(iwizardstep;icondition)", "org.apache.wicket.extensions.wizard.wizardmodel.wizardmodel()", "org.apache.wicket.extensions.wizard.wizardmodel.setactivestep(iwizardstep)", "org.apache.wicket.extensions.wizard.wizardmodel.stepiterator()"]}, "wizardstep$formvalidatorwrapper": {"distance": 1.0, "methods": ["org.apache.wicket.extensions.wizard.wizardstep$formvalidatorwrapper.wizardstep$formvalidatorwrapper(wizardstep;1)", "org.apache.wicket.extensions.wizard.wizardstep$formvalidatorwrapper.wizardstep$formvalidatorwrapper(wizardstep)"]}, "metadataroleauthorizationstrategy": {"distance": 2.0, "methods": ["org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.isinstantiationauthorized(class)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.rolesauthorizedtoperformaction(component;action)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.authorize(class;string)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.metadataroleauthorizationstrategy(irolecheckingstrategy)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.unauthorize(component;action;string)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.authorize(component;action;string)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.unauthorize(class;string)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.rolesauthorizedtoinstantiate(class)", "org.apache.wicket.authroles.authorization.strategies.role.metadata.metadataroleauthorizationstrategy.isactionauthorized(component;action)"]}, "url": {"distance": 0.9593, "methods": ["org.apache.wicket.request.url.setcharset(charset)", "org.apache.wicket.request.url.isabsolute()", "org.apache.wicket.request.url.url()", "org.apache.wicket.request.url.equals(object)", "org.apache.wicket.request.url.url(list;list;charset)", "org.apache.wicket.request.url.setprotocol(string)", "org.apache.wicket.request.url.getqueryparametervalue(string)", "org.apache.wicket.request.url.tostring(stringmode)", "org.apache.wicket.request.url.encodeparameter(string;charset)", "org.apache.wicket.request.url.url(list;list)", "org.apache.wicket.request.url.parse(charsequence;charset)", "org.apache.wicket.request.url.decodeparameter(string;charset)", "org.apache.wicket.request.url.getpath()", "org.apache.wicket.request.url.parsequeryparameter(string;charset)", "org.apache.wicket.request.url.getquerystring()", "org.apache.wicket.request.url.getqueryparameter(string)", "org.apache.wicket.request.url.getsegments()", "org.apache.wicket.request.url.decodesegment(string;charset)", "org.apache.wicket.request.url.url(url)", "org.apache.wicket.request.url.getqueryparameters()", "org.apache.wicket.request.url.url(charset)", "org.apache.wicket.request.url.tostring(charset)", "org.apache.wicket.request.url.getport()", "org.apache.wicket.request.url.encodesegment(string;charset)", "org.apache.wicket.request.url.tostring(stringmode;charset)", "org.apache.wicket.request.url.getpath(charset)", "org.apache.wicket.request.url.resolverelative(url)", "org.apache.wicket.request.url.parse(charsequence)", "org.apache.wicket.request.url.canonical()", "org.apache.wicket.request.url.setport(integer)", "org.apache.wicket.request.url.access$000(string;charset)", "org.apache.wicket.request.url.getcharset()", "org.apache.wicket.request.url.getprotocol()", "org.apache.wicket.request.url.sethost(string)", "org.apache.wicket.request.url.getquerystring(charset)", "org.apache.wicket.request.url.gethost()", "org.apache.wicket.request.url.getdefaultportforprotocol(string)", "org.apache.wicket.request.url.tostring()"]}, "url$queryparameter": {"distance": 1.0667, "methods": ["org.apache.wicket.request.url$queryparameter.getvalue()", "org.apache.wicket.request.url$queryparameter.tostring(charset)", "org.apache.wicket.request.url$queryparameter.url$queryparameter(string;string)", "org.apache.wicket.request.url$queryparameter.getname()", "org.apache.wicket.request.url$queryparameter.equals(object)"]}, "requesthandlerstack": {"distance": 0.8125, "methods": ["org.apache.wicket.request.requesthandlerstack.detach()", "org.apache.wicket.request.requesthandlerstack.execute(irequesthandler)", "org.apache.wicket.request.requesthandlerstack.getactive()", "org.apache.wicket.request.requesthandlerstack.schedule(irequesthandler)", "org.apache.wicket.request.requesthandlerstack.resolvehandler(runtimeexception)", "org.apache.wicket.request.requesthandlerstack.next()", "org.apache.wicket.request.requesthandlerstack.requesthandlerstack()", "org.apache.wicket.request.requesthandlerstack.<clinit>()"]}, "redirectrequesthandler": {"distance": 0.8333, "methods": ["org.apache.wicket.request.http.handler.redirectrequesthandler.respond(irequestcycle)", "org.apache.wicket.request.http.handler.redirectrequesthandler.redirectrequesthandler(string;int)", "org.apache.wicket.request.http.handler.redirectrequesthandler.detach(irequestcycle)"]}, "abstractrequestwrapperfactory": {"distance": 1.0, "methods": ["org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.matchesone(string;pattern[])", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.commadelimitedlisttopatternarray(string)", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.listtocommadelimitedstring(list)", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.<clinit>()", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.getwrapper(httpservletrequest)", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.commadelimitedlisttostringarray(string)", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.isenabled()", "org.apache.wicket.protocol.http.servlet.abstractrequestwrapperfactory.abstractrequestwrapperfactory()"]}, "errorattributes": {"distance": 0.8333, "methods": ["org.apache.wicket.protocol.http.servlet.errorattributes.of(httpservletrequest;string)", "org.apache.wicket.protocol.http.servlet.errorattributes.errorattributes(integer;string;string;string;class;throwable)", "org.apache.wicket.protocol.http.servlet.errorattributes.getrequesturi()"]}, "servletwebrequest": {"distance": 0.9136, "methods": ["org.apache.wicket.protocol.http.servlet.servletwebrequest.getcontainerrequest()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.clonewithurl(url)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getcontextpath()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.access$000(servletwebrequest)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getdateheader(string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getpostparameters()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.<clinit>()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getheader(string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getcharset()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getfilterpath()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.shouldpreserveclienturl()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.generatepostparameters()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getlocale()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getcontextrelativeurl(string;string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getpostrequestparameters()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.geturl()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.getclienturl()", "org.apache.wicket.protocol.http.servlet.servletwebrequest.setparameters(url)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.servletwebrequest(httpservletrequest;string)", "org.apache.wicket.protocol.http.servlet.servletwebrequest.servletwebrequest(httpservletrequest;string;url)"]}, "securedremoteaddressrequestwrapperfactory": {"distance": 0.8667, "methods": ["org.apache.wicket.protocol.http.servlet.securedremoteaddressrequestwrapperfactory.<clinit>()", "org.apache.wicket.protocol.http.servlet.securedremoteaddressrequestwrapperfactory.needswrapper(httpservletrequest)", "org.apache.wicket.protocol.http.servlet.securedremoteaddressrequestwrapperfactory.securedremoteaddressrequestwrapperfactory()"]}, "wicketsessionfilter": {"distance": 1.1667, "methods": ["org.apache.wicket.protocol.http.servlet.wicketsessionfilter.getsession(httpsession;webapplication)", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.bindsession(servletrequest;webapplication)", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.wicketsessionfilter()", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.<clinit>()", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.dofilter(servletrequest;servletresponse;filterchain)", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.init(filterconfig)", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.cleanupboundapplicationandsession()", "org.apache.wicket.protocol.http.servlet.wicketsessionfilter.bindapplication()"]}, "xforwardedrequestwrapperfactory": {"distance": 1.075, "methods": ["org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory.newrequestwrapper(httpservletrequest)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory.<clinit>()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory.xforwardedrequestwrapperfactory()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory.getconfig()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory.needswrapper(httpservletrequest)"]}, "xforwardedrequestwrapperfactory$config": {"distance": 0.9877, "methods": ["org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$500(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$300(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.setremoteipheader(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.setallowedinternalproxies(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.setproxiesheader(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$400(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$000(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$100(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.xforwardedrequestwrapperfactory$config()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.setprotocolheader(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$200(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.access$600(config)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapperfactory$config.settrustedproxies(string)"]}, "xforwardedrequestwrapper": {"distance": 0.9375, "methods": ["org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.getserverport()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.setscheme(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.setheader(string;string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.xforwardedrequestwrapper(httpservletrequest)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.setserverport(int)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.getheaderentry(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.setremotehost(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.getremoteaddr()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.setsecure(boolean)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.removeheader(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.getscheme()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.setremoteaddr(string)", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.issecure()", "org.apache.wicket.protocol.http.servlet.xforwardedrequestwrapper.getheader(string)"]}, "renderpagerequesthandler": {"distance": 0.825, "methods": ["org.apache.wicket.core.request.handler.renderpagerequesthandler.getpageclass()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.<clinit>()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.respond(irequestcycle)", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getpage()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.ispageinstancecreated()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getpageprovider()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.detach(irequestcycle)", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getredirectpolicy()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.getpageparameters()", "org.apache.wicket.core.request.handler.renderpagerequesthandler.renderpagerequesthandler(ipageprovider)", "org.apache.wicket.core.request.handler.renderpagerequesthandler.renderpagerequesthandler(ipageprovider;redirectpolicy)"]}, "dateconverter": {"distance": 0.9167, "methods": ["org.apache.wicket.util.convert.converter.dateconverter.converttostring(object;locale)", "org.apache.wicket.datetime.dateconverter.gettimezone()", "org.apache.wicket.util.convert.converter.dateconverter.converttostring(date;locale)", "org.apache.wicket.datetime.dateconverter.dateconverter(boolean)", "org.apache.wicket.util.convert.converter.dateconverter.getdateformat(locale)", "org.apache.wicket.datetime.dateconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.dateconverter.dateconverter()", "org.apache.wicket.util.convert.converter.dateconverter.converttoobject(string;locale)", "org.apache.wicket.datetime.dateconverter.getclienttimezone()"]}, "styledateconverter": {"distance": 1.5, "methods": ["org.apache.wicket.datetime.styledateconverter.getformat(locale)", "org.apache.wicket.datetime.styledateconverter.styledateconverter(boolean)", "org.apache.wicket.datetime.styledateconverter.getdatepattern(locale)", "org.apache.wicket.datetime.styledateconverter.styledateconverter(string;boolean)"]}, "propertyvariableinterpolator": {"distance": 1.5, "methods": ["org.apache.wicket.core.util.string.interpolator.propertyvariableinterpolator.propertyvariableinterpolator(string;object)", "org.apache.wicket.core.util.string.interpolator.propertyvariableinterpolator.tostring(object)", "org.apache.wicket.core.util.string.interpolator.propertyvariableinterpolator.getvalue(string)"]}, "fullybufferedreader": {"distance": 0.8438, "methods": ["org.apache.wicket.util.io.fullybufferedreader.find(char;int)", "org.apache.wicket.util.io.fullybufferedreader.getsubstring(int)", "org.apache.wicket.util.io.fullybufferedreader.setposition(int)", "org.apache.wicket.util.io.fullybufferedreader.charat(int)", "org.apache.wicket.util.io.fullybufferedreader.countlinesto(int)", "org.apache.wicket.util.io.fullybufferedreader.findoutofquotes(char;int)", "org.apache.wicket.util.io.fullybufferedreader.find(string;int)", "org.apache.wicket.util.io.fullybufferedreader.find(char)", "org.apache.wicket.util.io.fullybufferedreader.getsubstring(int;int)", "org.apache.wicket.util.io.fullybufferedreader.fullybufferedreader(string)", "org.apache.wicket.util.io.fullybufferedreader.getcolumnnumber()", "org.apache.wicket.util.io.fullybufferedreader.getlinenumber()", "org.apache.wicket.util.io.fullybufferedreader.fullybufferedreader(reader)", "org.apache.wicket.util.io.fullybufferedreader.size()", "org.apache.wicket.util.io.fullybufferedreader.findoutofquotes(char;int;char)", "org.apache.wicket.util.io.fullybufferedreader.getposition()"]}, "mockhttpsession": {"distance": 0.9549, "methods": ["org.apache.wicket.protocol.http.mock.mockhttpsession.getid()", "org.apache.wicket.protocol.http.mock.mockhttpsession.istemporary()", "org.apache.wicket.protocol.http.mock.mockhttpsession.mockhttpsession(servletcontext)", "org.apache.wicket.protocol.http.mock.mockhttpsession.setattribute(string;object)", "org.apache.wicket.protocol.http.mock.mockhttpsession.getattribute(string)", "org.apache.wicket.protocol.http.mock.mockhttpsession.settemporary(boolean)"]}, "mockhttpservletrequest": {"distance": 0.9804, "methods": ["org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setparameter(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setserverport(int)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.seturl(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getsession(boolean)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.adddateheader(string;long)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setservername(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.<clinit>()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getlocales()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.addheader(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setscheme(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcookie(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.geturl()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getquerystring()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcookies()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getpathinfo()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.mockhttpservletrequest(application;httpsession;servletcontext)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.initialize()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getfilterprefix()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getrequesturi()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getparametervalues(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getheader(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcharacterencoding()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.issecure()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getscheme()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcharset()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setpath(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getservletpath()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getremotehost()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getheaders(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.addparameter(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getdateheader(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setattribute(string;object)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getlocale(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getheadernames()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getremoteaddr()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setheader(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.seturl(url)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setdefaultheaders()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getlocale()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getparametermap()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getcontextpath()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.addcookie(cookie)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getservername()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getserverport()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setremoteaddr(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.setsecure(boolean)", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getsession()", "org.apache.wicket.protocol.http.mock.mockhttpservletrequest.getattribute(string)"]}, "mockservletcontext": {"distance": 0.9615, "methods": ["org.apache.wicket.protocol.http.mock.mockservletcontext.getresourceasstream(string)", "org.apache.wicket.protocol.http.mock.mockservletcontext.<clinit>()", "org.apache.wicket.protocol.http.mock.mockservletcontext.getinitparameter(string)", "org.apache.wicket.protocol.http.mock.mockservletcontext.getmimetype(string)", "org.apache.wicket.protocol.http.mock.mockservletcontext.mockservletcontext(application;string)", "org.apache.wicket.protocol.http.mock.mockservletcontext.getmajorversion()", "org.apache.wicket.protocol.http.mock.mockservletcontext.getresource(string)"]}, "mockhttpservletresponse": {"distance": 0.9568, "methods": ["org.apache.wicket.protocol.http.mock.mockhttpservletresponse.formatdate(long)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.senderror(int)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.mockhttpservletresponse(mockhttpservletrequest)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setheader(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.initialize()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.encodeurl(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setdateheader(string;long)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.flushbuffer()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getdocument()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getoutputstream()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.iscommitted()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.senderror(int;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.sendredirect(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getbinarycontent()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getredirectlocation()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.access$000(mockhttpservletresponse)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.encoderedirecturl(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setstatus(int)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.setcontenttype(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.<clinit>()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.isredirect()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.append2digits(stringbuilder;int)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.formatdate(stringbuilder;calendar;boolean)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getcookies()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getbinaryresponse()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getstatus()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getheader(string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.addheader(string;string)", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.reset()", "org.apache.wicket.protocol.http.mock.mockhttpservletresponse.getcontenttype()"]}, "abstracttextcomponent": {"distance": 1.25, "methods": ["org.apache.wicket.markup.html.form.abstracttextcomponent.convertinput()", "org.apache.wicket.markup.html.form.abstracttextcomponent.setconvertemptyinputstringtonull(boolean)", "org.apache.wicket.markup.html.form.abstracttextcomponent.abstracttextcomponent(string;imodel)", "org.apache.wicket.markup.html.form.abstracttextcomponent.getmodeltype(imodel)", "org.apache.wicket.markup.html.form.abstracttextcomponent.getconvertemptyinputstringtonull()", "org.apache.wicket.markup.html.form.abstracttextcomponent.isinputnullable()", "org.apache.wicket.markup.html.form.abstracttextcomponent.resolvetype()"]}, "abstractchoice": {"distance": 0.8667, "methods": ["org.apache.wicket.markup.html.form.abstractchoice.abstractchoice(string;list)", "org.apache.wicket.markup.html.form.abstractchoice.abstractchoice(string;imodel;ichoicerenderer)", "org.apache.wicket.markup.html.form.abstractchoice.setchoicerenderer(ichoicerenderer)"]}, "abstractsingleselectchoice": {"distance": 1.0333, "methods": ["org.apache.wicket.markup.html.form.abstractsingleselectchoice.abstractsingleselectchoice(string;list)"]}, "choicerenderer": {"distance": 1.1667, "methods": ["org.apache.wicket.markup.html.form.choicerenderer.choicerenderer()"]}, "formcomponent": {"distance": 0.9898, "methods": ["org.apache.wicket.markup.html.form.formcomponent.newvalidatable()", "org.apache.wicket.markup.html.form.formcomponent.visitformcomponentspostorder(component;ivisitor)", "org.apache.wicket.markup.html.form.formcomponent.reportrequirederror()", "org.apache.wicket.markup.html.form.formcomponent.error(ivalidationerror)", "org.apache.wicket.markup.html.form.formcomponent.formcomponent(string)", "org.apache.wicket.markup.html.form.formcomponent.getconvertedinput()", "org.apache.wicket.markup.html.form.formcomponent.getdefaultlabel()", "org.apache.wicket.markup.html.form.formcomponent.visitcomponentspostorder(component;ivisitor)", "org.apache.wicket.markup.html.form.formcomponent.getform()", "org.apache.wicket.markup.html.form.formcomponent.getmodelobject()", "org.apache.wicket.markup.html.form.formcomponent.getvalidators()", "org.apache.wicket.markup.html.form.formcomponent.gettype()", "org.apache.wicket.markup.html.form.formcomponent.getinputasarray()", "org.apache.wicket.markup.html.form.formcomponent.validaterequired()", "org.apache.wicket.markup.html.form.formcomponent.getinputname()", "org.apache.wicket.markup.html.form.formcomponent.isrequired()", "org.apache.wicket.markup.html.form.formcomponent.add(ivalidator)", "org.apache.wicket.markup.html.form.formcomponent.isvalid()", "org.apache.wicket.markup.html.form.formcomponent.validatevalidators()", "org.apache.wicket.markup.html.form.formcomponent.getdefaultlabel(string)", "org.apache.wicket.markup.html.form.formcomponent.settype(class)", "org.apache.wicket.markup.html.form.formcomponent.validate()", "org.apache.wicket.markup.html.form.formcomponent.processchildren()", "org.apache.wicket.markup.html.form.formcomponent.setrequired(boolean)", "org.apache.wicket.markup.html.form.formcomponent.formcomponent(string;imodel)", "org.apache.wicket.markup.html.form.formcomponent.getvalidatorkeyprefix()", "org.apache.wicket.markup.html.form.formcomponent.setconvertedinput(object)", "org.apache.wicket.markup.html.form.formcomponent.checkrequired()"]}, "form": {"distance": 1.0023, "methods": ["org.apache.wicket.markup.html.form.upload.fileuploadtest.fileuploadtest()", "org.apache.wicket.markup.html.form.upload.fileupload.getinputstream()", "org.apache.wicket.markup.html.form.textfield.textfield(string)", "org.apache.wicket.markup.html.form.abstracttextcomponent.convertinput()", "org.apache.wicket.markup.html.form.formcomponent.newvalidatable()", "org.apache.wicket.markup.html.form.form.ondetach()", "org.apache.wicket.markup.html.form.formcomponent.visitformcomponentspostorder(component;ivisitor)", "org.apache.wicket.markup.html.form.validationerrorfeedback.validationerrorfeedback(ivalidationerror;serializable)", "org.apache.wicket.markup.html.form.encryption.crypttest.crypttest()", "org.apache.wicket.markup.html.form.primitivetyperequiredtest.primitivetyperequiredtest()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.getstring(localizer;string;component)", "org.apache.wicket.markup.html.form.formcomponent$messagesource$1.formcomponent$messagesource$1(messagesource;string;boolean;map)", "org.apache.wicket.markup.html.form.textfield.textfield(string;imodel)", "org.apache.wicket.markup.html.form.formcomponent$messagesource$1.getvalue(string)", "org.apache.wicket.markup.html.form.formcomponenttest.formcomponenttest()", "org.apache.wicket.markup.html.form.formcomponent.reportrequirederror()", "org.apache.wicket.markup.html.form.formcomponent.error(ivalidationerror)", "org.apache.wicket.markup.html.form.formcomponent.formcomponent(string)", "org.apache.wicket.markup.html.form.abstracttextcomponent.setconvertemptyinputstringtonull(boolean)", "org.apache.wicket.markup.html.form.formcomponent.getconvertedinput()", "org.apache.wicket.markup.html.form.form.getmethod()", "org.apache.wicket.markup.html.form.validatorpropertiestest.newapplication()", "org.apache.wicket.markup.html.form.formcomponent$1.formcomponent$1()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.adddefaultvars(map)", "org.apache.wicket.markup.html.form.formcomponent.getdefaultlabel()", "org.apache.wicket.markup.html.form.formcomponent.visitcomponentspostorder(component;ivisitor)", "org.apache.wicket.markup.html.form.formcomponent.getform()", "org.apache.wicket.markup.html.form.form.findform(component)", "org.apache.wicket.markup.html.form.formcomponent$1isvalidvisitor.component(formcomponent;ivisit)", "org.apache.wicket.markup.html.form.formcomponent.getmodelobject()", "org.apache.wicket.markup.html.form.formcomponent.getvalidators()", "org.apache.wicket.markup.html.form.formcomponent.gettype()", "org.apache.wicket.markup.html.form.form.form(string;imodel)", "org.apache.wicket.markup.html.form.upload.fileupload.fileupload(fileitem)", "org.apache.wicket.markup.html.form.formcomponent.getinputasarray()", "org.apache.wicket.markup.html.form.formcomponent$validatableadapter.formcomponent$validatableadapter(formcomponent)", "org.apache.wicket.markup.html.form.abstracttextcomponent.abstracttextcomponent(string;imodel)", "org.apache.wicket.markup.html.form.form.getrootform()", "org.apache.wicket.markup.html.form.formcomponent$2.visitobject(object)", "org.apache.wicket.markup.html.form.abstractchoice.abstractchoice(string;list)", "org.apache.wicket.markup.html.form.formcomponent$1.visitchildren(object)", "org.apache.wicket.markup.html.form.formcomponent$messagesource.substitute(string;map)", "org.apache.wicket.markup.html.form.form$2.form$2(form)", "org.apache.wicket.markup.html.form.formcomponent.validaterequired()", "org.apache.wicket.markup.html.form.formcomponent.getinputname()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.getlabel()", "org.apache.wicket.markup.html.form.abstractchoice.abstractchoice(string;imodel;ichoicerenderer)", "org.apache.wicket.markup.html.form.formcomponenttest$1myvalidator.formcomponenttest$1myvalidator(formcomponenttest)", "org.apache.wicket.markup.html.form.form.onformsubmitted()", "org.apache.wicket.markup.html.form.dropdownchoice.dropdownchoice(string;list)", "org.apache.wicket.markup.html.form.choicerenderer.choicerenderer()", "org.apache.wicket.markup.html.form.textfield.textfield(string;class)", "org.apache.wicket.markup.html.form.form.getrootformrelativeid(component)", "org.apache.wicket.markup.html.form.formcomponent$1.visitobject(object)", "org.apache.wicket.markup.html.form.formcomponent.isrequired()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar$componentinitializer.uploadprogressbar$componentinitializer()", "org.apache.wicket.markup.html.form.abstracttextcomponent.getmodeltype(imodel)", "org.apache.wicket.markup.html.form.abstractsingleselectchoice.abstractsingleselectchoice(string;list)", "org.apache.wicket.markup.html.form.textfield.textfield(string;imodel;class)", "org.apache.wicket.markup.html.form.formcomponent.add(ivalidator)", "org.apache.wicket.markup.html.form.formcomponent.isvalid()", "org.apache.wicket.markup.html.form.autolabeltextresolver.<clinit>()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.<clinit>()", "org.apache.wicket.markup.html.form.formcomponent$1isvalidvisitor.component(object;ivisit)", "org.apache.wicket.markup.html.form.formcomponent.validatevalidators()", "org.apache.wicket.markup.html.form.formcomponent.getdefaultlabel(string)", "org.apache.wicket.markup.html.form.formcomponent.settype(class)", "org.apache.wicket.markup.html.form.form.getstatelesshint()", "org.apache.wicket.markup.html.form.form.getformvalidators()", "org.apache.wicket.markup.html.form.autolabeltaghandler.autolabeltaghandler()", "org.apache.wicket.markup.html.form.formcomponent$validatableadapter.formcomponent$validatableadapter(formcomponent;1)", "org.apache.wicket.markup.html.form.validatorpropertiestest.validatorpropertiestest()", "org.apache.wicket.markup.html.form.formcomponent$2.formcomponent$2()", "org.apache.wicket.markup.html.form.formcomponent.validate()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar$componentinitializer.init(application)", "org.apache.wicket.markup.html.form.abstracttextcomponent.getconvertemptyinputstringtonull()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.prefix(string;string)", "org.apache.wicket.markup.html.form.upload.fileupload.closestreams()", "org.apache.wicket.markup.html.form.formcomponent.processchildren()", "org.apache.wicket.markup.html.form.form.form(string)", "org.apache.wicket.markup.html.form.formcomponent.setrequired(boolean)", "org.apache.wicket.markup.html.form.formcomponent$1isvalidvisitor.formcomponent$1isvalidvisitor(formcomponent)", "org.apache.wicket.markup.html.form.labeledwebmarkupcontainer.labeledwebmarkupcontainer(string;imodel)", "org.apache.wicket.markup.html.form.formcomponent$messagesource.formcomponent$messagesource(formcomponent)", "org.apache.wicket.markup.html.form.formcomponent.formcomponent(string;imodel)", "org.apache.wicket.markup.html.form.formcomponent.getvalidatorkeyprefix()", "org.apache.wicket.markup.html.form.abstractchoice.setchoicerenderer(ichoicerenderer)", "org.apache.wicket.markup.html.form.labeledwebmarkupcontainer.getlabel()", "org.apache.wicket.markup.html.form.formcomponent$2.visitchildren(object)", "org.apache.wicket.markup.html.form.abstracttextcomponent.isinputnullable()", "org.apache.wicket.markup.html.form.autolabelresolver.<clinit>()", "org.apache.wicket.markup.html.form.form.onbeforerender()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.getmessage(string;map)", "org.apache.wicket.markup.html.form.validationerrorfeedback.tostring()", "org.apache.wicket.markup.html.form.form.findsubmittingbutton()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadstatusresource.uploadstatusresource()", "org.apache.wicket.markup.html.form.abstracttextcomponent.resolvetype()", "org.apache.wicket.markup.html.form.formcomponent$messagesource.formcomponent$messagesource(formcomponent;1)", "org.apache.wicket.markup.html.form.autolabelresolver.autolabelresolver()", "org.apache.wicket.markup.html.form.formcomponent.setconvertedinput(object)", "org.apache.wicket.markup.html.form.autolabeltextresolver.autolabeltextresolver()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.access$000()", "org.apache.wicket.markup.html.form.formcomponenttest$1myvalidator.validate(ivalidatable)", "org.apache.wicket.markup.html.form.form.getvalidatorkeyprefix()", "org.apache.wicket.markup.html.form.formcomponent.checkrequired()"]}, "dropdownchoice": {"distance": 1.25, "methods": ["org.apache.wicket.markup.html.form.dropdownchoice.dropdownchoice(string;list)"]}, "validationerrorfeedback": {"distance": 1.0, "methods": ["org.apache.wicket.markup.html.form.validationerrorfeedback.validationerrorfeedback(ivalidationerror;serializable)", "org.apache.wicket.markup.html.form.validationerrorfeedback.tostring()"]}, "textfield": {"distance": 2.0, "methods": ["org.apache.wicket.markup.html.form.textfield.textfield(string)", "org.apache.wicket.markup.html.form.textfield.textfield(string;imodel)", "org.apache.wicket.markup.html.form.textfield.textfield(string;class)", "org.apache.wicket.markup.html.form.textfield.textfield(string;imodel;class)"]}, "uploadprogressbar": {"distance": 1.0278, "methods": ["org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.<clinit>()", "org.apache.wicket.extensions.ajax.markup.html.form.upload.uploadprogressbar.access$000()"]}, "cssheaderitem": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.cssheaderitem.cssheaderitem(string)", "org.apache.wicket.markup.head.cssheaderitem.getcondition()", "org.apache.wicket.markup.head.cssheaderitem.forreference(resourcereference;pageparameters;string;string)", "org.apache.wicket.markup.head.cssheaderitem.internalrendercssreference(response;string;string;string)"]}, "cssreferenceheaderitem": {"distance": 0.9259, "methods": ["org.apache.wicket.markup.head.cssreferenceheaderitem.getpageparameters()", "org.apache.wicket.markup.head.cssreferenceheaderitem.getreference()", "org.apache.wicket.markup.head.cssreferenceheaderitem.geturl()", "org.apache.wicket.markup.head.cssreferenceheaderitem.render(response)", "org.apache.wicket.markup.head.cssreferenceheaderitem.getrendertokens()", "org.apache.wicket.markup.head.cssreferenceheaderitem.cssreferenceheaderitem(resourcereference;pageparameters;string;string)"]}, "javascriptheaderitem": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string;boolean;string)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;string)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string;boolean)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string;boolean;string;string)", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference;pageparameters;string)", "org.apache.wicket.markup.head.javascriptheaderitem.internalrenderjavascriptreference(response;string;string;boolean;string;string)", "org.apache.wicket.markup.head.javascriptheaderitem.getcondition()", "org.apache.wicket.markup.head.javascriptheaderitem.forreference(resourcereference)", "org.apache.wicket.markup.head.javascriptheaderitem.javascriptheaderitem(string)"]}, "javascriptreferenceheaderitem": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.javascriptreferenceheaderitem.isdefer()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.tostring()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getrendertokens()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.equals(object)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.geturl()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getreference()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.hashcode()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getpageparameters()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.render(response)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getcharset()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.javascriptreferenceheaderitem(resourcereference;pageparameters;string;boolean;string;string)", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getdependencies()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getprovidedresources()", "org.apache.wicket.markup.head.javascriptreferenceheaderitem.getid()"]}, "priorityfirstcomparator": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.priorityfirstcomparator.getitemtype(recordedheaderitem)", "org.apache.wicket.markup.head.priorityfirstcomparator.inversedcomponentorder(recordedheaderitem;recordedheaderitem)", "org.apache.wicket.markup.head.priorityfirstcomparator.compare(recordedheaderitem;recordedheaderitem)", "org.apache.wicket.markup.head.priorityfirstcomparator.compare(object;object)", "org.apache.wicket.markup.head.priorityfirstcomparator.comparewithingroup(recordedheaderitem;recordedheaderitem)", "org.apache.wicket.markup.head.priorityfirstcomparator.priorityfirstcomparator(boolean)"]}, "priorityheaderitem": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.priorityheaderitem.hashcode()", "org.apache.wicket.markup.head.priorityheaderitem.getdependencies()", "org.apache.wicket.markup.head.priorityheaderitem.priorityheaderitem(headeritem)", "org.apache.wicket.markup.head.priorityheaderitem.getwrapped()"]}, "resourceaggregator": {"distance": 1.0, "methods": ["org.apache.wicket.markup.head.resourceaggregator.resourceaggregator(iheaderresponse)", "org.apache.wicket.markup.head.resourceaggregator.recordheaderitem(headeritem;set)", "org.apache.wicket.markup.head.resourceaggregator.wasrendered(object)", "org.apache.wicket.markup.head.resourceaggregator.renderheaderitems()", "org.apache.wicket.markup.head.resourceaggregator.close()", "org.apache.wicket.markup.head.resourceaggregator.markrendered(object)", "org.apache.wicket.markup.head.resourceaggregator.getitemtoberendered(headeritem)", "org.apache.wicket.markup.head.resourceaggregator.renderdependencies(headeritem;set)", "org.apache.wicket.markup.head.resourceaggregator.render(headeritem)", "org.apache.wicket.markup.head.resourceaggregator.rendercombinedeventscripts()"]}, "noheaderitem": {"distance": 2.0, "methods": ["org.apache.wicket.markup.head.noheaderitem.<clinit>()", "org.apache.wicket.markup.head.noheaderitem.get()", "org.apache.wicket.markup.head.noheaderitem.noheaderitem()"]}, "converterlocator$defaultconverter": {"distance": 1.5, "methods": ["org.apache.wicket.converterlocator$defaultconverter.converterlocator$defaultconverter(class;1)", "org.apache.wicket.converterlocator$defaultconverter.converterlocator$defaultconverter(class)", "org.apache.wicket.converterlocator$defaultconverter.converttostring(object;locale)"]}, "componentevent": {"distance": 0.9375, "methods": ["org.apache.wicket.componentevent.stop()", "org.apache.wicket.componentevent.getsink()", "org.apache.wicket.componentevent.isshallow()", "org.apache.wicket.componentevent.resetshallow()", "org.apache.wicket.componentevent.componentevent(ieventsink;ieventsource;broadcast;object)", "org.apache.wicket.componentevent.isstop()", "org.apache.wicket.componentevent.getpayload()"]}, "restartresponseatinterceptpageexception$interceptdata": {"distance": 1.6, "methods": ["org.apache.wicket.restartresponseatinterceptpageexception$interceptdata.get()", "org.apache.wicket.restartresponseatinterceptpageexception$interceptdata.<clinit>()"]}, "requestlistenerinterface": {"distance": 0.9143, "methods": ["org.apache.wicket.requestlistenerinterface.setincluderendercount(boolean)", "org.apache.wicket.requestlistenerinterface.getmethod()", "org.apache.wicket.requestlistenerinterface.<clinit>()", "org.apache.wicket.requestlistenerinterface.requestlistenerinterface(class)", "org.apache.wicket.requestlistenerinterface.tostring()", "org.apache.wicket.requestlistenerinterface.setrenderpageafterinvocation(boolean)", "org.apache.wicket.requestlistenerinterface.isrenderpageafterinvocation()", "org.apache.wicket.requestlistenerinterface.getlistenerinterfaceclass()", "org.apache.wicket.requestlistenerinterface.registerrequestlistenerinterface(requestlistenerinterface)", "org.apache.wicket.requestlistenerinterface.getname()", "org.apache.wicket.requestlistenerinterface.register()", "org.apache.wicket.requestlistenerinterface.invoke(irequestablecomponent)", "org.apache.wicket.requestlistenerinterface.isincluderendercount()", "org.apache.wicket.requestlistenerinterface.forname(string)", "org.apache.wicket.requestlistenerinterface.internalinvoke(component;object)"]}, "session": {"distance": 0.9875, "methods": ["org.apache.wicket.session.nextsequencevalue()", "org.apache.wicket.session.defaultpagefactorytest.defaultpagefactorytest()", "org.apache.wicket.session.detachfeedback()", "org.apache.wicket.session.httpsessionstore.registerunboundlistener(unboundlistener)", "org.apache.wicket.session.defaultpagefactory.processpage(irequestablepage;pageparameters)", "org.apache.wicket.session.httpsessionstore.lookup(request)", "org.apache.wicket.session.getsessionstore()", "org.apache.wicket.session.httpsessionstore.httpsessionstore()", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.bind()", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.<clinit>()", "org.apache.wicket.session.getid()", "org.apache.wicket.session.httpsessionstore.getattribute(request;string)", "org.apache.wicket.session.getfeedbackmessages()", "org.apache.wicket.session.session(request)", "org.apache.wicket.session.dirty()", "org.apache.wicket.session.defaultpagefactory.newpage(constructor;pageparameters)", "org.apache.wicket.session.internaldetach()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1.defaultpagefactorytest$abortandrespondpage1()", "org.apache.wicket.session.getauthorizationstrategy()", "org.apache.wicket.session.httpsessionstore.destroy()", "org.apache.wicket.session.httpsessionstore.setattribute(request;string;serializable)", "org.apache.wicket.session.onevent(ievent)", "org.apache.wicket.session.setstyle(string)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.defaultpagefactorytest$pagethrowingcheckedexception()", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;object)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1$1.defaultpagefactorytest$abortandrespondpage1$1(abortandrespondpage1;irequesthandler)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2$1.defaultpagefactorytest$abortandrespondpage2$1(abortandrespondpage2;irequesthandler)", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3(pageparameters)", "org.apache.wicket.session.getapplication()", "org.apache.wicket.session.exists()", "org.apache.wicket.session.detach()", "org.apache.wicket.session.httpsessionstore.getbindlisteners()", "org.apache.wicket.session.defaultpagefactory.isbookmarkable(class)", "org.apache.wicket.session.httpsessionstore$sessionbindinglistener.httpsessionstore$sessionbindinglistener(string)", "org.apache.wicket.session.get()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$1.defaultpagefactorytest$abortandrespondpage3$1(abortandrespondpage3;irequesthandler)", "org.apache.wicket.session.getlocale()", "org.apache.wicket.session.httpsessionstore.gethttpservletrequest(request)", "org.apache.wicket.session.httpsessionstore.bind(request;session)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$2.defaultpagefactorytest$abortandrespondpage3$2(abortandrespondpage3;irequesthandler)", "org.apache.wicket.session.httpsessionstore.gethttpsession(request;boolean)", "org.apache.wicket.session.istemporary()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2.defaultpagefactorytest$abortandrespondpage2(pageparameters)", "org.apache.wicket.session.<clinit>()", "org.apache.wicket.session.setlocale(locale)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3()", "org.apache.wicket.session.httpsessionstore.onbind(request;session)", "org.apache.wicket.session.getmetadata(metadatakey)", "org.apache.wicket.session.getstyle()", "org.apache.wicket.session.defaultpagefactory.<clinit>()", "org.apache.wicket.session.httpsessionstore.getsessionid(request;boolean)", "org.apache.wicket.session.httpsessionstore.getsessionattributeprefix(request)", "org.apache.wicket.session.getpagemanager()", "org.apache.wicket.session.nextpageid()"]}, "resourcebundles": {"distance": 0.875, "methods": ["org.apache.wicket.resourcebundles.addbundle(headeritem)", "org.apache.wicket.resourcebundles.findbundle(headeritem)", "org.apache.wicket.resourcebundles.addjavascriptbundle(class;string;javascriptresourcereference[])", "org.apache.wicket.resourcebundles.resourcebundles(resourcereferenceregistry)"]}, "page": {"distance": 0.9841, "methods": ["org.apache.wicket.page.componentmodelchanging(component)", "org.apache.wicket.page.abstractpagemanager.commitrequest()", "org.apache.wicket.page.pagestoremanager.newrequestadapter(ipagemanagercontext)", "org.apache.wicket.page.abstractpagemanager.touchpage(imanageablepage)", "org.apache.wicket.page.requestadapter.requestadapter(ipagemanagercontext)", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.getpage(int)", "org.apache.wicket.page.renderpage()", "org.apache.wicket.page.getrendercount()", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.pageaccesssynchronizer$pagelock(int;thread)", "org.apache.wicket.page.setstatelesshint(boolean)", "org.apache.wicket.page.requestadapter.setsessionattribute(string;serializable)", "org.apache.wicket.page.wascreatedbookmarkable()", "org.apache.wicket.page.requestadapter.getsessionid()", "org.apache.wicket.page.abstractpagemanager.getcontext()", "org.apache.wicket.page.pagestoremanager.access$200(pagestoremanager)", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.storetouchedpages(list)", "org.apache.wicket.page.pagemanagerdecorator.commitrequest()", "org.apache.wicket.page.pagestoremanager$sessionentry.findpage(int)", "org.apache.wicket.page.pagemanagerdecorator.supportsversioning()", "org.apache.wicket.page.pagemanagerdecorator.touchpage(imanageablepage)", "org.apache.wicket.page.pagestoremanager.pagestoremanager(string;ipagestore;ipagemanagercontext)", "org.apache.wicket.page.requestadapter.findpage(int)", "org.apache.wicket.page.ispagestateless()", "org.apache.wicket.page.pageaccesssynchronizer$2.commitrequest()", "org.apache.wicket.page.pageaccesssynchronizer.unlockallpages()", "org.apache.wicket.page.getstatelesshint()", "org.apache.wicket.page.defaultpagemanagercontext$1.defaultpagemanagercontext$1(defaultpagemanagercontext)", "org.apache.wicket.page.pagestoremanager.access$000()", "org.apache.wicket.page.requestadapter.touch(imanageablepage)", "org.apache.wicket.page.pagestoremanager$sessionentry.pagestoremanager$sessionentry(string;string)", "org.apache.wicket.page.pagestoremanager$sessionentry.getpagestore()", "org.apache.wicket.page.pageaccesssynchronizer$1.pageaccesssynchronizer$1(pageaccesssynchronizer)", "org.apache.wicket.page.setnextavailableid()", "org.apache.wicket.page.defaultpagemanagercontext.defaultpagemanagercontext()", "org.apache.wicket.page.pageaccesssynchronizer.pageaccesssynchronizer(duration)", "org.apache.wicket.page.ondetach()", "org.apache.wicket.page.internalprepareforrender(boolean)", "org.apache.wicket.page.pageaccesssynchronizer$2.touchpage(imanageablepage)", "org.apache.wicket.page.init()", "org.apache.wicket.page.checkrendering(markupcontainer)", "org.apache.wicket.page.componentadded(component)", "org.apache.wicket.page.requestadapter.getsessionattribute(string)", "org.apache.wicket.page.<clinit>()", "org.apache.wicket.page.dirty()", "org.apache.wicket.page.tostring()", "org.apache.wicket.page.internalonafterconfigure()", "org.apache.wicket.page.abstractpagemanager.getpage(int)", "org.apache.wicket.page.pagemanagerdecorator.getpage(int)", "org.apache.wicket.page.pageaccesssynchronizer.<clinit>()", "org.apache.wicket.page.getpageclass()", "org.apache.wicket.page.pageaccesssynchronizer$1.createinstance()", "org.apache.wicket.page.requestadapter.bind()", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.getsessionentry(boolean)", "org.apache.wicket.page.pageaccesssynchronizer$2.pageaccesssynchronizer$2(pageaccesssynchronizer;ipagemanager)", "org.apache.wicket.page.onafterrender()", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.getattributename()", "org.apache.wicket.page.componentstatechanging(component)", "org.apache.wicket.page.hasinvisibletransparentchild(markupcontainer;component)", "org.apache.wicket.page.pagestoremanager$persistentrequestadapter.pagestoremanager$persistentrequestadapter(pagestoremanager;ipagemanagercontext)", "org.apache.wicket.page.pageaccesssynchronizer.internalunlockpages(integer)", "org.apache.wicket.page.getpageparameters()", "org.apache.wicket.page.pageaccesssynchronizer$2.getpage(int)", "org.apache.wicket.page.page()", "org.apache.wicket.page.setfreezepageid(boolean)", "org.apache.wicket.page.access$000(page)", "org.apache.wicket.page.getid()", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.access$100(pagelock)", "org.apache.wicket.page.setnumericid(int)", "org.apache.wicket.page.getpageid()", "org.apache.wicket.page.page(pageparameters;imodel)", "org.apache.wicket.page.peekpagestateless()", "org.apache.wicket.page.setwascreatedbookmarkable(boolean)", "org.apache.wicket.page.page(pageparameters)", "org.apache.wicket.page.requestadapter.commitrequest()", "org.apache.wicket.page.componentremoved(component)", "org.apache.wicket.page.pagestoremanager$sessionentry.setsessioncache(list)", "org.apache.wicket.page.onbeforerender()", "org.apache.wicket.page.abstractpagemanager.getrequestadapter()", "org.apache.wicket.page.pageaccesssynchronizer.lockpage(int)", "org.apache.wicket.page.pagestoremanager$sessionentry.getpage(int)", "org.apache.wicket.page.dirty(boolean)", "org.apache.wicket.page.pagemanagerdecorator.pagemanagerdecorator(ipagemanager)", "org.apache.wicket.page.abstractpagemanager.abstractpagemanager(ipagemanagercontext)", "org.apache.wicket.page.pageaccesssynchronizer.adapt(ipagemanager)", "org.apache.wicket.page.pagestoremanager.access$100(pagestoremanager)", "org.apache.wicket.page.pageaccesssynchronizer$pagelock.access$000(pagelock)", "org.apache.wicket.page.isbookmarkable()", "org.apache.wicket.page.detachmodels()"]}, "application": {"distance": 0.9918, "methods": ["org.apache.wicket.application.getmarkupsettings()", "org.apache.wicket.application.getpagerendererprovider()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.notify(icomponentonbeforerenderlistener)", "org.apache.wicket.application.componentonbeforerenderlistenercollection.componentonbeforerenderlistenercollection()", "org.apache.wicket.application.getjavascriptlibrarysettings()", "org.apache.wicket.application.newsharedresources(resourcereferenceregistry)", "org.apache.wicket.application.getrequestlogger()", "org.apache.wicket.application.componentonafterrenderlistenercollection.onafterrender(component)", "org.apache.wicket.application.componentinstantiationlistenercollection$1.notify(object)", "org.apache.wicket.application.getmimetype(string)", "org.apache.wicket.application.createrequestcycle(request;response)", "org.apache.wicket.application.usesdevelopmentconfig()", "org.apache.wicket.application.setpagemanagerprovider(ipagemanagerprovider)", "org.apache.wicket.application.configure()", "org.apache.wicket.application.getrequestcyclelisteners()", "org.apache.wicket.application.newmappercontext()", "org.apache.wicket.application.validateinit()", "org.apache.wicket.application.componentinitializationlistenercollection.oninitialize(component)", "org.apache.wicket.application.componentinitializationlistenercollection$1.componentinitializationlistenercollection$1(componentinitializationlistenercollection;component)", "org.apache.wicket.application.application()", "org.apache.wicket.application.componentonafterrenderlistenercollection$1.componentonafterrenderlistenercollection$1(componentonafterrenderlistenercollection;component)", "org.apache.wicket.application.componentinstantiationlistenercollection.oninstantiation(component)", "org.apache.wicket.application.getresourcebundles()", "org.apache.wicket.application.setname(string)", "org.apache.wicket.application.getinitializers()", "org.apache.wicket.application.onevent(ievent)", "org.apache.wicket.application.getrootrequestmapperascompound()", "org.apache.wicket.application.newconverterlocator()", "org.apache.wicket.application.getcomponentinstantiationlisteners()", "org.apache.wicket.application.componentinitializationlistenercollection$1.notify(object)", "org.apache.wicket.application.getcomponentinitializationlisteners()", "org.apache.wicket.application.setsessionstoreprovider(iprovider)", "org.apache.wicket.application.getconverterlocator()", "org.apache.wicket.application.getmappercontext()", "org.apache.wicket.application.decorateheaderresponse(iheaderresponse)", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.componentonbeforerenderlistenercollection$1(componentonbeforerenderlistenercollection;component)", "org.apache.wicket.application.getpagefactory()", "org.apache.wicket.application.headercontributorlistenercollection.headercontributorlistenercollection()", "org.apache.wicket.application.setrequestcycleprovider(irequestcycleprovider)", "org.apache.wicket.application.get(string)", "org.apache.wicket.application.componentinstantiationlistenercollection$1.notify(icomponentinstantiationlistener)", "org.apache.wicket.application.getsessionstoreprovider()", "org.apache.wicket.application.getresourcereferenceregistry()", "org.apache.wicket.application.getdebugsettings()", "org.apache.wicket.application.getpagemanagerprovider()", "org.apache.wicket.application.fetchcreateandsetsession(requestcycle)", "org.apache.wicket.application.internaldestroy()", "org.apache.wicket.application.initinitializers()", "org.apache.wicket.application.getsharedresources()", "org.apache.wicket.application.setpagerendererprovider(ipagerendererprovider)", "org.apache.wicket.application.getexceptionmapperprovider()", "org.apache.wicket.jmx.application.application(application)", "org.apache.wicket.application.componentinitializationlistenercollection.componentinitializationlistenercollection()", "org.apache.wicket.application.componentinstantiationlistenercollection$1.componentinstantiationlistenercollection$1(componentinstantiationlistenercollection;component)", "org.apache.wicket.application.getrootrequestmapper()", "org.apache.wicket.application.getcomponentonafterrenderlisteners()", "org.apache.wicket.application.defaultclassresolver.getclassloader()", "org.apache.wicket.application.getheadercontributorlistenercollection()", "org.apache.wicket.application.usesdeploymentconfig()", "org.apache.wicket.application.abstractclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.getpagesettings()", "org.apache.wicket.application.load(properties)", "org.apache.wicket.application.internalgetpagemanager()", "org.apache.wicket.application.<clinit>()", "org.apache.wicket.application.componentonafterrenderlistenercollection.componentonafterrenderlistenercollection()", "org.apache.wicket.application.setmetadata(metadatakey;object)", "org.apache.wicket.application.newpagefactory()", "org.apache.wicket.application.getsessionstore()", "org.apache.wicket.application.abstractclassresolver.abstractclassresolver()", "org.apache.wicket.application.getcomponentpreonbeforerenderlisteners()", "org.apache.wicket.application.internalinit()", "org.apache.wicket.application.getrequestloggersettings()", "org.apache.wicket.application.get()", "org.apache.wicket.application.addinitializer(string)", "org.apache.wicket.application.getpagemanagercontext()", "org.apache.wicket.application.initializecomponents()", "org.apache.wicket.application.newresourcebundles(resourcereferenceregistry)", "org.apache.wicket.application.getsecuritysettings()", "org.apache.wicket.application.newresourcereferenceregistry()", "org.apache.wicket.application.getmetadata(metadatakey)", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.notify(object)", "org.apache.wicket.application.exists()", "org.apache.wicket.application.destroyinitializers()", "org.apache.wicket.application.getbehaviorinstantiationlisteners()", "org.apache.wicket.application.getframeworksettings()", "org.apache.wicket.application.initapplication()", "org.apache.wicket.application.abstractclassresolver.resolveclass(string)", "org.apache.wicket.application.defaultclassresolver.defaultclassresolver()", "org.apache.wicket.application.getexceptionsettings()", "org.apache.wicket.application.getrequestcycleprovider()", "org.apache.wicket.application.checksettingsavailable()", "org.apache.wicket.application.getcomponentpostonbeforerenderlisteners()", "org.apache.wicket.application.getapplicationsettings()", "org.apache.wicket.application.componentinitializationlistenercollection$1.notify(icomponentinitializationlistener)", "org.apache.wicket.application.ondestroy()", "org.apache.wicket.application.setrootrequestmapper(irequestmapper)", "org.apache.wicket.application.componentinstantiationlistenercollection.componentinstantiationlistenercollection()", "org.apache.wicket.application.init()", "org.apache.wicket.application.getname()", "org.apache.wicket.application.componentonbeforerenderlistenercollection.onbeforerender(component)", "org.apache.wicket.application.abstractclassresolver.getresources(string)", "org.apache.wicket.application.getresourcesettings()", "org.apache.wicket.application.getrequestcyclesettings()"]}, "localizer": {"distance": 0.9464, "methods": ["org.apache.wicket.localizer.getfromcache(string)", "org.apache.wicket.localizer.getstring(string;component)", "org.apache.wicket.localizer.getstring(string;component;imodel)", "org.apache.wicket.localizer.newcache()", "org.apache.wicket.localizer.setenablecache(boolean)", "org.apache.wicket.localizer.getcachekey(string;component;locale;string;string)", "org.apache.wicket.localizer.substitutepropertyexpressions(component;string;imodel)", "org.apache.wicket.localizer.localizer()", "org.apache.wicket.localizer.getstring(string;component;imodel;string)", "org.apache.wicket.localizer.getstringignoresettings(string;component;imodel;string)", "org.apache.wicket.localizer.getstring(string;component;string)", "org.apache.wicket.localizer.putintocache(string;string)", "org.apache.wicket.localizer.getstringignoresettings(string;component;imodel;locale;string;string)", "org.apache.wicket.localizer.getstringresourceloaders()", "org.apache.wicket.localizer.getstring(string;component;imodel;locale;string;string)"]}, "metadatakey": {"distance": 1.25, "methods": ["org.apache.wicket.metadatakey.get(metadataentry[])", "org.apache.wicket.metadatakey.set(metadataentry[];object)", "org.apache.wicket.metadatakey.metadatakey()", "org.apache.wicket.metadatakey.equals(object)"]}, "converterlocator": {"distance": 0.8333, "methods": ["org.apache.wicket.converterlocator.get(class)", "org.apache.wicket.converterlocator.getconverter(class)", "org.apache.wicket.converterlocator.set(class;iconverter)", "org.apache.wicket.converterlocator.converterlocator()"]}, "attributemodifier": {"distance": 0.9, "methods": ["org.apache.wicket.attributemodifier.attributemodifier(string;serializable)", "org.apache.wicket.attributemodifier.detach(component)", "org.apache.wicket.attributemodifier.attributemodifier(string;imodel)"]}, "markupcontainer": {"distance": 0.9561, "methods": ["org.apache.wicket.markupcontainer.children_remove(int)", "org.apache.wicket.markupcontainer.visitchildren(ivisitor)", "org.apache.wicket.markupcontainer.<clinit>()", "org.apache.wicket.markupcontainer.getmarkup(component)", "org.apache.wicket.markupcontainer.getid(object)", "org.apache.wicket.markupcontainer.tostring()", "org.apache.wicket.markupcontainer.removechildren()", "org.apache.wicket.markupcontainer.addedcomponent(component)", "org.apache.wicket.markupcontainer.detachchildren()", "org.apache.wicket.markupcontainer.children_get(int;boolean)", "org.apache.wicket.markupcontainer.add(component[])", "org.apache.wicket.markupcontainer.children_add(component)", "org.apache.wicket.markupcontainer.children_remove(component)", "org.apache.wicket.markupcontainer.children_get(int)", "org.apache.wicket.markupcontainer.access$100(markupcontainer;int)", "org.apache.wicket.markupcontainer.size()", "org.apache.wicket.markupcontainer.iterator()", "org.apache.wicket.markupcontainer.markupcontainer(string;imodel)", "org.apache.wicket.markupcontainer.getassociatedmarkup()", "org.apache.wicket.markupcontainer.removedcomponent(component)", "org.apache.wicket.markupcontainer.children_indexof(component)", "org.apache.wicket.markupcontainer.removeall()", "org.apache.wicket.markupcontainer.tostring(boolean)", "org.apache.wicket.markupcontainer.onvisiblestatechanged()", "org.apache.wicket.markupcontainer.copychildren()", "org.apache.wicket.markupcontainer.put(component)", "org.apache.wicket.markupcontainer.remove(component)", "org.apache.wicket.markupcontainer.children_get(string)", "org.apache.wicket.markupcontainer.children_size()", "org.apache.wicket.markupcontainer.internalmarkrendering(boolean)", "org.apache.wicket.markupcontainer.get(string)", "org.apache.wicket.markupcontainer.access$000(markupcontainer)", "org.apache.wicket.markupcontainer.onenabledstatechanged()", "org.apache.wicket.markupcontainer.setdefaultmodel(imodel)", "org.apache.wicket.markupcontainer.visitchildren(class;ivisitor)", "org.apache.wicket.markupcontainer.onbeforerenderchildren()", "org.apache.wicket.markupcontainer.onafterrenderchildren()", "org.apache.wicket.markupcontainer.internalinitialize()"]}, "component": {"distance": 1.001, "methods": ["org.apache.wicket.component.initmodel()", "org.apache.wicket.component.addstatechange()", "org.apache.wicket.component.detachmodels()", "org.apache.wicket.component.getmodelimpl()", "org.apache.wicket.component.getmarkupattributes()", "org.apache.wicket.component.internalonafterconfigure()", "org.apache.wicket.component.detachchildren()", "org.apache.wicket.component.internaldetach()", "org.apache.wicket.component.isvisibilityallowed()", "org.apache.wicket.component.getconverter(class)", "org.apache.wicket.component.fireinitialize()", "org.apache.wicket.component.getrequestflag(short)", "org.apache.wicket.component.getmarkupid(boolean)", "org.apache.wicket.component.render()", "org.apache.wicket.component.configure()", "org.apache.wicket.component.onevent(ievent)", "org.apache.wicket.component.renderhead(iheaderresponse)", "org.apache.wicket.component.markrendering(boolean)", "org.apache.wicket.component.getstatelesshint()", "org.apache.wicket.component.newmarkupsourcingstrategy()", "org.apache.wicket.component.send(ieventsink;broadcast;object)", "org.apache.wicket.component.getrequestcycle()", "org.apache.wicket.component.getpagerelativepath()", "org.apache.wicket.component.setauto(boolean)", "org.apache.wicket.component.component(string;imodel)", "org.apache.wicket.component.isactionauthorized(action)", "org.apache.wicket.component.getlocale()", "org.apache.wicket.component.onmodelchanged()", "org.apache.wicket.component.internalonremove()", "org.apache.wicket.component.clearvisibleinhierarchycache()", "org.apache.wicket.component.isenabled()", "org.apache.wicket.component.isversioned()", "org.apache.wicket.component.onvisiblestatechanged()", "org.apache.wicket.component.onbeforerenderchildren()", "org.apache.wicket.component.isstateless()", "org.apache.wicket.component.getapplication()", "org.apache.wicket.component.internalbeforerender()", "org.apache.wicket.component.removechildren()", "org.apache.wicket.component.haserrormessage()", "org.apache.wicket.component.getlocalizer()", "org.apache.wicket.component.data_add(object)", "org.apache.wicket.component.isenableallowed()", "org.apache.wicket.component.error(serializable)", "org.apache.wicket.component.isbehavioraccepted(behavior)", "org.apache.wicket.component.onafterrender()", "org.apache.wicket.component.data_get(int)", "org.apache.wicket.component.determinevisibility()", "org.apache.wicket.component.modelchanging()", "org.apache.wicket.component.checkhierarchychange(component)", "org.apache.wicket.component.getvariation()", "org.apache.wicket.component.data_insert(int;object)", "org.apache.wicket.component.findparent(class)", "org.apache.wicket.component.detachmodel()", "org.apache.wicket.component.modelchanged()", "org.apache.wicket.component.setvisible(boolean)", "org.apache.wicket.component.setid(string)", "org.apache.wicket.component.visitparents(class;ivisitor)", "org.apache.wicket.component.setmetadata(metadatakey;object)", "org.apache.wicket.component.setrequestflag(short;boolean)", "org.apache.wicket.component.getdefaultmodel()", "org.apache.wicket.component.setdefaultmodel(imodel)", "org.apache.wicket.component.isauto()", "org.apache.wicket.component.getmarkupid()", "org.apache.wicket.component.getmetadata()", "org.apache.wicket.component.setenabled(boolean)", "org.apache.wicket.component.isenabledinhierarchy()", "org.apache.wicket.component.getfeedbackmessages()", "org.apache.wicket.component.onafterrenderchildren()", "org.apache.wicket.component.cancalllistenerinterface(method)", "org.apache.wicket.component.detach()", "org.apache.wicket.component.beforerender()", "org.apache.wicket.component.setoutputmarkupid(boolean)", "org.apache.wicket.component.exceptionmessage(string)", "org.apache.wicket.component.onmodelchanging()", "org.apache.wicket.component.data_start()", "org.apache.wicket.component.setmarkupidimpl(object)", "org.apache.wicket.component.setmodelimpl(imodel)", "org.apache.wicket.component.data_set(int;object)", "org.apache.wicket.component.getpage()", "org.apache.wicket.component.afterrender()", "org.apache.wicket.component.setparent(markupcontainer)", "org.apache.wicket.component.getresponse()", "org.apache.wicket.component.getparent()", "org.apache.wicket.component.internalonmodelchanged()", "org.apache.wicket.component.<clinit>()", "org.apache.wicket.component.internalrender()", "org.apache.wicket.component.getstyle()", "org.apache.wicket.component.internalinitialize()", "org.apache.wicket.component.getbehaviorid(behavior)", "org.apache.wicket.component.getmarkup()", "org.apache.wicket.component.getmarkuptag()", "org.apache.wicket.component.isvisibleinhierarchy()", "org.apache.wicket.component.clearenabledinhierarchycache()", "org.apache.wicket.component.data_length()", "org.apache.wicket.component.setflag(int;boolean)", "org.apache.wicket.component.getdefaultmodelobject()", "org.apache.wicket.component.getmetadata(metadatakey)", "org.apache.wicket.component.isinitialized()", "org.apache.wicket.component.onbeforerender()", "org.apache.wicket.component.internalprepareforrender(boolean)", "org.apache.wicket.component.onremove()", "org.apache.wicket.component.renderhead(component;iheaderresponse)", "org.apache.wicket.component.remove(behavior[])", "org.apache.wicket.component.getmarkupsourcingstrategy()", "org.apache.wicket.component.add(behavior[])", "org.apache.wicket.component.tostring()", "org.apache.wicket.component.getstring(string)", "org.apache.wicket.component.getrequest()", "org.apache.wicket.component.getsession()", "org.apache.wicket.component.isrenderallowed()", "org.apache.wicket.component.hasfeedbackmessage()", "org.apache.wicket.component.setrenderallowed()", "org.apache.wicket.component.getid()", "org.apache.wicket.component.getstring(string;imodel;string)", "org.apache.wicket.component.findpage()", "org.apache.wicket.component.onenabledstatechanged()", "org.apache.wicket.component.urlfor(requestlistenerinterface;pageparameters)", "org.apache.wicket.component.internalmarkrendering(boolean)", "org.apache.wicket.component.renderhead(htmlheadercontainer)", "org.apache.wicket.component.getpath()", "org.apache.wicket.component.data_remove(int)", "org.apache.wicket.component.detachfeedback()", "org.apache.wicket.component.getmarkupidimpl()", "org.apache.wicket.component.ondetach()", "org.apache.wicket.component.component(string)", "org.apache.wicket.component.isvisible()", "org.apache.wicket.component.wrap(imodel)", "org.apache.wicket.component.getbehaviors()", "org.apache.wicket.component.onconfigure()", "org.apache.wicket.component.getbehaviors(class)", "org.apache.wicket.component.getstring(string;imodel)", "org.apache.wicket.component.setescapemodelstrings(boolean)", "org.apache.wicket.component.tostring(boolean)", "org.apache.wicket.component.visitparents(class;ivisitor;ivisitfilter)", "org.apache.wicket.component.setversioned(boolean)", "org.apache.wicket.component.setrenderbodyonly(boolean)", "org.apache.wicket.component.oninitialize()", "org.apache.wicket.component.getflag(int)", "org.apache.wicket.component.ispreparedforrender()", "org.apache.wicket.component.setrenderallowed(boolean)"]}, "mocksessionstore": {"distance": 0.8533, "methods": ["org.apache.wicket.mock.mocksessionstore.mocksessionstore()", "org.apache.wicket.mock.mocksessionstore.bind(request;session)", "org.apache.wicket.mock.mocksessionstore.registerunboundlistener(unboundlistener)", "org.apache.wicket.mock.mocksessionstore.cleanup()", "org.apache.wicket.mock.mocksessionstore.getsessionid(request;boolean)", "org.apache.wicket.mock.mocksessionstore.destroy()", "org.apache.wicket.mock.mocksessionstore.lookup(request)"]}, "mockwebresponse": {"distance": 0.8889, "methods": ["org.apache.wicket.mock.mockwebresponse.mockwebresponse()"]}, "mockwebrequest": {"distance": 0.9231, "methods": ["org.apache.wicket.mock.mockwebrequest.clonewithurl(url)", "org.apache.wicket.mock.mockwebrequest.mockwebrequest(url)", "org.apache.wicket.mock.mockwebrequest.geturl()", "org.apache.wicket.mock.mockwebrequest.mockwebrequest(url;list;map;mockrequestparameters;locale)"]}, "diskfileitemfactory": {"distance": 0.8125, "methods": ["org.apache.wicket.util.upload.diskfileitemfactory.diskfileitemfactory(int;file;ifilecleaner)", "org.apache.wicket.util.upload.diskfileitemfactory.diskfileitemfactory(ifilecleaner)", "org.apache.wicket.util.upload.diskfileitemfactory.createitem(string;string;boolean;string)"]}, "changelistenerset": {"distance": 2.0, "methods": ["org.apache.wicket.util.listener.changelistenerset.changelistenerset()"]}, "listenercollection": {"distance": 0.8333, "methods": ["org.apache.wicket.util.listener.listenercollection.add(object)", "org.apache.wicket.util.listener.listenercollection.listenercollection()", "org.apache.wicket.util.listener.listenercollection.notify(inotifier)", "org.apache.wicket.util.listener.listenercollection.isallowingduplicates()", "org.apache.wicket.util.listener.listenercollection.reversednotifyignoringexceptions(inotifier)", "org.apache.wicket.util.listener.listenercollection.iterator()", "org.apache.wicket.util.listener.listenercollection.<clinit>()", "org.apache.wicket.util.listener.listenercollection.reversednotify(inotifier)"]}, "bytes": {"distance": 1.1429, "methods": ["org.apache.wicket.util.lang.bytes.bytes(long)", "org.apache.wicket.util.lang.bytes.bytes()", "org.apache.wicket.util.lang.bytes.<clinit>()"]}, "validatoradapter": {"distance": 1.0, "methods": ["org.apache.wicket.validation.validatoradapter.getvalidator()", "org.apache.wicket.validation.validatoradapter.validatoradapter(ivalidator)"]}, "htmlheadercontainer": {"distance": 0.9524, "methods": ["org.apache.wicket.markup.html.internal.htmlheadercontainer.newheaderresponse()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.ondetach()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.getheaderresponse()", "org.apache.wicket.markup.html.internal.htmlheadercontainer.renderheadertagbody(headerstreamstate)", "org.apache.wicket.markup.html.internal.htmlheadercontainer.htmlheadercontainer(string)"]}, "thumbnailimageresource": {"distance": 1.25, "methods": ["org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.<clinit>()", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.getimagedata(attributes)", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.thumbnailimageresource(iresource;int)", "org.apache.wicket.extensions.markup.html.image.resource.thumbnailimageresource.getscaledimageinstance(attributes)"]}, "task": {"distance": 0.8095, "methods": ["org.apache.wicket.util.thread.task.access$100(task)", "org.apache.wicket.util.thread.task.access$302(task;boolean)", "org.apache.wicket.util.thread.task.stop()", "org.apache.wicket.util.thread.task.access$000(task)", "org.apache.wicket.util.thread.task.interrupt()", "org.apache.wicket.util.thread.task.task(string)", "org.apache.wicket.util.thread.task.getlog()", "org.apache.wicket.util.thread.task.run(duration;icode)"]}, "webpage": {"distance": 1.1429, "methods": ["org.apache.wicket.markup.html.webpage.onafterrender()", "org.apache.wicket.markup.html.webpage.<clinit>()", "org.apache.wicket.markup.html.webpage.webpage(pageparameters)", "org.apache.wicket.markup.html.webpage.webpage()", "org.apache.wicket.markup.html.webpage.getmarkuptype()", "org.apache.wicket.markup.html.webpage.commoninit()", "org.apache.wicket.markup.html.webpage.dirty(boolean)", "org.apache.wicket.markup.html.webpage.validateheaders()"]}, "webmarkupcontainer": {"distance": 1.3333, "methods": ["org.apache.wicket.markup.html.webmarkupcontainer.webmarkupcontainer(string;imodel)", "org.apache.wicket.markup.html.webmarkupcontainer.webmarkupcontainer(string)"]}, "securepackageresourceguard": {"distance": 0.8125, "methods": ["org.apache.wicket.markup.html.securepackageresourceguard.securepackageresourceguard()", "org.apache.wicket.markup.html.securepackageresourceguard.getpattern()", "org.apache.wicket.markup.html.securepackageresourceguard.clearcache()", "org.apache.wicket.markup.html.securepackageresourceguard.securepackageresourceguard(concurrentmap)", "org.apache.wicket.markup.html.securepackageresourceguard.addpattern(string)", "org.apache.wicket.markup.html.securepackageresourceguard.<clinit>()", "org.apache.wicket.markup.html.securepackageresourceguard.acceptabsolutepath(string)"]}, "packageresourceguard": {"distance": 0.8333, "methods": ["org.apache.wicket.markup.html.packageresourceguard.packageresourceguard()", "org.apache.wicket.markup.html.packageresourceguard.setallowaccesstorootresources(boolean)", "org.apache.wicket.markup.html.packageresourceguard.acceptextension(string)", "org.apache.wicket.markup.html.packageresourceguard.acceptfile(string)", "org.apache.wicket.markup.html.packageresourceguard.<clinit>()", "org.apache.wicket.markup.html.packageresourceguard.acceptabsolutepath(string)", "org.apache.wicket.markup.html.packageresourceguard.accept(class;string)"]}}