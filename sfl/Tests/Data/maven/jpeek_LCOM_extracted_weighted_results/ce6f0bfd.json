{"artifactresolutionresult": {"distance": 0.9194, "methods": ["org.apache.maven.artifact.resolver.artifactresolutionresult.getartifacts()", "org.apache.maven.artifact.resolver.artifactresolutionresult.setartifactresolutionnodes(set)", "org.apache.maven.artifact.resolver.artifactresolutionresult.hasversionrangeviolations()", "org.apache.maven.artifact.resolver.artifactresolutionresult.setoriginatingartifact(artifact)", "org.apache.maven.artifact.resolver.artifactresolutionresult.addversionrangeviolation(exception)", "org.apache.maven.artifact.resolver.artifactresolutionresult.initlist(list)", "org.apache.maven.artifact.resolver.artifactresolutionresult.artifactresolutionresult()", "org.apache.maven.artifact.resolver.artifactresolutionresult.addartifact(artifact)"]}, "artifactrepositorypolicy": {"distance": 1.0, "methods": ["org.apache.maven.artifact.repository.artifactrepositorypolicy.artifactrepositorypolicy()", "org.apache.maven.artifact.repository.artifactrepositorypolicy.isenabled()", "org.apache.maven.artifact.repository.artifactrepositorypolicy.artifactrepositorypolicy(boolean;string;string)", "org.apache.maven.artifact.repository.artifactrepositorypolicy.checkoutofdate(date)"]}, "mailinglist": {"distance": 0.9196, "methods": ["org.apache.maven.model.mailinglist.mailinglist()", "org.apache.maven.model.mailinglist.getpost()", "org.apache.maven.model.mailinglist.setname(string)", "org.apache.maven.model.mailinglist.getunsubscribe()", "org.apache.maven.model.mailinglist.setunsubscribe(string)", "org.apache.maven.model.mailinglist.getarchive()", "org.apache.maven.model.mailinglist.setpost(string)", "org.apache.maven.model.mailinglist.getsubscribe()", "org.apache.maven.model.mailinglist.setsubscribe(string)", "org.apache.maven.model.mailinglist.getotherarchives()", "org.apache.maven.model.mailinglist.getname()"]}, "resolutiongroup": {"distance": 1.0, "methods": ["org.apache.maven.repository.legacy.metadata.resolutiongroup.getartifacts()", "org.apache.maven.artifact.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getresolutionrepositories()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;artifact;set;map;list)"]}, "comparableversion$stringitem": {"distance": 1.0, "methods": ["org.apache.maven.artifact.versioning.comparableversion$stringitem.compareto(item)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparablequalifier(string)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.tostring()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.isnull()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparableversion$stringitem(string;boolean)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.<clinit>()"]}, "reportplugin": {"distance": 0.8769, "methods": ["org.apache.maven.model.reportplugin.getgroupid()", "org.apache.maven.model.reportplugin.getkey()", "org.apache.maven.model.reportplugin.setreportsets(list)", "org.apache.maven.model.reportplugin.constructkey(string;string)", "org.apache.maven.model.reportplugin.getreportsets()", "org.apache.maven.model.reportplugin.setartifactid(string)", "org.apache.maven.model.reportplugin.reportplugin()", "org.apache.maven.model.reportplugin.getartifactid()", "org.apache.maven.model.reportplugin.setgroupid(string)", "org.apache.maven.model.reportplugin.getversion()"]}, "defaultmodelbuildingresult": {"distance": 0.8889, "methods": ["org.apache.maven.model.building.defaultmodelbuildingresult.setrawmodel(string;model)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactiveexternalprofiles(list)", "org.apache.maven.model.building.defaultmodelbuildingresult.geteffectivemodel()", "org.apache.maven.model.building.defaultmodelbuildingresult.addmodelid(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactivepomprofiles(string;list)", "org.apache.maven.model.building.defaultmodelbuildingresult.getproblems()", "org.apache.maven.model.building.defaultmodelbuildingresult.seteffectivemodel(model)", "org.apache.maven.model.building.defaultmodelbuildingresult.defaultmodelbuildingresult()"]}, "patternset": {"distance": 0.8182, "methods": ["org.apache.maven.model.patternset.patternset()", "org.apache.maven.model.patternset.clone()"]}, "defaultlegacyartifactcollector": {"distance": 1.0833, "methods": ["org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.collect(set;artifact;map;artifactrepository;list;artifactmetadatasource;artifactfilter;list;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.injectsession(artifactresolutionrequest)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.collect(set;artifact;map;artifactresolutionrequest;artifactmetadatasource;artifactfilter;list;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.fireevent(int;list;resolutionnode;artifact;versionrange)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.recurse(artifactresolutionresult;resolutionnode;map;managedversionmap;artifactresolutionrequest;artifactmetadatasource;artifactfilter;list;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.manageartifact(resolutionnode;managedversionmap;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.defaultlegacyartifactcollector()", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.fireevent(int;list;resolutionnode)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.checkscopeupdate(resolutionnode;resolutionnode;list)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.fireevent(int;list;resolutionnode;artifact)", "org.apache.maven.repository.legacy.resolver.defaultlegacyartifactcollector.getmanagedversionsmap(artifact;map)"]}, "mavenxpp3writer": {"distance": 2.0, "methods": ["org.apache.maven.model.io.xpp3.mavenxpp3writer.writereporting(reporting;string;xmlserializer)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.<clinit>()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writemailinglist(mailinglist;string;xmlserializer)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writereportset(reportset;string;xmlserializer)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writereportplugin(reportplugin;string;xmlserializer)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writemodel(model;string;xmlserializer)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writebuild(build;string;xmlserializer)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.write(writer;model)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.mavenxpp3writer()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writeplugin(plugin;string;xmlserializer)"]}, "mavensession": {"distance": 0.9461, "methods": ["org.apache.maven.execution.mavensession.getrequest()", "org.apache.maven.execution.mavensession.isoffline()", "org.apache.maven.execution.mavensession.mavensession(plexuscontainer;repositorysystemsession;mavenexecutionrequest;mavenexecutionresult)"]}, "pluginexecution": {"distance": 0.9273, "methods": ["org.apache.maven.model.pluginexecution.setid(string)", "org.apache.maven.model.pluginexecution.setgoals(list)", "org.apache.maven.model.pluginexecution.pluginexecution()", "org.apache.maven.model.pluginexecution.clone()", "org.apache.maven.model.pluginexecution.getid()"]}, "artifactresolutionrequest": {"distance": 0.9583, "methods": ["org.apache.maven.artifact.resolver.artifactresolutionrequest.getmirrors()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.artifactresolutionrequest()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setmirrors(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setremoterepositories(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setlocalrepository(artifactrepository)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setproxies(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getlocalrepository()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getservers()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setservers(list)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getproxies()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setoffline(boolean)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.artifactresolutionrequest(repositoryrequest)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.getremoterepositories()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.isoffline()", "org.apache.maven.artifact.resolver.artifactresolutionrequest.setforceupdate(boolean)", "org.apache.maven.artifact.resolver.artifactresolutionrequest.isforceupdate()"]}, "mavenmodelmerger": {"distance": 1.027, "methods": ["org.apache.maven.model.merge.mavenmodelmerger.mergemodel_name(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_artifactid(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_repositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_contributors(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_mailinglists(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_cimanagement(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_pluginrepositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getrepositorybasekey(repositorybase)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_url(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_modules(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_profiles(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getreportpluginkey(reportplugin)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_modelversion(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_developers(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_organization(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_prerequisites(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergereportplugin_reportsets(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getreportsetkey(reportset)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_issuemanagement(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.concatpath(string;string)", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;string;string)", "org.apache.maven.model.merge.mavenmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_filters(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mavenmodelmerger()", "org.apache.maven.model.merge.mavenmodelmerger.getpluginkey(plugin)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_licenses(model;model;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;map)"]}, "abstractartifactresolutionexception": {"distance": 1.0, "methods": ["org.apache.maven.artifact.resolver.abstractartifactresolutionexception.constructartifactpath(list;string)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;artifact;list)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;string;string;string;string;string;list;list;throwable)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.constructmessagebase(string;string;string;string;string;list;list)", "org.apache.maven.artifact.resolver.abstractartifactresolutionexception.abstractartifactresolutionexception(string;artifact;list;throwable)"]}, "stringsearchmodelinterpolator": {"distance": 1.5, "methods": ["org.apache.maven.model.interpolation.stringsearchmodelinterpolator.createinterpolator()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$100()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolatemodel(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.<clinit>()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolateobject(object;model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.stringsearchmodelinterpolator()"]}, "defaultartifact": {"distance": 0.9547, "methods": ["org.apache.maven.artifact.defaultartifact.getversionrange()", "org.apache.maven.artifact.defaultartifact.defaultartifact(string;string;versionrange;string;string;string;artifacthandler;boolean)", "org.apache.maven.artifact.defaultartifact.hashcode()", "org.apache.maven.artifact.defaultartifact.setdependencytrail(list)", "org.apache.maven.artifact.defaultartifact.selectversionfromnewrangeifavailable()", "org.apache.maven.artifact.defaultartifact.empty(string)", "org.apache.maven.artifact.defaultartifact.getdependencyconflictid()", "org.apache.maven.artifact.defaultartifact.setversion(string)", "org.apache.maven.artifact.defaultartifact.getscope()", "org.apache.maven.artifact.defaultartifact.getfile()", "org.apache.maven.artifact.defaultartifact.getavailableversions()", "org.apache.maven.artifact.defaultartifact.getartifactid()", "org.apache.maven.artifact.defaultartifact.getversion()", "org.apache.maven.artifact.defaultartifact.getgroupid()", "org.apache.maven.artifact.defaultartifact.getartifacthandler()", "org.apache.maven.artifact.defaultartifact.isoptional()", "org.apache.maven.artifact.defaultartifact.setbaseversioninternal(string)", "org.apache.maven.artifact.defaultartifact.setscope(string)", "org.apache.maven.artifact.defaultartifact.getbaseversioninternal()", "org.apache.maven.artifact.defaultartifact.getclassifier()", "org.apache.maven.artifact.defaultartifact.hasclassifier()", "org.apache.maven.artifact.defaultartifact.getdependencyfilter()", "org.apache.maven.artifact.defaultartifact.equals(object)", "org.apache.maven.artifact.defaultartifact.validateidentity()", "org.apache.maven.artifact.defaultartifact.gettype()", "org.apache.maven.artifact.defaultartifact.isselectedversionknown()", "org.apache.maven.artifact.defaultartifact.getdependencytrail()", "org.apache.maven.artifact.defaultartifact.setfile(file)", "org.apache.maven.artifact.defaultartifact.getselectedversion()", "org.apache.maven.artifact.defaultartifact.getid()", "org.apache.maven.artifact.defaultartifact.issnapshot()", "org.apache.maven.artifact.defaultartifact.tostring()", "org.apache.maven.artifact.defaultartifact.setavailableversions(list)", "org.apache.maven.artifact.defaultartifact.appendartifacttypeclassifierstring(stringbuilder)", "org.apache.maven.artifact.defaultartifact.getbaseversion()", "org.apache.maven.artifact.defaultartifact.setdependencyfilter(artifactfilter)", "org.apache.maven.artifact.defaultartifact.setversionrange(versionrange)", "org.apache.maven.artifact.defaultartifact.selectversion(string)"]}, "defaultartifacthandler": {"distance": 0.9318, "methods": ["org.apache.maven.artifact.handler.defaultartifacthandler.getextension()", "org.apache.maven.artifact.handler.defaultartifacthandler.isaddedtoclasspath()", "org.apache.maven.artifact.handler.defaultartifacthandler.setaddedtoclasspath(boolean)", "org.apache.maven.artifact.handler.defaultartifacthandler.setincludesdependencies(boolean)", "org.apache.maven.artifact.handler.defaultartifacthandler.isincludesdependencies()", "org.apache.maven.artifact.handler.defaultartifacthandler.getclassifier()", "org.apache.maven.artifact.handler.defaultartifacthandler.setlanguage(string)", "org.apache.maven.artifact.handler.defaultartifacthandler.getpackaging()", "org.apache.maven.artifact.handler.defaultartifacthandler.getlanguage()", "org.apache.maven.artifact.handler.defaultartifacthandler.setextension(string)", "org.apache.maven.artifact.handler.defaultartifacthandler.defaultartifacthandler()"]}, "defaultmodelbuilder": {"distance": 0.9882, "methods": ["org.apache.maven.model.building.defaultmodelbuilder.readparent(model;modelsource;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.injectprofileactivations(model;map)", "org.apache.maven.model.building.defaultmodelbuilder.fireevent(model;modelbuildingrequest;modelproblemcollector;modelbuildingeventcatapult)", "org.apache.maven.model.building.defaultmodelbuilder.interpolatemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelnormalizer(modelnormalizer)", "org.apache.maven.model.building.defaultmodelbuilder.setsuperpomprovider(superpomprovider)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelurlnormalizer(modelurlnormalizer)", "org.apache.maven.model.building.defaultmodelbuilder.importdependencymanagement(model;modelbuildingrequest;defaultmodelproblemcollector;collection)", "org.apache.maven.model.building.defaultmodelbuilder.setpluginconfigurationexpander(pluginconfigurationexpander)", "org.apache.maven.model.building.defaultmodelbuilder.readmodel(modelsource;file;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelprocessor(modelprocessor)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivationcontext(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilder.setinheritanceassembler(inheritanceassembler)", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector;boolean)", "org.apache.maven.model.building.defaultmodelbuilder.hasfatalerrors(modelproblemcollectorext)", "org.apache.maven.model.building.defaultmodelbuilder.setprofileinjector(profileinjector)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelinterpolator(modelinterpolator)", "org.apache.maven.model.building.defaultmodelbuilder.hasmodelerrors(modelproblemcollectorext)", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementimporter(dependencymanagementimporter)", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementinjector(dependencymanagementinjector)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelpathtranslator(modelpathtranslator)", "org.apache.maven.model.building.defaultmodelbuilder.checkpluginversions(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult;collection)", "org.apache.maven.model.building.defaultmodelbuilder.setpluginmanagementinjector(pluginmanagementinjector)", "org.apache.maven.model.building.defaultmodelbuilder.setprofileselector(profileselector)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult)", "org.apache.maven.model.building.defaultmodelbuilder.getsupermodel()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilder.assembleinheritance(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.setreportconfigurationexpander(reportconfigurationexpander)", "org.apache.maven.model.building.defaultmodelbuilder.defaultmodelbuilder()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelvalidator(modelvalidator)", "org.apache.maven.model.building.defaultmodelbuilder.setreportingconverter(reportingconverter)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivations(model;boolean)", "org.apache.maven.model.building.defaultmodelbuilder.setlifecyclebindingsinjector(lifecyclebindingsinjector)"]}, "buildbase": {"distance": 0.9167, "methods": ["org.apache.maven.model.buildbase.getfinalname()", "org.apache.maven.model.buildbase.getdefaultgoal()", "org.apache.maven.model.buildbase.getresources()", "org.apache.maven.model.buildbase.setresources(list)", "org.apache.maven.model.buildbase.buildbase()", "org.apache.maven.model.buildbase.getfilters()", "org.apache.maven.model.buildbase.setfinalname(string)", "org.apache.maven.model.buildbase.gettestresources()", "org.apache.maven.model.buildbase.setfilters(list)", "org.apache.maven.model.buildbase.settestresources(list)", "org.apache.maven.model.buildbase.getdirectory()", "org.apache.maven.model.buildbase.clone()", "org.apache.maven.model.buildbase.setdirectory(string)"]}, "lifecycle": {"distance": 0.8889, "methods": ["org.apache.maven.lifecycle.internal.concurrencydependencygraphtest.concurrencydependencygraphtest()", "org.apache.maven.lifecycle.internal.buildercommontest.buildercommontest()", "org.apache.maven.lifecycle.internal.buildlistcalculatortest.buildlistcalculatortest()", "org.apache.maven.lifecycle.mavenexecutionplantest.mavenexecutionplantest()", "org.apache.maven.lifecycle.lifecycleexecutortest.lifecycleexecutortest()", "org.apache.maven.lifecycle.lifecycleexecutorsubmodulestest.lifecycleexecutorsubmodulestest()", "org.apache.maven.lifecycle.defaultlifecyclestest.defaultlifecyclestest()", "org.apache.maven.lifecycle.internal.phaserecordertest.phaserecordertest()", "org.apache.maven.lifecycle.internal.lifecycletasksegmentcalculatorimpltest.lifecycletasksegmentcalculatorimpltest()", "org.apache.maven.lifecycle.internal.projectbuildlisttest.projectbuildlisttest()", "org.apache.maven.lifecycle.internal.lifecycleexecutionplancalculatortest.lifecycleexecutionplancalculatortest()", "org.apache.maven.lifecycle.internal.stub.projectdependencygraphstubtest.projectdependencygraphstubtest()", "org.apache.maven.lifecycle.internal.builder.multithreaded.threadoutputmuxertest.threadoutputmuxertest()"]}, "defaultupdatecheckmanager": {"distance": 1.1111, "methods": ["org.apache.maven.repository.legacy.defaultupdatecheckmanager.touch(repositorymetadata;artifactrepository;file)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.isupdaterequired(repositorymetadata;artifactrepository;file)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.gettouchfile(repositorymetadata;file)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.readlastupdated(file;string)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.read(file)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.getmetadatakey(artifactrepository;file)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.writelastupdated(file;string;string)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.gettouchfile(artifact)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.getrepositorykey(artifactrepository)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.defaultupdatecheckmanager(logger)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.readlastupdated(repositorymetadata;artifactrepository;file)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.isupdaterequired(artifact;artifactrepository)", "org.apache.maven.repository.legacy.defaultupdatecheckmanager.touch(artifact;artifactrepository;string)"]}, "build": {"distance": 0.9167, "methods": ["org.apache.maven.model.build.clone()", "org.apache.maven.model.build.getsourcedirectory()", "org.apache.maven.model.build.setscriptsourcedirectory(string)", "org.apache.maven.model.build.gettestoutputdirectory()", "org.apache.maven.model.build.settestsourcedirectory(string)", "org.apache.maven.model.build.setoutputdirectory(string)", "org.apache.maven.model.build.gettestsourcedirectory()", "org.apache.maven.model.build.settestoutputdirectory(string)", "org.apache.maven.model.build.setsourcedirectory(string)", "org.apache.maven.model.build.getextensions()", "org.apache.maven.model.build.getscriptsourcedirectory()", "org.apache.maven.model.build.build()", "org.apache.maven.model.build.getoutputdirectory()"]}, "defaultmavenexecutionrequest": {"distance": 0.9898, "methods": ["org.apache.maven.execution.defaultmavenexecutionrequest.getproxies()", "org.apache.maven.execution.defaultmavenexecutionrequest.isoffline()", "org.apache.maven.execution.defaultmavenexecutionrequest.getusersettingsfile()", "org.apache.maven.execution.defaultmavenexecutionrequest.getservers()", "org.apache.maven.execution.defaultmavenexecutionrequest.getmirrors()", "org.apache.maven.execution.defaultmavenexecutionrequest.defaultmavenexecutionrequest()", "org.apache.maven.execution.defaultmavenexecutionrequest.isupdatesnapshots()"]}, "defaultmodelpathtranslator": {"distance": 1.0, "methods": ["org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(model;file;modelbuildingrequest)", "org.apache.maven.model.path.defaultmodelpathtranslator.setpathtranslator(pathtranslator)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.path.defaultmodelpathtranslator.defaultmodelpathtranslator()"]}, "repositorypolicy": {"distance": 0.8333, "methods": ["org.apache.maven.model.repositorypolicy.setupdatepolicy(string)", "org.apache.maven.model.repositorypolicy.clone()", "org.apache.maven.model.repositorypolicy.repositorypolicy()", "org.apache.maven.model.repositorypolicy.setenabled(string)"]}, "metadata": {"distance": 0.9244, "methods": ["org.apache.maven.repository.legacy.metadata.resolutiongroup.getartifacts()", "org.apache.maven.artifact.repository.metadata.metadata.setversion(string)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getartifact()", "org.apache.maven.artifact.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.getgroupid()", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.storedingroupdirectory()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.defaultmetadataresolutionrequest(artifactresolutionrequest)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getlocalrepository()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.getresolutionrepositories()", "org.apache.maven.artifact.repository.metadata.metadata.setversioning(versioning)", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.storedinartifactversiondirectory()", "org.apache.maven.artifact.repository.metadata.metadata.setgroupid(string)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isoffline()", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.getnature()", "org.apache.maven.artifact.repository.metadata.abstractrepositorymetadata.abstractrepositorymetadata(metadata)", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.getkey()", "org.apache.maven.artifact.repository.metadata.abstractrepositorymetadata.createmetadata(artifact;versioning)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.isforceupdate()", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setremoterepositories(list)", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;set;list)", "org.apache.maven.artifact.repository.metadata.abstractrepositorymetadata.getpolicy(artifactrepository)", "org.apache.maven.artifact.repository.metadata.metadata.metadata()", "org.apache.maven.artifact.repository.metadata.metadata.setartifactid(string)", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.artifactrepositorymetadata(artifact)", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.artifactrepositorymetadata(artifact;versioning)", "org.apache.maven.artifact.repository.metadata.artifactrepositorymetadata.getartifactid()", "org.apache.maven.artifact.repository.metadata.abstractrepositorymetadata.getlocalfilename(artifactrepository)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.getremoterepositories()", "org.apache.maven.repository.legacy.metadata.resolutiongroup.resolutiongroup(artifact;artifact;set;map;list)", "org.apache.maven.repository.legacy.metadata.defaultmetadataresolutionrequest.setartifact(artifact)"]}, "profile": {"distance": 0.8462, "methods": ["org.apache.maven.model.profile.getbuild()", "org.apache.maven.model.profile.activation.fileprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.profile.defaultprofileselector.addprofileactivator(profileactivator)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.defaultprofileactivationcontext.tomap(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectproperties(properties)", "org.apache.maven.model.profile.getsource()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileinjector.injectprofile(model;profile;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileinjector.defaultprofileinjector()", "org.apache.maven.model.profile.activation.fileprofileactivator.setpathtranslator(pathtranslator)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger()", "org.apache.maven.model.profile.getactivation()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.profile.setactivation(activation)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergemodelbase(modelbase;modelbase)", "org.apache.maven.model.profile.clone()", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.profile.profile()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectproperties()", "org.apache.maven.model.profile.setid(string)", "org.apache.maven.model.profile.activation.fileprofileactivator$1.fileprofileactivator$1(fileprofileactivator;boolean;file)", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectdirectory()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.setbuild(buildbase)", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()", "org.apache.maven.model.profile.getid()", "org.apache.maven.model.profile.activation.propertyprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)"]}, "defaultrepositoryrequest": {"distance": 0.8571, "methods": ["org.apache.maven.artifact.repository.defaultrepositoryrequest.setoffline(boolean)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setlocalrepository(artifactrepository)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.getlocalrepository()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.isoffline()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.getremoterepositories()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.isforceupdate()", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setforceupdate(boolean)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.defaultrepositoryrequest(repositoryrequest)", "org.apache.maven.artifact.repository.defaultrepositoryrequest.setremoterepositories(list)"]}, "defaultprofileselector": {"distance": 1.0, "methods": ["org.apache.maven.model.profile.defaultprofileselector.addprofileactivator(profileactivator)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)"]}, "mavenproject": {"distance": 0.9928, "methods": ["org.apache.maven.project.mavenproject.setartifactid(string)", "org.apache.maven.project.mavenproject.setmodel(model)", "org.apache.maven.project.mavenproject.getartifactid()", "org.apache.maven.project.mavenproject.getversion()", "org.apache.maven.project.mavenproject.setgroupid(string)", "org.apache.maven.project.mavenproject.mavenproject()", "org.apache.maven.project.mavenproject.setversion(string)", "org.apache.maven.project.mavenproject.getgroupid()", "org.apache.maven.project.mavenproject.setdependencies(list)", "org.apache.maven.project.mavenproject.getmodel()"]}, "activation": {"distance": 0.84, "methods": ["org.apache.maven.model.profile.activation.fileprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.activation.setfile(activationfile)", "org.apache.maven.model.activation.getjdk()", "org.apache.maven.model.activation.getfile()", "org.apache.maven.model.profile.activation.fileprofileactivator.setpathtranslator(pathtranslator)", "org.apache.maven.model.activation.setproperty(activationproperty)", "org.apache.maven.model.activation.isactivebydefault()", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.activation.activation()", "org.apache.maven.model.activation.getproperty()", "org.apache.maven.model.activation.setactivebydefault(boolean)", "org.apache.maven.model.activation.getos()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.fileprofileactivator$1.fileprofileactivator$1(fileprofileactivator;boolean;file)", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.activation.clone()", "org.apache.maven.model.profile.activation.propertyprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)"]}, "reporting": {"distance": 0.8714, "methods": ["org.apache.maven.model.reporting.getplugins()", "org.apache.maven.model.reporting.getlocation(object)", "org.apache.maven.model.reporting.clone()", "org.apache.maven.model.reporting.reporting()", "org.apache.maven.model.reporting.setplugins(list)", "org.apache.maven.model.reporting.getexcludedefaults()", "org.apache.maven.model.reporting.setlocation(object;inputlocation)", "org.apache.maven.model.reporting.setoutputdirectory(string)", "org.apache.maven.model.reporting.isexcludedefaults()", "org.apache.maven.model.reporting.getoutputdirectory()"]}, "trackablebase": {"distance": 1.125, "methods": ["org.apache.maven.settings.trackablebase.trackablebase()"]}, "defaultmodelbuildingrequest": {"distance": 0.9632, "methods": ["org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelsource()", "org.apache.maven.model.building.defaultmodelbuildingrequest.islocationtracking()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getinactiveprofileids()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getsystemproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.istwophasebuilding()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setsystemproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.isprocessplugins()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.model.building.defaultmodelbuildingrequest.defaultmodelbuildingrequest()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getuserproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getprofiles()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getpomfile()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getbuildstarttime()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelresolver()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setpomfile(file)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getvalidationlevel()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelbuildinglistener()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getactiveprofileids()"]}, "repositorybase": {"distance": 0.8611, "methods": ["org.apache.maven.model.repositorybase.setname(string)", "org.apache.maven.model.repositorybase.setlayout(string)", "org.apache.maven.model.repositorybase.seturl(string)", "org.apache.maven.model.repositorybase.clone()", "org.apache.maven.model.repositorybase.getlayout()", "org.apache.maven.model.repositorybase.repositorybase()", "org.apache.maven.model.repositorybase.setid(string)", "org.apache.maven.model.repositorybase.getid()"]}, "resolutionnode": {"distance": 0.9018, "methods": ["org.apache.maven.artifact.resolver.resolutionnode.getchildreniterator()", "org.apache.maven.artifact.resolver.resolutionnode.adddependencies(set;list;artifactfilter)", "org.apache.maven.artifact.resolver.resolutionnode.getdependencytrail()", "org.apache.maven.artifact.resolver.resolutionnode.resolutionnode(artifact;list;resolutionnode)", "org.apache.maven.artifact.resolver.resolutionnode.getkey()", "org.apache.maven.artifact.resolver.resolutionnode.getdepth()", "org.apache.maven.artifact.resolver.resolutionnode.isactive()", "org.apache.maven.artifact.resolver.resolutionnode.filtertrail(artifactfilter)", "org.apache.maven.artifact.resolver.resolutionnode.ischildofrootnode()", "org.apache.maven.artifact.resolver.resolutionnode.getremoterepositories()", "org.apache.maven.artifact.resolver.resolutionnode.isresolved()", "org.apache.maven.artifact.resolver.resolutionnode.gettrail()", "org.apache.maven.artifact.resolver.resolutionnode.disable()", "org.apache.maven.artifact.resolver.resolutionnode.resolutionnode(artifact;list)", "org.apache.maven.artifact.resolver.resolutionnode.getartifact()"]}, "inputlocation": {"distance": 0.875, "methods": ["org.apache.maven.model.inputlocation.merge(inputlocation;inputlocation;boolean)"]}, "defaultmodelnormalizer": {"distance": 1.0, "methods": ["org.apache.maven.model.normalization.defaultmodelnormalizer.injectdefaultvalues(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.mergeduplicates(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdependencydefaults(list)", "org.apache.maven.model.normalization.defaultmodelnormalizer.defaultmodelnormalizer()"]}, "stringsearchmodelinterpolator$interpolateobjectaction$cacheitem": {"distance": 1.3333, "methods": ["org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem(class)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.interpolate(object;interpolateobjectaction)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.isqualifiedforinterpolation(field;class)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.isqualifiedforinterpolation(class)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.isarray()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.access$000(cacheitem)"]}, "stringsearchmodelinterpolator$interpolateobjectaction$cachefield": {"distance": 1.0, "methods": ["org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cachefield.stringsearchmodelinterpolator$interpolateobjectaction$cachefield(field)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cachefield.interpolate(object;interpolateobjectaction)"]}, "resource": {"distance": 0.875, "methods": ["org.apache.maven.model.resource.<clinit>()", "org.apache.maven.model.resource.resource()", "org.apache.maven.model.resource.clone()", "org.apache.maven.model.resource.getfiltering()"]}, "settings": {"distance": 0.9668, "methods": ["org.apache.maven.settings.pomconstructionwithsettingstest.pomconstructionwithsettingstest()", "org.apache.maven.settings.trackablebase.trackablebase()", "org.apache.maven.settings.runtimeinfo.runtimeinfo(file)", "org.apache.maven.settings.settings.settings()", "org.apache.maven.settings.settingsutilstest.settingsutilstest()"]}, "defaultrepositorylayout": {"distance": 1.25, "methods": ["org.apache.maven.artifact.repository.layout.defaultrepositorylayout.formatasdirectory(string)", "org.apache.maven.artifact.repository.layout.defaultrepositorylayout.pathofrepositorymetadata(artifactmetadata;string)", "org.apache.maven.artifact.repository.layout.defaultrepositorylayout.defaultrepositorylayout()", "org.apache.maven.artifact.repository.layout.defaultrepositorylayout.pathof(artifact)", "org.apache.maven.artifact.repository.layout.defaultrepositorylayout.pathoflocalrepositorymetadata(artifactmetadata;artifactrepository)"]}, "defaultartifactfactory": {"distance": 1.0909, "methods": ["org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;string;string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.createdependencyartifact(string;string;versionrange;string;string;string;string;boolean)", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifactwithclassifier(string;string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.createbuildartifact(string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;string;string;string)", "org.apache.maven.artifact.factory.defaultartifactfactory.defaultartifactfactory()", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;versionrange;string;string;string;string;boolean)", "org.apache.maven.artifact.factory.defaultartifactfactory.createartifact(string;string;versionrange;string;string;string;string)"]}, "defaultprofileactivationcontext": {"distance": 0.8974, "methods": ["org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.profile.defaultprofileactivationcontext.tomap(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectproperties()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectdirectory()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()"]}, "defaultpathtranslator": {"distance": 1.3333, "methods": ["org.apache.maven.model.path.defaultpathtranslator.defaultpathtranslator()", "org.apache.maven.model.path.defaultpathtranslator.aligntobasedirectory(string;file)"]}, "defaultmavenexecutionresult": {"distance": 0.9, "methods": ["org.apache.maven.execution.defaultmavenexecutionresult.defaultmavenexecutionresult()"]}, "defaultmodelvalidator": {"distance": 2.0, "methods": ["org.apache.maven.model.validation.defaultmodelvalidator.validate20rawplugins(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.<clinit>()", "org.apache.maven.model.validation.defaultmodelvalidator.validateversionnoexpression(string;modelproblemcollector;severity;version;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawmodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.validation.defaultmodelvalidator.validatebannedcharacters(string;modelproblemcollector;severity;version;string;string;inputlocationtracker;string)", "org.apache.maven.model.validation.defaultmodelvalidator.validateboolean(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnoexpression(string;modelproblemcollector;severity;version;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validateenum(string;modelproblemcollector;severity;version;string;string;inputlocationtracker;string[])", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20propersnapshotversion(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.hasprojectexpression(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20rawdependencies(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawrepositories(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20pluginversion(string;modelproblemcollector;string;string;inputlocationtracker;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(modelbuildingrequest;int)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;version;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validateversion(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.hasexpression(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatenotnull(string;modelproblemcollector;severity;version;object;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20effectiverepository(modelproblemcollector;repository;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.defaultmodelvalidator()", "org.apache.maven.model.validation.defaultmodelvalidator.validate30rawprofileactivation(modelproblemcollector;activation;string;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20rawresources(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(int;int)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependencies(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20effectiveplugindependencies(modelproblemcollector;plugin;modelbuildingrequest)", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivemodel(model;modelbuildingrequest;modelproblemcollector)"]}, "dependency": {"distance": 0.8571, "methods": ["org.apache.maven.model.dependency.setartifactid(string)", "org.apache.maven.model.dependency.setversion(string)", "org.apache.maven.model.dependency.dependency()", "org.apache.maven.model.dependency.setgroupid(string)"]}, "modeldata": {"distance": 0.9286, "methods": ["org.apache.maven.model.building.modeldata.setartifactid(string)", "org.apache.maven.model.building.modeldata.getactiveprofiles()", "org.apache.maven.model.building.modeldata.setmodel(model)", "org.apache.maven.model.building.modeldata.getid()", "org.apache.maven.model.building.modeldata.getmodel()", "org.apache.maven.model.building.modeldata.getgroupid()", "org.apache.maven.model.building.modeldata.getsource()", "org.apache.maven.model.building.modeldata.getrawmodel()", "org.apache.maven.model.building.modeldata.getversion()", "org.apache.maven.model.building.modeldata.setrawmodel(model)", "org.apache.maven.model.building.modeldata.getartifactid()", "org.apache.maven.model.building.modeldata.setversion(string)", "org.apache.maven.model.building.modeldata.setactiveprofiles(list)", "org.apache.maven.model.building.modeldata.modeldata(modelsource;model)", "org.apache.maven.model.building.modeldata.setgroupid(string)"]}, "defaultmodelproblemcollector": {"distance": 0.8485, "methods": ["org.apache.maven.model.building.defaultmodelproblemcollector.defaultmodelproblemcollector(modelbuildingresult)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(string)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(model)", "org.apache.maven.model.building.defaultmodelproblemcollector.haserrors()", "org.apache.maven.model.building.defaultmodelproblemcollector.setrootmodel(model)", "org.apache.maven.model.building.defaultmodelproblemcollector.hasfatalerrors()"]}, "modelbase": {"distance": 0.931, "methods": ["org.apache.maven.model.modelbase.getdistributionmanagement()", "org.apache.maven.model.modelbase.setrepositories(list)", "org.apache.maven.model.modelbase.clone()", "org.apache.maven.model.modelbase.setreporting(reporting)", "org.apache.maven.model.modelbase.setproperties(properties)", "org.apache.maven.model.modelbase.getlocation(object)", "org.apache.maven.model.modelbase.getreports()", "org.apache.maven.model.modelbase.setdependencies(list)", "org.apache.maven.model.modelbase.setpluginrepositories(list)", "org.apache.maven.model.modelbase.setlocation(object;inputlocation)", "org.apache.maven.model.modelbase.getmodules()", "org.apache.maven.model.modelbase.getdependencies()", "org.apache.maven.model.modelbase.getproperties()", "org.apache.maven.model.modelbase.addproperty(string;string)", "org.apache.maven.model.modelbase.modelbase()", "org.apache.maven.model.modelbase.getpluginrepositories()", "org.apache.maven.model.modelbase.getdependencymanagement()", "org.apache.maven.model.modelbase.getreporting()", "org.apache.maven.model.modelbase.getrepositories()"]}, "model": {"distance": 0.9735, "methods": ["org.apache.maven.model.building.defaultmodelbuilderfactory.newpathtranslator()", "org.apache.maven.model.plugin.getextensions()", "org.apache.maven.model.building.defaultmodelbuilder.readparent(model;modelsource;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.modelbase.getdistributionmanagement()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelsource()", "org.apache.maven.model.building.defaultmodelbuildingrequest.islocationtracking()", "org.apache.maven.model.merge.modelmerger.mergeplugin_groupid(plugin;plugin;boolean;map)", "org.apache.maven.model.mailinglist.mailinglist()", "org.apache.maven.model.profile.getbuild()", "org.apache.maven.model.reportplugin.getgroupid()", "org.apache.maven.model.merge.modelmerger.mergebuild_testoutputdirectory(build;build;boolean;map)", "org.apache.maven.model.profile.activation.fileprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_finalname(buildbase;buildbase;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(reader;boolean)", "org.apache.maven.model.building.modeldata.setartifactid(string)", "org.apache.maven.model.reportplugin.getkey()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_name(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.injectprofileactivations(model;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory$stublifecyclebindingsinjector.defaultmodelbuilderfactory$stublifecyclebindingsinjector(1)", "org.apache.maven.model.building.defaultmodelbuilder.fireevent(model;modelbuildingrequest;modelproblemcollector;modelbuildingeventcatapult)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newreportconfigurationexpander()", "org.apache.maven.model.build.clone()", "org.apache.maven.model.io.defaultmodelreader.getsource(map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.createinterpolator()", "org.apache.maven.model.building.modeldata.getactiveprofiles()", "org.apache.maven.model.reportplugin.setreportsets(list)", "org.apache.maven.model.path.defaultmodelurlnormalizer.defaultmodelurlnormalizer()", "org.apache.maven.model.model.seturl(string)", "org.apache.maven.model.buildbase.getfinalname()", "org.apache.maven.model.model.getversion()", "org.apache.maven.model.merge.modelmerger.mergebuild(build;build;boolean;map)", "org.apache.maven.model.model.getorganization()", "org.apache.maven.model.building.defaultmodelbuildingresult.setrawmodel(string;model)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseplugin(xmlpullparser;boolean)", "org.apache.maven.model.configurationcontainer.setinherited(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$objectfield.stringsearchmodelinterpolator$interpolateobjectaction$objectfield(field)", "org.apache.maven.model.superpom.defaultsuperpomprovider.defaultsuperpomprovider()", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.defaultreportconfigurationexpander()", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.urlnormalizingpostprocessor(urlnormalizer)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newpluginmanagementinjector()", "org.apache.maven.model.modelbase.setrepositories(list)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20rawplugins(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.configurationcontainer.setconfiguration(object)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.clearfeedback()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_artifactid(model;model;boolean;map)", "org.apache.maven.model.profile.activation.propertyprofileactivator.propertyprofileactivator()", "org.apache.maven.model.building.defaultmodelbuilder.interpolatemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.io.defaultmodelwriter.defaultmodelwriter()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.getcacheentry(class)", "org.apache.maven.model.activationfile.setexists(string)", "org.apache.maven.model.model.getissuemanagement()", "org.apache.maven.model.build.getsourcedirectory()", "org.apache.maven.model.modelbase.clone()", "org.apache.maven.model.io.defaultmodelreader.read(reader;boolean;inputsource)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelnormalizer(modelnormalizer)", "org.apache.maven.model.buildbase.getdefaultgoal()", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.building.modeldata.setmodel(model)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergereporting_plugins(reporting;reporting;boolean;map)", "org.apache.maven.model.model.getprofiles()", "org.apache.maven.model.interpolation.pathtranslatingpostprocessor.pathtranslatingpostprocessor(list;collection;file;pathtranslator)", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.execute(string;object)", "org.apache.maven.model.profile.defaultprofileselector.addprofileactivator(profileactivator)", "org.apache.maven.model.mailinglist.getpost()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_repositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_contributors(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer_inherited(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem(class)", "org.apache.maven.model.building.defaultmodelbuilder.setsuperpomprovider(superpomprovider)", "org.apache.maven.model.buildbase.getresources()", "org.apache.maven.model.activationproperty.setname(string)", "org.apache.maven.model.buildbase.setresources(list)", "org.apache.maven.model.validation.defaultmodelvalidator.<clinit>()", "org.apache.maven.model.patternset.patternset()", "org.apache.maven.model.locator.defaultmodellocator.defaultmodellocator()", "org.apache.maven.model.reportplugin.constructkey(string;string)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelurlnormalizer(modelurlnormalizer)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$2.getvalue(string)", "org.apache.maven.model.modelbase.setreporting(reporting)", "org.apache.maven.model.mailinglist.setname(string)", "org.apache.maven.model.profile.defaultprofileactivationcontext.defaultprofileactivationcontext()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsepluginexecution(xmlpullparser;boolean)", "org.apache.maven.model.reportplugin.getreportsets()", "org.apache.maven.model.profile.defaultprofileactivationcontext.tomap(properties)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writereporting(reporting;string;xmlserializer)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_mailinglists(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectproperties(properties)", "org.apache.maven.model.plugincontainer.getplugins()", "org.apache.maven.model.building.defaultmodelbuilderfactorytest.getpom(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_cimanagement(model;model;boolean;map)", "org.apache.maven.model.pluginconfiguration.setpluginmanagement(pluginmanagement)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_pluginrepositories(modelbase;modelbase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.importdependencymanagement(model;modelbuildingrequest;defaultmodelproblemcollector;collection)", "org.apache.maven.model.model.getdescription()", "org.apache.maven.model.model.getparent()", "org.apache.maven.model.model.setgroupid(string)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(model;file;modelbuildingrequest)", "org.apache.maven.model.management.defaultdependencymanagementinjector.injectmanagement(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.setlicenses(list)", "org.apache.maven.model.validation.defaultmodelvalidator.validateversionnoexpression(string;modelproblemcollector;severity;version;string;inputlocationtracker)", "org.apache.maven.model.profile.getsource()", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergemanagedbuildplugins(model)", "org.apache.maven.model.building.defaultmodelproblemcollector.defaultmodelproblemcollector(modelbuildingresult)", "org.apache.maven.model.building.defaultmodelbuilder.setpluginconfigurationexpander(pluginconfigurationexpander)", "org.apache.maven.model.dependency.setartifactid(string)", "org.apache.maven.model.modelbase.setproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getinactiveprofileids()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.<clinit>()", "org.apache.maven.model.activationproperty.getvalue()", "org.apache.maven.model.building.modelproblem$version.modelproblem$version(string;int)", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawmodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cachefield.stringsearchmodelinterpolator$interpolateobjectaction$cachefield(field)", "org.apache.maven.model.buildbase.buildbase()", "org.apache.maven.model.building.defaultmodelprocessor.setmodellocator(modellocator)", "org.apache.maven.model.validation.defaultmodelvalidatortest.defaultmodelvalidatortest()", "org.apache.maven.model.building.defaultmodelprocessor.read(inputstream;map)", "org.apache.maven.model.model.setname(string)", "org.apache.maven.model.build.setscriptsourcedirectory(string)", "org.apache.maven.model.path.defaultmodelurlnormalizer.seturlnormalizer(urlnormalizer)", "org.apache.maven.model.merge.modelmerger.mergebuild_sourcedirectory(build;build;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelvalidator()", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.io.defaultmodelwriter.write(file;map;model)", "org.apache.maven.model.merge.mavenmodelmerger.getrepositorybasekey(repositorybase)", "org.apache.maven.model.configurationcontainer.clone()", "org.apache.maven.model.building.defaultmodelbuildingresult.setactiveexternalprofiles(list)", "org.apache.maven.model.building.defaultmodelproblemcollector.setsource(model)", "org.apache.maven.model.building.filemodelsource.getlocation()", "org.apache.maven.model.model.setdescription(string)", "org.apache.maven.model.building.defaultmodelbuilder.readmodel(modelsource;file;modelbuildingrequest;defaultmodelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_directory(buildbase;buildbase;boolean;map)", "org.apache.maven.model.repository.setsnapshots(repositorypolicy)", "org.apache.maven.model.repositorybase.setname(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cachefield.interpolate(object;interpolateobjectaction)", "org.apache.maven.model.patternset.clone()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getsystemproperties()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setsystemproperties(properties)", "org.apache.maven.model.mailinglist.getunsubscribe()", "org.apache.maven.model.building.defaultmodelbuildingrequest.istwophasebuilding()", "org.apache.maven.model.model.clonehook(model)", "org.apache.maven.model.reporting.getplugins()", "org.apache.maven.model.building.defaultmodelbuildingresult.geteffectivemodel()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelprocessor(modelprocessor)", "org.apache.maven.model.path.defaultmodelpathtranslator.setpathtranslator(pathtranslator)", "org.apache.maven.model.configurationcontainer.getinherited()", "org.apache.maven.model.repositorypolicy.setupdatepolicy(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_url(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivationcontext(modelbuildingrequest)", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.defaultdependencymanagementinjector$managementmodelmerger()", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdefaultvalues(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setsystemproperties(properties)", "org.apache.maven.model.building.defaultmodelbuildingrequest.isprocessplugins()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writemailinglist(mailinglist;string;xmlserializer)", "org.apache.maven.model.building.defaultmodelbuilder.setinheritanceassembler(inheritanceassembler)", "org.apache.maven.model.build.gettestoutputdirectory()", "org.apache.maven.model.activationproperty.activationproperty()", "org.apache.maven.model.merge.modelmerger.mergepluginconfiguration_pluginmanagement(pluginconfiguration;pluginconfiguration;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodelbase_modules(modelbase;modelbase;boolean;map)", "org.apache.maven.model.model.setprofiles(list)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$2.abstractstringbasedmodelinterpolator$2(abstractstringbasedmodelinterpolator;boolean;file)", "org.apache.maven.model.mailinglist.setunsubscribe(string)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.getvalue(string)", "org.apache.maven.model.repository.clone()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivationproperty(xmlpullparser;boolean)", "org.apache.maven.model.path.defaulturlnormalizer.normalize(string)", "org.apache.maven.model.dependency.setversion(string)", "org.apache.maven.model.activation.setfile(activationfile)", "org.apache.maven.model.building.modeldata.getid()", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector;boolean)", "org.apache.maven.model.building.defaultmodelbuilder.hasfatalerrors(modelproblemcollectorext)", "org.apache.maven.model.modelbase.getlocation(object)", "org.apache.maven.model.model.getmodelencoding()", "org.apache.maven.model.activation.getjdk()", "org.apache.maven.model.reportplugin.setartifactid(string)", "org.apache.maven.model.merge.modelmerger.mergemodel_description(model;model;boolean;map)", "org.apache.maven.model.modelbase.getreports()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.gettrimmedvalue(string)", "org.apache.maven.model.buildbase.getfilters()", "org.apache.maven.model.buildbase.setfinalname(string)", "org.apache.maven.model.merge.modelmerger.mergeplugincontainer(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.reporting.getlocation(object)", "org.apache.maven.model.validation.defaultmodelvalidator.validatebannedcharacters(string;modelproblemcollector;severity;version;string;string;inputlocationtracker;string)", "org.apache.maven.model.pluginconfiguration.clone()", "org.apache.maven.model.model.setmailinglists(list)", "org.apache.maven.model.building.defaultmodelbuilder.setprofileinjector(profileinjector)", "org.apache.maven.model.profile.defaultprofileactivationcontext.setprojectdirectory(file)", "org.apache.maven.model.inheritance.defaultinheritanceassemblertest.getmodel(string)", "org.apache.maven.model.merge.modelmerger.mergebuild_extensions(build;build;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidator.validateboolean(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.plugin.getdependencies()", "org.apache.maven.model.reportset.setid(string)", "org.apache.maven.model.reportplugin.reportplugin()", "org.apache.maven.model.activationfile.setmissing(string)", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnoexpression(string;modelproblemcollector;severity;version;string;inputlocationtracker)", "org.apache.maven.model.fileset.setdirectory(string)", "org.apache.maven.model.pluginconfiguration.pluginconfiguration()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_profiles(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileselector.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.activationfile.activationfile()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.access$400(object;interpolateobjectaction)", "org.apache.maven.model.reportplugin.getartifactid()", "org.apache.maven.model.management.defaultdependencymanagementinjector.defaultdependencymanagementinjector()", "org.apache.maven.model.plugin.setexecutions(list)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelreader()", "org.apache.maven.model.management.defaultpluginmanagementinjector.injectmanagement(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.activation.getfile()", "org.apache.maven.model.profile.defaultprofileinjector.injectprofile(model;profile;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.management.defaultpluginmanagementinjector.defaultpluginmanagementinjector()", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$3.abstractstringbasedmodelinterpolator$3(abstractstringbasedmodelinterpolator;boolean;modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuildingrequest.setprocessplugins(boolean)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$mapfield.dointerpolate(object;interpolateobjectaction)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserepositorypolicy(xmlpullparser;boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.validateenum(string;modelproblemcollector;severity;version;string;string;inputlocationtracker;string[])", "org.apache.maven.model.modelbase.setdependencies(list)", "org.apache.maven.model.merge.mavenmodelmerger.getreportpluginkey(reportplugin)", "org.apache.maven.model.interpolation.buildtimestampvaluesource.buildtimestampvaluesource(date;properties)", "org.apache.maven.model.profile.defaultprofileinjector.defaultprofileinjector()", "org.apache.maven.model.building.defaultmodelbuildingresult.addmodelid(string)", "org.apache.maven.model.profile.activation.fileprofileactivator.setpathtranslator(pathtranslator)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.access$100()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getsystemproperties()", "org.apache.maven.model.reportplugin.setgroupid(string)", "org.apache.maven.model.merge.modelmerger.mergepluginconfiguration(pluginconfiguration;pluginconfiguration;boolean;map)", "org.apache.maven.model.activation.setproperty(activationproperty)", "org.apache.maven.model.building.modelproblem$version.<clinit>()", "org.apache.maven.model.interpolation.mavenbuildtimestamptest.mavenbuildtimestamptest()", "org.apache.maven.model.repositorybase.setlayout(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.traverseobjectwithparents(class;object)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivationfile(xmlpullparser;boolean)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.defaultprofileinjector$profilemodelmerger()", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer;boolean;map)", "org.apache.maven.model.profile.getactivation()", "org.apache.maven.model.pluginexecution.setid(string)", "org.apache.maven.model.interpolation.abstractmodelinterpolatortest.abstractmodelinterpolatortest()", "org.apache.maven.model.reporting.clone()", "org.apache.maven.model.building.defaultmodelbuildingrequest.defaultmodelbuildingrequest()", "org.apache.maven.model.plugincontainer.setlocation(object;inputlocation)", "org.apache.maven.model.building.modeldata.getmodel()", "org.apache.maven.model.validation.defaultmodelvalidator.validate20propersnapshotversion(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolatemodel(model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.checkfieldwithduplicate(xmlpullparser;string;string;set)", "org.apache.maven.model.mailinglist.getarchive()", "org.apache.maven.model.plugincontainer.setplugins(list)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_modelversion(model;model;boolean;map)", "org.apache.maven.model.model.getinceptionyear()", "org.apache.maven.model.building.complexactivationtest.complexactivationtest()", "org.apache.maven.model.model.setpomfile(file)", "org.apache.maven.model.reportset.getreports()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setactiveprofileids(list)", "org.apache.maven.model.building.modeldata.getgroupid()", "org.apache.maven.model.model.getlicenses()", "org.apache.maven.model.interpolation.urlnormalizingpostprocessor.<clinit>()", "org.apache.maven.model.merge.modelmerger.mergemodel_groupid(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingresult.setactivepomprofiles(string;list)", "org.apache.maven.model.merge.modelmerger.mergereportplugin(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.model.setmodelencoding(string)", "org.apache.maven.model.profile.defaultprofileselector.isactivebydefault(profile)", "org.apache.maven.model.interpolation.mavenbuildtimestamp.mavenbuildtimestamp(date;string)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.defaultpluginmanagementinjector$managementmodelmerger()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newurlnormalizer()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereporting(xmlpullparser;boolean)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getinactiveprofileids()", "org.apache.maven.model.model.getdevelopers()", "org.apache.maven.model.merge.modelmerger.mergebuild_outputdirectory(build;build;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelinterpolator(modelinterpolator)", "org.apache.maven.model.profile.setactivation(activation)", "org.apache.maven.model.build.settestsourcedirectory(string)", "org.apache.maven.model.building.defaultmodelbuilder.hasmodelerrors(modelproblemcollectorext)", "org.apache.maven.model.path.defaultpathtranslator.defaultpathtranslator()", "org.apache.maven.model.normalization.defaultmodelnormalizer.mergeduplicates(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.normalization.defaultmodelnormalizer.injectdependencydefaults(list)", "org.apache.maven.model.building.modeldata.getsource()", "org.apache.maven.model.superpom.defaultsuperpomprovider.getsupermodel(string)", "org.apache.maven.model.build.setoutputdirectory(string)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.defaultinheritanceassembler$inheritancemodelmerger()", "org.apache.maven.model.building.modeldata.getrawmodel()", "org.apache.maven.model.merge.modelmerger.modelmerger()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.<clinit>()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.interpolate(object;interpolateobjectaction)", "org.apache.maven.model.building.defaultmodelbuilder.configureresolver(modelresolver;model;defaultmodelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_developers(model;model;boolean;map)", "org.apache.maven.model.plugin.constructkey(string;string)", "org.apache.maven.model.repositorybase.seturl(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_organization(model;model;boolean;map)", "org.apache.maven.model.building.modeldata.getversion()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseprofile(xmlpullparser;boolean)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newpluginconfigurationexpander()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writereportset(reportset;string;xmlserializer)", "org.apache.maven.model.mailinglist.setpost(string)", "org.apache.maven.model.plugincontainer.addplugin(plugin)", "org.apache.maven.model.repositorypolicy.clone()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setuserproperties(properties)", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementimporter(dependencymanagementimporter)", "org.apache.maven.model.configurationcontainer.isinherited()", "org.apache.maven.model.merge.modelmerger.mergebuildbase(buildbase;buildbase;boolean;map)", "org.apache.maven.model.mailinglist.getsubscribe()", "org.apache.maven.model.buildbase.gettestresources()", "org.apache.maven.model.building.defaultmodelbuilderfactory$stublifecyclebindingsinjector.defaultmodelbuilderfactory$stublifecyclebindingsinjector()", "org.apache.maven.model.reporting.reporting()", "org.apache.maven.model.merge.modelmerger.mergemodel_version(model;model;boolean;map)", "org.apache.maven.model.path.defaultmodelpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.io.defaultmodelreader.read(inputstream;map)", "org.apache.maven.model.modelbase.setpluginrepositories(list)", "org.apache.maven.model.model.getmailinglists()", "org.apache.maven.model.modelbase.setlocation(object;inputlocation)", "org.apache.maven.model.merge.modelmerger.mergemodel_inceptionyear(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeplugin_dependencies(plugin;plugin;boolean;map)", "org.apache.maven.model.reportset.setreports(list)", "org.apache.maven.model.activation.isactivebydefault()", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newlifecyclebindingsinjector()", "org.apache.maven.model.buildbase.setfilters(list)", "org.apache.maven.model.buildbase.settestresources(list)", "org.apache.maven.model.profile.activation.fileprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.profile.activation.jdkversionprofileactivator.jdkversionprofileactivator()", "org.apache.maven.model.merge.modelmerger.mergereporting_outputdirectory(reporting;reporting;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getuserproperties()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writereportplugin(reportplugin;string;xmlserializer)", "org.apache.maven.model.validation.defaultmodelvalidator.hasprojectexpression(string)", "org.apache.maven.model.plugin.getgroupid()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writemodel(model;string;xmlserializer)", "org.apache.maven.model.modelbase.getmodules()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.getbooleanvalue(string;string;xmlpullparser;string)", "org.apache.maven.model.repository.setreleases(repositorypolicy)", "org.apache.maven.model.repositorybase.clone()", "org.apache.maven.model.building.defaultmodelbuilder.setdependencymanagementinjector(dependencymanagementinjector)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsebuildbase(xmlpullparser;boolean)", "org.apache.maven.model.activation.activation()", "org.apache.maven.model.plugin.plugin()", "org.apache.maven.model.build.gettestsourcedirectory()", "org.apache.maven.model.model.getcimanagement()", "org.apache.maven.model.repositorybase.getlayout()", "org.apache.maven.model.plugin.setversion(string)", "org.apache.maven.model.modelbase.getdependencies()", "org.apache.maven.model.building.defaultmodelbuilder.setmodelpathtranslator(modelpathtranslator)", "org.apache.maven.model.profile.defaultprofileinjector$profilemodelmerger.mergemodelbase(modelbase;modelbase)", "org.apache.maven.model.build.settestoutputdirectory(string)", "org.apache.maven.model.activation.getproperty()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parserepository(xmlpullparser;boolean)", "org.apache.maven.model.merge.modelmerger.mergeplugin_extensions(plugin;plugin;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20rawdependencies(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.model.getpomfile()", "org.apache.maven.model.activation.setactivebydefault(boolean)", "org.apache.maven.model.model.model()", "org.apache.maven.model.pluginmanagement.pluginmanagement()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.interpolate(string)", "org.apache.maven.model.activation.getos()", "org.apache.maven.model.build.setsourcedirectory(string)", "org.apache.maven.model.merge.modelmerger.mergebuildbase_resources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.fileset.getdirectory()", "org.apache.maven.model.validation.defaultmodelvalidator.validaterawrepositories(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.reporting.setplugins(list)", "org.apache.maven.model.activationfile.clone()", "org.apache.maven.model.mailinglist.setsubscribe(string)", "org.apache.maven.model.model.getmodelversion()", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20pluginversion(string;modelproblemcollector;string;string;inputlocationtracker;modelbuildingrequest)", "org.apache.maven.model.model.getscm()", "org.apache.maven.model.interpolation.pathtranslatingpostprocessor.execute(string;object)", "org.apache.maven.model.building.defaultmodelbuilder.checkpluginversions(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.interpolation.mavenbuildtimestamp.mavenbuildtimestamp(date;properties)", "org.apache.maven.model.plugincontainer.plugincontainer()", "org.apache.maven.model.inputlocation.merge(inputlocation;inputlocation;boolean)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsemodel(xmlpullparser;boolean)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_prerequisites(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelpathtranslator()", "org.apache.maven.model.resource.<clinit>()", "org.apache.maven.model.buildbase.getdirectory()", "org.apache.maven.model.profile.clone()", "org.apache.maven.model.model.setdevelopers(list)", "org.apache.maven.model.io.defaultmodelreader.read(file;map)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newdependencymanagementinjector()", "org.apache.maven.model.pluginconfiguration.getpluginmanagement()", "org.apache.maven.model.profile.defaultprofileselector.defaultprofileselector()", "org.apache.maven.model.model.geturl()", "org.apache.maven.model.profile.activation.propertyprofileactivatortest.propertyprofileactivatortest()", "org.apache.maven.model.inheritance.defaultinheritanceassembler.getchildpathadjustment(model;model)", "org.apache.maven.model.repositorybase.repositorybase()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writebuild(build;string;xmlserializer)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.isqualifiedforinterpolation(field;class)", "org.apache.maven.model.inheritance.defaultinheritanceassembler.assemblemodelinheritance(model;model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.merge.modelmerger.mergereportplugin_groupid(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.model.setversion(string)", "org.apache.maven.model.pluginmanagement.clone()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.operatingsystemprofileactivator()", "org.apache.maven.model.interpolation.buildtimestampvaluesource.getvalue(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$mapfield.stringsearchmodelinterpolator$interpolateobjectaction$mapfield(field)", "org.apache.maven.model.building.defaultmodelprocessor.setmodelreader(modelreader)", "org.apache.maven.model.reporting.getexcludedefaults()", "org.apache.maven.model.plugin.getartifactid()", "org.apache.maven.model.merge.modelmerger.mergemodel_packaging(model;model;boolean;map)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$1.getvalue(string)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getprofiles()", "org.apache.maven.model.merge.modelmerger.mergemodelbase_distributionmanagement(modelbase;modelbase;boolean;map)", "org.apache.maven.model.building.defaultmodelproblemcollector.haserrors()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expand(list)", "org.apache.maven.model.mailinglist.getotherarchives()", "org.apache.maven.model.building.modelbuildingeventcatapult$1.modelbuildingeventcatapult$1()", "org.apache.maven.model.merge.modelmerger.mergemodel_scm(model;model;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(modelbuildingrequest;int)", "org.apache.maven.model.building.filemodelsource.filemodelsource(file)", "org.apache.maven.model.building.modeldata.setrawmodel(model)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_properties(modelbase;modelbase;boolean;map)", "org.apache.maven.model.plugincontainer.getlocation(object)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newsuperpomprovider()", "org.apache.maven.model.io.defaultmodelreader.defaultmodelreader()", "org.apache.maven.model.path.defaulturlnormalizer.defaulturlnormalizer()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getpomfile()", "org.apache.maven.model.io.xpp3.mavenxpp3writer.write(writer;model)", "org.apache.maven.model.merge.modelmerger.mergereporting_excludedefaults(reporting;reporting;boolean;map)", "org.apache.maven.model.repository.repository()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$stringfield.dointerpolate(object;interpolateobjectaction)", "org.apache.maven.model.building.complexactivationtest.getpom(string)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newdependencymanagementimporter()", "org.apache.maven.model.validation.defaultmodelvalidator.validatestringnotempty(string;modelproblemcollector;severity;version;string;inputlocationtracker)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergereportplugin_reportsets(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.getreportsetkey(reportset)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getbuildstarttime()", "org.apache.maven.model.management.defaultpluginmanagementinjector$managementmodelmerger.mergeplugincontainer_plugins(plugincontainer;plugincontainer)", "org.apache.maven.model.profile.profile()", "org.apache.maven.model.modelbase.getproperties()", "org.apache.maven.model.reportset.getid()", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult;collection)", "org.apache.maven.model.validation.defaultmodelvalidator.validateversion(string;modelproblemcollector;severity;version;string;string;inputlocationtracker)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseactivation(xmlpullparser;boolean)", "org.apache.maven.model.repositorybase.setid(string)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_dependencymanagement(modelbase;modelbase;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.mavenxpp3reader()", "org.apache.maven.model.merge.modelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergepluginmanagement(pluginmanagement;pluginmanagement;boolean;map)", "org.apache.maven.model.path.defaultpathtranslator.aligntobasedirectory(string;file)", "org.apache.maven.model.validation.defaultmodelvalidator.hasexpression(string)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsebuild(xmlpullparser;boolean)", "org.apache.maven.model.validation.defaultmodelvalidator.validatenotnull(string;modelproblemcollector;severity;version;object;string;inputlocationtracker)", "org.apache.maven.model.merge.modelmerger.mergemodelbase_reporting(modelbase;modelbase;boolean;map)", "org.apache.maven.model.model.setbuild(build)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20effectiverepository(modelproblemcollector;repository;string;modelbuildingrequest)", "org.apache.maven.model.interpolation.problemdetectingvaluesource.problemdetectingvaluesource(valuesource;string;string;modelproblemcollector)", "org.apache.maven.model.activationfile.getexists()", "org.apache.maven.model.modelbase.addproperty(string;string)", "org.apache.maven.model.normalization.defaultmodelnormalizer$duplicatemerger.defaultmodelnormalizer$duplicatemerger()", "org.apache.maven.model.plugin.getkey()", "org.apache.maven.model.reporting.setlocation(object;inputlocation)", "org.apache.maven.model.inheritance.defaultinheritanceassemblertest.getpom(string)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.access$300(interpolateobjectaction;string)", "org.apache.maven.model.build.getextensions()", "org.apache.maven.model.building.defaultmodelbuilder.setpluginmanagementinjector(pluginmanagementinjector)", "org.apache.maven.model.merge.modelmerger.merge(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelresolver()", "org.apache.maven.model.building.modelproblem$severity.<clinit>()", "org.apache.maven.model.modelbase.modelbase()", "org.apache.maven.model.building.defaultmodelbuilder.setprofileselector(profileselector)", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newinheritanceassembler()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newprofileactivators()", "org.apache.maven.model.management.defaultdependencymanagementinjector$managementmodelmerger.mergemanageddependencies(model)", "org.apache.maven.model.activationproperty.setvalue(string)", "org.apache.maven.model.modelbase.getpluginrepositories()", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel(model;model;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest;modelbuildingresult)", "org.apache.maven.model.model.getgroupid()", "org.apache.maven.model.profile.activation.operatingsystemprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilder.getsupermodel()", "org.apache.maven.model.merge.modelmerger.mergemodelbase_dependencies(modelbase;modelbase;boolean;map)", "org.apache.maven.model.fileset.fileset()", "org.apache.maven.model.dependency.dependency()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectproperties()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$objectfield.dointerpolate(object;interpolateobjectaction)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelurlnormalizer()", "org.apache.maven.model.inheritance.defaultinheritanceassemblertest.defaultinheritanceassemblertest()", "org.apache.maven.model.configurationcontainer.configurationcontainer()", "org.apache.maven.model.building.modeldata.getartifactid()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.isqualifiedforinterpolation(class)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.isarray()", "org.apache.maven.model.merge.modelmerger.mergemodelbase(modelbase;modelbase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.build(modelbuildingrequest)", "org.apache.maven.model.model.getartifactid()", "org.apache.maven.model.buildbase.clone()", "org.apache.maven.model.building.modeldata.setversion(string)", "org.apache.maven.model.merge.modelmerger.mergebuild_scriptsourcedirectory(build;build;boolean;map)", "org.apache.maven.model.profile.setid(string)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newinstance()", "org.apache.maven.model.profile.activation.fileprofileactivator$1.fileprofileactivator$1(fileprofileactivator;boolean;file)", "org.apache.maven.model.model.getname()", "org.apache.maven.model.repositorypolicy.repositorypolicy()", "org.apache.maven.model.plugin.setartifactid(string)", "org.apache.maven.model.building.defaultmodelbuildingresult.getproblems()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newprofileinjector()", "org.apache.maven.model.configurationcontainer.getconfiguration()", "org.apache.maven.model.validation.defaultmodelvalidator.validateid(string;modelproblemcollector;string;inputlocationtracker)", "org.apache.maven.model.pluginexecution.setgoals(list)", "org.apache.maven.model.activationproperty.getname()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parseresource(xmlpullparser;boolean)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelprocessor()", "org.apache.maven.model.merge.modelmerger.getrepositorykey(repository)", "org.apache.maven.model.resource.resource()", "org.apache.maven.model.building.defaultmodelproblemcollector.setrootmodel(model)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(model;modelbuildingrequest)", "org.apache.maven.model.pluginexecution.pluginexecution()", "org.apache.maven.model.reportset.reportset()", "org.apache.maven.model.validation.defaultmodelvalidator.defaultmodelvalidator()", "org.apache.maven.model.building.modelproblem$severity.modelproblem$severity(string;int)", "org.apache.maven.model.model.clone()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.defaultpluginconfigurationexpander()", "org.apache.maven.model.reporting.setoutputdirectory(string)", "org.apache.maven.model.merge.modelmerger.mergeplugin_artifactid(plugin;plugin;boolean;map)", "org.apache.maven.model.validation.defaultmodelvalidator.validate30rawprofileactivation(modelproblemcollector;activation;string;string;modelbuildingrequest)", "org.apache.maven.model.configurationcontainer.getlocation(object)", "org.apache.maven.model.validation.defaultmodelvalidator.validate20rawresources(modelproblemcollector;list;string;modelbuildingrequest)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodellocator()", "org.apache.maven.model.building.defaultmodelbuildingrequest.setpomfile(file)", "org.apache.maven.model.plugin.clone()", "org.apache.maven.model.building.defaultmodelbuilder.assembleinheritance(list;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.inheritance.defaultinheritanceassemblertest.setup()", "org.apache.maven.model.building.modelproblem$severity.values()", "org.apache.maven.model.merge.modelmerger.mergebuild_testsourcedirectory(build;build;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilderfactorytest.defaultmodelbuilderfactorytest()", "org.apache.maven.model.merge.modelmerger.mergebuildbase_defaultgoal(buildbase;buildbase;boolean;map)", "org.apache.maven.model.normalization.defaultmodelnormalizer.defaultmodelnormalizer()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.access$500(interpolateobjectaction)", "org.apache.maven.model.repositorybase.getid()", "org.apache.maven.model.fileset.clone()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsepluginmanagement(xmlpullparser;boolean)", "org.apache.maven.model.pluginexecution.clone()", "org.apache.maven.model.superpom.defaultsuperpomprovider.setmodelprocessor(modelprocessor)", "org.apache.maven.model.plugin.getgoals()", "org.apache.maven.model.plugincontainer.clone()", "org.apache.maven.model.profile.activation.propertyprofileactivator.isactive(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.profile.activation.jdkversionprofileactivatortest.jdkversionprofileactivatortest()", "org.apache.maven.model.pluginexecution.getid()", "org.apache.maven.model.reportplugin.getversion()", "org.apache.maven.model.model.setartifactid(string)", "org.apache.maven.model.building.modeldata.setactiveprofiles(list)", "org.apache.maven.model.validation.defaultmodelvalidator.getseverity(int;int)", "org.apache.maven.model.configurationcontainer.setlocation(object;inputlocation)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.mavenxpp3writer()", "org.apache.maven.model.model.setpackaging(string)", "org.apache.maven.model.building.modeldata.modeldata(modelsource;model)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getprojectdirectory()", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelnormalizer()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsemailinglist(xmlpullparser;boolean)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newreportingconverter()", "org.apache.maven.model.path.defaulturlnormalizertest.defaulturlnormalizertest()", "org.apache.maven.model.profile.defaultprofileactivationcontext.setinactiveprofileids(list)", "org.apache.maven.model.plugin.setgroupid(string)", "org.apache.maven.model.resource.clone()", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereportplugin(xmlpullparser;boolean)", "org.apache.maven.model.io.xpp3.mavenxpp3writer.writeplugin(plugin;string;xmlserializer)", "org.apache.maven.model.build.getscriptsourcedirectory()", "org.apache.maven.model.modelbase.getdependencymanagement()", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivedependencies(modelproblemcollector;list;boolean;modelbuildingrequest)", "org.apache.maven.model.merge.modelmerger.mergemodel_parent(model;model;boolean;map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.parsereportset(xmlpullparser;boolean)", "org.apache.maven.model.reporting.isexcludedefaults()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.run()", "org.apache.maven.model.resource.getfiltering()", "org.apache.maven.model.merge.modelmerger.mergebuildbase_testresources(buildbase;buildbase;boolean;map)", "org.apache.maven.model.building.defaultmodelbuilder.setreportconfigurationexpander(reportconfigurationexpander)", "org.apache.maven.model.inheritance.defaultinheritanceassembler$inheritancemodelmerger.mergeplugin(plugin;plugin;boolean;map)", "org.apache.maven.model.modelbase.getreporting()", "org.apache.maven.model.build.build()", "org.apache.maven.model.building.modeldata.setgroupid(string)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_issuemanagement(model;model;boolean;map)", "org.apache.maven.model.profile.defaultprofileselector.getactiveprofiles(collection;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.interpolation.abstractstringbasedmodelinterpolator$1.abstractstringbasedmodelinterpolator$1(abstractstringbasedmodelinterpolator;boolean;file)", "org.apache.maven.model.merge.modelmerger.mergeplugin(plugin;plugin;boolean;map)", "org.apache.maven.model.model.getbuild()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$listfield.dointerpolate(object;interpolateobjectaction)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$cacheitem.access$000(cacheitem)", "org.apache.maven.model.reporting.getoutputdirectory()", "org.apache.maven.model.validation.defaultmodelvalidator.validate20effectiveplugindependencies(modelproblemcollector;plugin;modelbuildingrequest)", "org.apache.maven.model.model.setmodelversion(string)", "org.apache.maven.model.plugin.getversion()", "org.apache.maven.model.profile.setbuild(buildbase)", "org.apache.maven.model.merge.mavenmodelmerger.concatpath(string;string)", "org.apache.maven.model.building.defaultmodelbuilder.defaultmodelbuilder()", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;string;string)", "org.apache.maven.model.building.defaultmodelbuilder.setmodelvalidator(modelvalidator)", "org.apache.maven.model.profile.activation.fileprofileactivator.fileprofileactivator()", "org.apache.maven.model.merge.mavenmodelmerger.mergeplugin_executions(plugin;plugin;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergeconfigurationcontainer_configuration(configurationcontainer;configurationcontainer;boolean;map)", "org.apache.maven.model.composition.defaultdependencymanagementimporter.defaultdependencymanagementimporter()", "org.apache.maven.model.build.getoutputdirectory()", "org.apache.maven.model.mailinglist.getname()", "org.apache.maven.model.merge.mavenmodelmerger.mergebuildbase_filters(buildbase;buildbase;boolean;map)", "org.apache.maven.model.profile.defaultprofileactivationcontext.getactiveprofileids()", "org.apache.maven.model.merge.modelmerger.mergeplugin_version(plugin;plugin;boolean;map)", "org.apache.maven.model.activationproperty.clone()", "org.apache.maven.model.building.defaultmodelbuildingresult.seteffectivemodel(model)", "org.apache.maven.model.io.defaultmodelwriter.write(writer;map;model)", "org.apache.maven.model.io.defaultmodelreader.isstrict(map)", "org.apache.maven.model.io.xpp3.mavenxpp3reader.read(xmlpullparser;boolean)", "org.apache.maven.model.plugin.getexecutions()", "org.apache.maven.model.model.getpackaging()", "org.apache.maven.model.activationfile.getmissing()", "org.apache.maven.model.profile.defaultprofileactivationcontext.getuserproperties()", "org.apache.maven.model.building.defaultmodelbuildingrequest.getvalidationlevel()", "org.apache.maven.model.model.getprerequisites()", "org.apache.maven.model.repositorypolicy.setenabled(string)", "org.apache.maven.model.merge.modelmerger.mergereportplugin_version(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.merge.modelmerger.mergemodel_build(model;model;boolean;map)", "org.apache.maven.model.model.setcontributors(list)", "org.apache.maven.model.building.defaultmodelbuilder.setreportingconverter(reportingconverter)", "org.apache.maven.model.inheritance.defaultinheritanceassembler.defaultinheritanceassembler()", "org.apache.maven.model.merge.modelmerger.getresourcekey(resource)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getmodelbuildinglistener()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newprofileselector()", "org.apache.maven.model.merge.modelmerger.mergereporting(reporting;reporting;boolean;map)", "org.apache.maven.model.building.defaultmodelbuildingrequest.getactiveprofileids()", "org.apache.maven.model.building.defaultmodelbuilder.getprofileactivations(model;boolean)", "org.apache.maven.model.model.getprojectdirectory()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$listfield.stringsearchmodelinterpolator$interpolateobjectaction$listfield(field)", "org.apache.maven.model.building.defaultmodelbuilderfactory$stublifecyclebindingsinjector.injectlifecyclebindings(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.path.defaultmodelpathtranslator.defaultmodelpathtranslator()", "org.apache.maven.model.building.simpleproblemcollector.simpleproblemcollector()", "org.apache.maven.model.validation.defaultmodelvalidator.validateeffectivemodel(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.profile.getid()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.evaluatearray(object;interpolateobjectaction)", "org.apache.maven.model.building.defaultmodelbuilderfactory.defaultmodelbuilderfactory()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.interpolateobject(object;model;file;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.model.getcontributors()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction.stringsearchmodelinterpolator$interpolateobjectaction(object;list;list;stringsearchmodelinterpolator;modelproblemcollector)", "org.apache.maven.model.merge.mavenmodelmerger.mavenmodelmerger()", "org.apache.maven.model.building.defaultmodelproblemcollector.hasfatalerrors()", "org.apache.maven.model.merge.mavenmodelmerger.getpluginkey(plugin)", "org.apache.maven.model.building.defaultmodelbuilder.setlifecyclebindingsinjector(lifecyclebindingsinjector)", "org.apache.maven.model.building.defaultmodelbuilderfactory.newmodelinterpolator()", "org.apache.maven.model.activation.clone()", "org.apache.maven.model.merge.modelmerger.mergereportplugin_artifactid(reportplugin;reportplugin;boolean;map)", "org.apache.maven.model.merge.mavenmodelmerger.mergemodel_licenses(model;model;boolean;map)", "org.apache.maven.model.dependency.setgroupid(string)", "org.apache.maven.model.profile.activation.propertyprofileactivator.presentinconfig(profile;profileactivationcontext;modelproblemcollector)", "org.apache.maven.model.building.defaultmodelbuildingresult.defaultmodelbuildingresult()", "org.apache.maven.model.building.defaultmodelprocessor.defaultmodelprocessor()", "org.apache.maven.model.merge.mavenmodelmerger.appendpath(string;map)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator.stringsearchmodelinterpolator()", "org.apache.maven.model.building.filemodelsource.getinputstream()", "org.apache.maven.model.modelbase.getrepositories()", "org.apache.maven.model.interpolation.stringsearchmodelinterpolator$interpolateobjectaction$stringfield.stringsearchmodelinterpolator$interpolateobjectaction$stringfield(field)", "org.apache.maven.model.interpolation.stringsearchmodelinterpolatortest.stringsearchmodelinterpolatortest()", "org.apache.maven.model.buildbase.setdirectory(string)"]}, "mavenartifactrepository": {"distance": 0.9467, "methods": ["org.apache.maven.artifact.repository.mavenartifactrepository.getbasedir()", "org.apache.maven.artifact.repository.mavenartifactrepository.mavenartifactrepository(string;string;artifactrepositorylayout;artifactrepositorypolicy;artifactrepositorypolicy)", "org.apache.maven.artifact.repository.mavenartifactrepository.pathof(artifact)", "org.apache.maven.artifact.repository.mavenartifactrepository.getid()", "org.apache.maven.artifact.repository.mavenartifactrepository.getreleases()", "org.apache.maven.artifact.repository.mavenartifactrepository.getauthentication()", "org.apache.maven.artifact.repository.mavenartifactrepository.decode(string)", "org.apache.maven.artifact.repository.mavenartifactrepository.protocol(string)", "org.apache.maven.artifact.repository.mavenartifactrepository.pathoflocalrepositorymetadata(artifactmetadata;artifactrepository)", "org.apache.maven.artifact.repository.mavenartifactrepository.getsnapshots()", "org.apache.maven.artifact.repository.mavenartifactrepository.basedir(string)", "org.apache.maven.artifact.repository.mavenartifactrepository.getkey()", "org.apache.maven.artifact.repository.mavenartifactrepository.geturl()", "org.apache.maven.artifact.repository.mavenartifactrepository.getproxy()"]}, "defaultmodelurlnormalizer": {"distance": 1.0, "methods": ["org.apache.maven.model.path.defaultmodelurlnormalizer.defaultmodelurlnormalizer()", "org.apache.maven.model.path.defaultmodelurlnormalizer.seturlnormalizer(urlnormalizer)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(string)", "org.apache.maven.model.path.defaultmodelurlnormalizer.normalize(model;modelbuildingrequest)"]}, "versioning": {"distance": 0.9167, "methods": ["org.apache.maven.artifact.versioning.versionrange.getselectedversion(artifact)", "org.apache.maven.artifact.versioning.restriction.getlowerbound()", "org.apache.maven.artifact.versioning.versionrange.tostring()", "org.apache.maven.artifact.versioning.versionrange.versionrange(artifactversion;list)", "org.apache.maven.artifact.versioning.comparableversion$integeritem.isnull()", "org.apache.maven.artifact.versioning.comparableversion.tostring()", "org.apache.maven.artifact.versioning.comparableversion$integeritem.compareto(item)", "org.apache.maven.artifact.versioning.defaultartifactversion.compareto(object)", "org.apache.maven.artifact.versioning.versionrange.parserestriction(string)", "org.apache.maven.artifact.versioning.versionrange.restrict(versionrange)", "org.apache.maven.artifact.versioning.managedversionmap.managedversionmap(map)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.compareto(item)", "org.apache.maven.artifact.versioning.restriction.getupperbound()", "org.apache.maven.artifact.versioning.comparableversion.parseitem(boolean;string)", "org.apache.maven.artifact.versioning.comparableversion$listitem.comparableversion$listitem(1)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparablequalifier(string)", "org.apache.maven.artifact.versioning.versionrange.createfromversionspec(string)", "org.apache.maven.artifact.versioning.versionrange.getrecommendedversion()", "org.apache.maven.artifact.versioning.defaultartifactversion.defaultartifactversion(string)", "org.apache.maven.artifact.versioning.versionrange.containsversion(artifactversion)", "org.apache.maven.artifact.versioning.overconstrainedversionexception.overconstrainedversionexception(string;artifact;list)", "org.apache.maven.artifact.versioning.versionrange.intersection(list;list)", "org.apache.maven.artifact.versioning.comparableversion$listitem.normalize()", "org.apache.maven.artifact.versioning.comparableversion.parseversion(string)", "org.apache.maven.artifact.versioning.defaultartifactversion.parseversion(string)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.tostring()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.isnull()", "org.apache.maven.artifact.versioning.comparableversion$listitem.tostring()", "org.apache.maven.artifact.versioning.versionrange.createfromversion(string)", "org.apache.maven.artifact.versioning.comparableversion$listitem.comparableversion$listitem()", "org.apache.maven.artifact.versioning.defaultartifactversion.compareto(artifactversion)", "org.apache.maven.artifact.versioning.comparableversion.comparableversion(string)", "org.apache.maven.artifact.versioning.restriction.restriction(artifactversion;boolean;artifactversion;boolean)", "org.apache.maven.artifact.versioning.versionrange.matchversion(list)", "org.apache.maven.artifact.versioning.versionrange.isselectedversionknown(artifact)", "org.apache.maven.artifact.versioning.comparableversion$integeritem.comparableversion$integeritem(string)", "org.apache.maven.artifact.versioning.comparableversion$listitem.gettype()", "org.apache.maven.artifact.versioning.restriction.containsversion(artifactversion)", "org.apache.maven.artifact.versioning.comparableversion.compareto(comparableversion)", "org.apache.maven.artifact.versioning.comparableversion$integeritem.gettype()", "org.apache.maven.artifact.versioning.restriction.isupperboundinclusive()", "org.apache.maven.artifact.versioning.restriction.islowerboundinclusive()", "org.apache.maven.artifact.versioning.comparableversion$stringitem.comparableversion$stringitem(string;boolean)", "org.apache.maven.artifact.versioning.restriction.tostring()", "org.apache.maven.artifact.versioning.comparableversion$integeritem.tostring()", "org.apache.maven.artifact.versioning.defaultartifactversion.tostring()", "org.apache.maven.artifact.versioning.comparableversion$listitem.compareto(item)", "org.apache.maven.artifact.versioning.defaultartifactversion.getnextintegertoken(stringtokenizer)", "org.apache.maven.artifact.versioning.comparableversion$stringitem.<clinit>()"]}, "plugin": {"distance": 0.9383, "methods": ["org.apache.maven.model.plugin.getextensions()", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.defaultreportconfigurationexpander()", "org.apache.maven.plugin.internal.defaultlegacysupport.<clinit>()", "org.apache.maven.model.plugin.getdependencies()", "org.apache.maven.model.plugin.setexecutions(list)", "org.apache.maven.plugin.internal.defaultlegacysupport.defaultlegacysupport()", "org.apache.maven.plugin.pluginparameterexceptiontest.pluginparameterexceptiontest()", "org.apache.maven.model.plugin.constructkey(string;string)", "org.apache.maven.plugin.internal.defaultlegacysupport.getsession()", "org.apache.maven.model.plugin.getgroupid()", "org.apache.maven.model.plugin.plugin()", "org.apache.maven.model.plugin.setversion(string)", "org.apache.maven.plugin.internal.defaultlegacysupporttest.defaultlegacysupporttest()", "org.apache.maven.plugin.internal.defaultlegacysupport.setsession(mavensession)", "org.apache.maven.model.plugin.getartifactid()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expand(list)", "org.apache.maven.model.plugin.getkey()", "org.apache.maven.model.plugin.defaultreportconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)", "org.apache.maven.model.plugin.setartifactid(string)", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.defaultpluginconfigurationexpander()", "org.apache.maven.model.plugin.clone()", "org.apache.maven.model.plugin.getgoals()", "org.apache.maven.model.plugin.setgroupid(string)", "org.apache.maven.plugin.pluginmanagertest.pluginmanagertest()", "org.apache.maven.model.plugin.getversion()", "org.apache.maven.model.plugin.getexecutions()", "org.apache.maven.model.plugin.defaultpluginconfigurationexpander.expandpluginconfiguration(model;modelbuildingrequest;modelproblemcollector)"]}}