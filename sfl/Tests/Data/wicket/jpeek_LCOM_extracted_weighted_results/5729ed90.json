{"apachelicenseheadertestcase": {"distance": 1.2308, "methods": ["org.apache.wicket.util.license.apachelicenseheadertestcase.<clinit>()", "org.apache.wicket.util.license.apachelicenseheadertestcase.apachelicenseheadertestcase()"]}, "abstracttime": {"distance": 1.0833, "methods": ["org.apache.wicket.util.time.abstracttime.<clinit>()", "org.apache.wicket.util.time.abstracttime.totimestring(calendar)", "org.apache.wicket.util.time.abstracttime.abstracttime(long)", "org.apache.wicket.util.time.abstracttime.totimestring()", "org.apache.wicket.util.time.abstracttime.before(abstracttimevalue)", "org.apache.wicket.util.time.abstracttime.after(abstracttimevalue)"]}, "duration": {"distance": 1.1111, "methods": ["org.apache.wicket.util.time.duration.minutes(double)", "org.apache.wicket.util.time.duration.valueof(string)", "org.apache.wicket.util.time.duration.unitstring(double;string;locale)", "org.apache.wicket.util.time.duration.valueof(string;locale)", "org.apache.wicket.util.time.duration.tostring(locale)", "org.apache.wicket.util.time.duration.seconds(int)", "org.apache.wicket.util.time.duration.seconds(double)", "org.apache.wicket.util.time.duration.days(double)", "org.apache.wicket.util.time.duration.duration(long)", "org.apache.wicket.util.time.duration.hours()", "org.apache.wicket.util.time.duration.days(int)", "org.apache.wicket.util.time.duration.days()", "org.apache.wicket.util.time.duration.sleep()", "org.apache.wicket.util.time.duration.add(duration)", "org.apache.wicket.util.time.duration.valueof(long)", "org.apache.wicket.util.time.duration.seconds()", "org.apache.wicket.util.time.duration.milliseconds(long)", "org.apache.wicket.util.time.duration.hours(int)", "org.apache.wicket.util.time.duration.<clinit>()", "org.apache.wicket.util.time.duration.hours(double)", "org.apache.wicket.util.time.duration.milliseconds(double)", "org.apache.wicket.util.time.duration.subtract(duration)", "org.apache.wicket.util.time.duration.minutes()", "org.apache.wicket.util.time.duration.minutes(int)", "org.apache.wicket.util.time.duration.tostring()", "org.apache.wicket.util.time.duration.benchmark(runnable)"]}, "timemap": {"distance": 1.0, "methods": ["org.apache.wicket.util.time.timemap.put(itimeframesource;object)", "org.apache.wicket.util.time.timemap.timemap()", "org.apache.wicket.util.time.timemap.get(time)"]}, "timeofday": {"distance": 1.2, "methods": ["org.apache.wicket.util.time.timeofday.valueof(time)", "org.apache.wicket.util.time.timeofday.valueof(calendar;time)", "org.apache.wicket.util.time.timeofday.tohours(long)", "org.apache.wicket.util.time.timeofday.valueof(duration)", "org.apache.wicket.util.time.timeofday.valueof(calendar;string)", "org.apache.wicket.util.time.timeofday.timeofday(long)", "org.apache.wicket.util.time.timeofday.hour()", "org.apache.wicket.util.time.timeofday.time(int;int;meridian)", "org.apache.wicket.util.time.timeofday.next(calendar)", "org.apache.wicket.util.time.timeofday.next()", "org.apache.wicket.util.time.timeofday.<clinit>()", "org.apache.wicket.util.time.timeofday.toseconds(long)", "org.apache.wicket.util.time.timeofday.tominutes(long)", "org.apache.wicket.util.time.timeofday.militarytime(int;int;int)", "org.apache.wicket.util.time.timeofday.time(int;int;int;meridian)"]}, "time": {"distance": 1.0312, "methods": ["org.apache.wicket.util.time.time.valueof(calendar;timeofday)", "org.apache.wicket.util.time.time.parsedate(string)", "org.apache.wicket.util.time.duration.minutes(double)", "org.apache.wicket.util.time.timeframe.equals(object)", "org.apache.wicket.util.time.timemap.put(itimeframesource;object)", "org.apache.wicket.util.time.time.getminute(calendar)", "org.apache.wicket.util.time.time.milliseconds(long)", "org.apache.wicket.util.time.timeframetest.timeframetest()", "org.apache.wicket.util.time.timeofday.valueof(time)", "org.apache.wicket.util.time.timeofday.valueof(calendar;time)", "org.apache.wicket.util.time.time.getdayofmonth(calendar)", "org.apache.wicket.util.time.time.tostring()", "org.apache.wicket.util.time.duration.valueof(string)", "org.apache.wicket.util.time.duration.unitstring(double;string;locale)", "org.apache.wicket.util.time.abstracttime.<clinit>()", "org.apache.wicket.util.time.durationtest$2.run()", "org.apache.wicket.util.time.time.getdayofmonth()", "org.apache.wicket.util.time.duration.valueof(string;locale)", "org.apache.wicket.util.time.time.getyear(calendar)", "org.apache.wicket.util.time.time.add(duration)", "org.apache.wicket.util.time.timeframe$1.timeframe$1(timeofday;timeofday)", "org.apache.wicket.util.time.abstracttimevalue.getmilliseconds()", "org.apache.wicket.util.time.duration.tostring(locale)", "org.apache.wicket.util.time.timeframe.timeframe(time;time)", "org.apache.wicket.util.time.duration.seconds(int)", "org.apache.wicket.util.time.time.valueof(date)", "org.apache.wicket.util.time.duration.seconds(double)", "org.apache.wicket.util.time.timeframe.timeframe(time;time;1)", "org.apache.wicket.util.time.timemap.timemap()", "org.apache.wicket.util.time.duration.days(double)", "org.apache.wicket.util.time.time.valueof(calendar;string)", "org.apache.wicket.util.time.time.fromnow()", "org.apache.wicket.util.time.duration.duration(long)", "org.apache.wicket.util.time.timeofday.tohours(long)", "org.apache.wicket.util.time.timeofday.valueof(duration)", "org.apache.wicket.util.time.time.now()", "org.apache.wicket.util.time.duration.hours()", "org.apache.wicket.util.time.time.valueof(string)", "org.apache.wicket.util.time.abstracttimevalue.abstracttimevalue(long)", "org.apache.wicket.util.time.time.time(long)", "org.apache.wicket.util.time.timeframe.valueof(time;time)", "org.apache.wicket.util.time.timeofday.valueof(calendar;string)", "org.apache.wicket.util.time.time.valueof(long)", "org.apache.wicket.util.time.timemap.get(time)", "org.apache.wicket.util.time.time.todate()", "org.apache.wicket.util.time.abstracttime.totimestring(calendar)", "org.apache.wicket.util.time.duration.days(int)", "org.apache.wicket.util.time.timeframe$1.gettimeframe()", "org.apache.wicket.util.time.timeofday.timeofday(long)", "org.apache.wicket.util.time.time.getyear()", "org.apache.wicket.util.time.time.get(calendar;int)", "org.apache.wicket.util.time.durationtest$1.durationtest$1(durationtest)", "org.apache.wicket.util.time.time.todatestring(calendar)", "org.apache.wicket.util.time.duration.days()", "org.apache.wicket.util.time.timeofday.hour()", "org.apache.wicket.util.time.abstracttime.abstracttime(long)", "org.apache.wicket.util.time.time.subtract(time)", "org.apache.wicket.util.time.durationtest$1.run()", "org.apache.wicket.util.time.durationtest$2.durationtest$2(durationtest)", "org.apache.wicket.util.time.timeframe.gettimeframe()", "org.apache.wicket.util.time.time.getmonth()", "org.apache.wicket.util.time.timeframe.overlaps(timeframe)", "org.apache.wicket.util.time.duration.sleep()", "org.apache.wicket.util.time.time.getsecond(calendar)", "org.apache.wicket.util.time.timeofdaytest.timeofdaytest()", "org.apache.wicket.util.time.timeframe.check(abstracttimevalue;abstracttimevalue)", "org.apache.wicket.util.time.durationtest.durationtest()", "org.apache.wicket.util.time.timeframe.valueof(time;duration)", "org.apache.wicket.util.time.abstracttime.totimestring()", "org.apache.wicket.util.time.time.valueof(timeofday)", "org.apache.wicket.util.time.timetest.timetest()", "org.apache.wicket.util.time.duration.add(duration)", "org.apache.wicket.util.time.timeofday.time(int;int;meridian)", "org.apache.wicket.util.time.timeframe.eachday(timeofday;timeofday)", "org.apache.wicket.util.time.duration.valueof(long)", "org.apache.wicket.util.time.time.parsedate(calendar;string)", "org.apache.wicket.util.time.timeofday.next(calendar)", "org.apache.wicket.util.time.time.<clinit>()", "org.apache.wicket.util.time.duration.seconds()", "org.apache.wicket.util.time.timeofday.next()", "org.apache.wicket.util.time.timeofday.<clinit>()", "org.apache.wicket.util.time.timeofday.toseconds(long)", "org.apache.wicket.util.time.timeofday.tominutes(long)", "org.apache.wicket.util.time.time.todatestring()", "org.apache.wicket.util.time.duration.milliseconds(long)", "org.apache.wicket.util.time.duration.hours(int)", "org.apache.wicket.util.time.timeframe.getstart()", "org.apache.wicket.util.time.duration.<clinit>()", "org.apache.wicket.util.time.duration.hours(double)", "org.apache.wicket.util.time.abstracttime.before(abstracttimevalue)", "org.apache.wicket.util.time.duration.milliseconds(double)", "org.apache.wicket.util.time.duration.subtract(duration)", "org.apache.wicket.util.time.duration.minutes()", "org.apache.wicket.util.time.abstracttime.after(abstracttimevalue)", "org.apache.wicket.util.time.timemaptest.timemaptest()", "org.apache.wicket.util.time.timeofday.militarytime(int;int;int)", "org.apache.wicket.util.time.timeframe.contains(time)", "org.apache.wicket.util.time.duration.minutes(int)", "org.apache.wicket.util.time.time.elapsedsince()", "org.apache.wicket.util.time.time.gethour(calendar)", "org.apache.wicket.util.time.duration.tostring()", "org.apache.wicket.util.time.time.getmonth(calendar)", "org.apache.wicket.util.time.duration.benchmark(runnable)", "org.apache.wicket.util.time.timeofday.time(int;int;int;meridian)", "org.apache.wicket.util.time.timeofday$meridian.timeofday$meridian(string)", "org.apache.wicket.util.time.timeframe.hashcode()", "org.apache.wicket.util.time.timeframe.getend()"]}, "arrayliststack": {"distance": 1.25, "methods": ["org.apache.wicket.util.collections.arrayliststack.pop()", "org.apache.wicket.util.collections.arrayliststack.peek()", "org.apache.wicket.util.collections.arrayliststack.push(object)", "org.apache.wicket.util.collections.arrayliststack.arrayliststack()", "org.apache.wicket.util.collections.arrayliststack.arrayliststack(int)"]}, "minimap": {"distance": 0.8333, "methods": ["org.apache.wicket.util.collections.minimap.minimap(int)", "org.apache.wicket.util.collections.minimap.get(object)", "org.apache.wicket.util.collections.minimap.nextindex(int)", "org.apache.wicket.util.collections.minimap.nextnullkey(int)", "org.apache.wicket.util.collections.minimap.put(object;object)", "org.apache.wicket.util.collections.minimap.findkey(object)", "org.apache.wicket.util.collections.minimap.findkey(int;object)"]}, "classmetacache": {"distance": 2.0, "methods": ["org.apache.wicket.util.collections.classmetacache.put(class;object)", "org.apache.wicket.util.collections.classmetacache.key(class)", "org.apache.wicket.util.collections.classmetacache.classmetacache()", "org.apache.wicket.util.collections.classmetacache.getclassloadercache(classloader;boolean)", "org.apache.wicket.util.collections.classmetacache.get(class)"]}, "micromap": {"distance": 0.8542, "methods": ["org.apache.wicket.util.collections.micromap.values()", "org.apache.wicket.util.collections.micromap.put(object;object)", "org.apache.wicket.util.collections.micromap.size()", "org.apache.wicket.util.collections.micromap.micromap(object;object)", "org.apache.wicket.util.collections.micromap.keyset()", "org.apache.wicket.util.collections.micromap.get(object)", "org.apache.wicket.util.collections.micromap.access$000(micromap)", "org.apache.wicket.util.collections.micromap.micromap()", "org.apache.wicket.util.collections.micromap.entryset()", "org.apache.wicket.util.collections.micromap.access$100(micromap)"]}, "metadatakey": {"distance": 1.25, "methods": ["org.apache.wicket.metadatakey.get(metadataentry[])", "org.apache.wicket.metadatakey.set(metadataentry[];object)", "org.apache.wicket.metadatakey.equals(object)", "org.apache.wicket.metadatakey.metadatakey()"]}, "session": {"distance": 0.9868, "methods": ["org.apache.wicket.session.getid()", "org.apache.wicket.session.getsessionstore()", "org.apache.wicket.session.exists()", "org.apache.wicket.session.istemporary()", "org.apache.wicket.session.defaultpagefactory.processpage(page;pageparameters)", "org.apache.wicket.session.<clinit>()", "org.apache.wicket.session.defaultpagefactory.newpage(constructor;object)", "org.apache.wicket.session.defaultpagefactorytest.defaultpagefactorytest(string)", "org.apache.wicket.session.setlocale(locale)", "org.apache.wicket.session.nextsequencevalue()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$2.defaultpagefactorytest$abortandrespondpage3$2(abortandrespondpage3;irequesthandler)", "org.apache.wicket.session.invalidatenow()", "org.apache.wicket.session.dirty()", "org.apache.wicket.session.getauthorizationstrategy()", "org.apache.wicket.session.setstyle(string)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1$1.defaultpagefactorytest$abortandrespondpage1$1(abortandrespondpage1;irequesthandler)", "org.apache.wicket.session.defaultpagefactory.defaultpagefactory()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2$1.defaultpagefactorytest$abortandrespondpage2$1(abortandrespondpage2;irequesthandler)", "org.apache.wicket.session.getapplication()", "org.apache.wicket.session.onevent(ievent)", "org.apache.wicket.session.getlocale()", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.<clinit>()", "org.apache.wicket.session.getpagemanager()", "org.apache.wicket.session.defaultpagefactory.newpage(class)", "org.apache.wicket.session.session(request)", "org.apache.wicket.session.defaultpagefactory.createdescription(constructor;object)", "org.apache.wicket.session.detach()", "org.apache.wicket.session.get()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3()", "org.apache.wicket.session.getfeedbackmessages()", "org.apache.wicket.session.setmetadata(metadatakey;serializable)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage2.defaultpagefactorytest$abortandrespondpage2(pageparameters)", "org.apache.wicket.session.getmetadata(metadatakey)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3$1.defaultpagefactorytest$abortandrespondpage3$1(abortandrespondpage3;irequesthandler)", "org.apache.wicket.session.access$000(session)", "org.apache.wicket.session.invalidate()", "org.apache.wicket.session.bind()", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage3.defaultpagefactorytest$abortandrespondpage3(pageparameters)", "org.apache.wicket.session.defaultpagefactorytest$abortandrespondpage1.defaultpagefactorytest$abortandrespondpage1()", "org.apache.wicket.session.getclassresolver()", "org.apache.wicket.session.getstyle()", "org.apache.wicket.session.destroy()", "org.apache.wicket.session.defaultpagefactory.newpage(class;pageparameters)", "org.apache.wicket.session.defaultpagefactory.constructor(class;class)", "org.apache.wicket.session.defaultpagefactorytest$pagethrowingcheckedexception.defaultpagefactorytest$pagethrowingcheckedexception()", "org.apache.wicket.session.nextpageid()"]}, "requestcycle": {"distance": 0.9946, "methods": ["org.apache.wicket.request.cycle.requestcycle.setrequest(request)", "org.apache.wicket.request.cycle.requestcycle.onevent(ievent)", "org.apache.wicket.request.cycle.requestcycle.getexceptionretrycount()", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.urlfor(class;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.requestcycle(requestcyclecontext)", "org.apache.wicket.request.cycle.requestcycle.getrequestcycle()", "org.apache.wicket.request.cycle.requestcycle.<clinit>()", "org.apache.wicket.request.cycle.requestcycle.set(requestcycle)", "org.apache.wicket.request.cycle.requestcycle.handleexception(exception)", "org.apache.wicket.request.cycle.requestcycle.setresponsepage(irequestablepage)", "org.apache.wicket.request.cycle.requestcycle.get()", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(class;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.request.cycle.requestcycle.detach()", "org.apache.wicket.request.cycle.requestcycle.urlfor(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.newurlrenderer()", "org.apache.wicket.request.cycle.requestcycle.processrequest()", "org.apache.wicket.request.cycle.requestcycle.renderurl(url)", "org.apache.wicket.request.cycle.requestcycle.setresponsepage(class)", "org.apache.wicket.request.cycle.requestcycle.setcleanupfeedbackmessagesondetach(boolean)", "org.apache.wicket.request.cycle.requestcycle.resolverequesthandler()", "org.apache.wicket.request.cycle.requestcycle.onbeginrequest()", "org.apache.wicket.request.cycle.requestcycle.getlisteners()", "org.apache.wicket.request.cycle.requestcycle.getoriginalresponse()", "org.apache.wicket.request.cycle.requestcycle.getrequest()", "org.apache.wicket.request.cycle.requestcycle.geturlrenderer()", "org.apache.wicket.request.cycle.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.request.cycle.requestcycle.setresponsepage(class;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.onendrequest()", "org.apache.wicket.request.cycle.requestcycle.executeexceptionrequesthandler(irequesthandler;int)", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(resourcereference;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.processrequestanddetach()"]}, "application": {"distance": 0.9936, "methods": ["org.apache.wicket.application.componentinitializationlistenercollection.oninitialize(component)", "org.apache.wicket.application.componentinitializationlistenercollection$1.componentinitializationlistenercollection$1(componentinitializationlistenercollection;component)", "org.apache.wicket.application.getrootrequestmapperascompound()", "org.apache.wicket.application.componentonafterrenderlistenercollection.onafterrender(component)", "org.apache.wicket.application.setname(string)", "org.apache.wicket.application.onevent(ievent)", "org.apache.wicket.application.getcomponentinstantiationlisteners()", "org.apache.wicket.application.getcomponentinitializationlisteners()", "org.apache.wicket.application.callinitializers()", "org.apache.wicket.application.getrootrequestmapper()", "org.apache.wicket.application.getdebugsettings()", "org.apache.wicket.application.getpagemanagerprovider()", "org.apache.wicket.application.newexceptionmapper()", "org.apache.wicket.application.componentinitializationlistenercollection.componentinitializationlistenercollection()", "org.apache.wicket.application.getpagemanager()", "org.apache.wicket.application.componentonafterrenderlistenercollection$1.notify(object)", "org.apache.wicket.application.load(properties)", "org.apache.wicket.application.<clinit>()", "org.apache.wicket.application.setmetadata(metadatakey;object)", "org.apache.wicket.application.getsessionstore()", "org.apache.wicket.application.calldestroyers()", "org.apache.wicket.application.internalinit()", "org.apache.wicket.application.getrequestloggersettings()", "org.apache.wicket.application.getpagemanagercontext()", "org.apache.wicket.application.initializecomponents()", "org.apache.wicket.application.decorateheaderresponse(iheaderresponse)", "org.apache.wicket.application.checksettingsavailable()", "org.apache.wicket.application.setrootrequestmapper(irequestmapper)", "org.apache.wicket.application.componentonafterrenderlistenercollection$1.notify(icomponentonafterrenderlistener)", "org.apache.wicket.application.getpagerendererprovider()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.notify(icomponentonbeforerenderlistener)", "org.apache.wicket.application.componentinstantiationlistenercollection$1.notify(object)", "org.apache.wicket.application.getmimetype(string)", "org.apache.wicket.application.createrequestcycle(request;response)", "org.apache.wicket.application.setpagemanagerprovider(ipagemanagerprovider)", "org.apache.wicket.application.getrequestcyclelisteners()", "org.apache.wicket.application.validateinit()", "org.apache.wicket.application.componentonafterrenderlistenercollection$1.componentonafterrenderlistenercollection$1(componentonafterrenderlistenercollection;component)", "org.apache.wicket.application.getpagefactory()", "org.apache.wicket.application.setrequestcycleprovider(irequestcycleprovider)", "org.apache.wicket.application.setpagerendererprovider(ipagerendererprovider)", "org.apache.wicket.application.getcomponentonafterrenderlisteners()", "org.apache.wicket.application.init()", "org.apache.wicket.application.getsecuritysettings()", "org.apache.wicket.application.exists()", "org.apache.wicket.application.defaultclassresolver.defaultclassresolver()", "org.apache.wicket.application.getexceptionsettings()", "org.apache.wicket.application.get()", "org.apache.wicket.application.getencodercontext()", "org.apache.wicket.application.usesdevelopmentconfig()", "org.apache.wicket.application.componentinstantiationlistenercollection$1.notify(icomponentinstantiationlistener)", "org.apache.wicket.application.getresourcereferenceregistry()", "org.apache.wicket.application.fetchcreateandsetsession(requestcycle)", "org.apache.wicket.application.internaldestroy()", "org.apache.wicket.application.defaultclassresolver.getresources(string)", "org.apache.wicket.application.componentonafterrenderlistenercollection.componentonafterrenderlistenercollection()", "org.apache.wicket.application.getapplicationsettings()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.notify(object)", "org.apache.wicket.application.getframeworksettings()", "org.apache.wicket.application.getcomponentpostonbeforerenderlisteners()", "org.apache.wicket.application.getrequestcycleprovider()", "org.apache.wicket.application.getname()", "org.apache.wicket.application.getmarkupsettings()", "org.apache.wicket.application.componentonbeforerenderlistenercollection.componentonbeforerenderlistenercollection()", "org.apache.wicket.application.newsharedresources(resourcereferenceregistry)", "org.apache.wicket.application.getrequestlogger()", "org.apache.wicket.application.application()", "org.apache.wicket.application.componentinstantiationlistenercollection.oninstantiation(component)", "org.apache.wicket.application.newconverterlocator()", "org.apache.wicket.application.componentinitializationlistenercollection$1.notify(object)", "org.apache.wicket.application.setsessionstoreprovider(iprovider)", "org.apache.wicket.application.getconverterlocator()", "org.apache.wicket.application.componentinitializationlistenercollection$1.notify(icomponentinitializationlistener)", "org.apache.wicket.application.configure()", "org.apache.wicket.application.sessionunbound(string)", "org.apache.wicket.application.getsessionstoreprovider()", "org.apache.wicket.application.getsharedresources()", "org.apache.wicket.application.componentinstantiationlistenercollection$1.componentinstantiationlistenercollection$1(componentinstantiationlistenercollection;component)", "org.apache.wicket.application.componentonbeforerenderlistenercollection.onbeforerender(component)", "org.apache.wicket.application.usesdeploymentconfig()", "org.apache.wicket.application.componentonbeforerenderlistenercollection$1.componentonbeforerenderlistenercollection$1(componentonbeforerenderlistenercollection;component)", "org.apache.wicket.application.getpagesettings()", "org.apache.wicket.application.defaultclassresolver.resolveclass(string)", "org.apache.wicket.application.addinitializer(string)", "org.apache.wicket.application.newresourcereferenceregistry()", "org.apache.wicket.application.getcomponentpreonbeforerenderlisteners()", "org.apache.wicket.application.initapplication()", "org.apache.wicket.application.getresourcesettings()", "org.apache.wicket.application.defaultclassresolver.loadresources(enumeration;set)", "org.apache.wicket.application.ondestroy()", "org.apache.wicket.application.componentinstantiationlistenercollection.componentinstantiationlistenercollection()", "org.apache.wicket.application.newpagefactory()", "org.apache.wicket.application.getrequestcyclesettings()", "org.apache.wicket.application.getmetadata(metadatakey)"]}, "request": {"distance": 0.9375, "methods": ["org.apache.wicket.request.mapper.basicresourcereferencemapper.istimestampsenabled()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.resourcestreamrequesthandler(iresourcestream)", "org.apache.wicket.request.url.url(list;list)", "org.apache.wicket.request.resource.javascriptresourcereference.javascriptresourcereference(class;string)", "org.apache.wicket.request.mapper.bookmarkablemapper.buildurl(urlinfo)", "org.apache.wicket.request.mapper.packagemappertest.packagemappertest()", "org.apache.wicket.request.cycle.requestcyclelistenercollection$4.requestcyclelistenercollection$4(requestcyclelistenercollection;requestcycle)", "org.apache.wicket.request.flow.resetresponseexception.resetresponseexception(irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenertest$3.map(exception)", "org.apache.wicket.request.mapper.testmappercontext.getnamespace()", "org.apache.wicket.request.handler.bufferedresponserequesthandler.respond(irequestcycle)", "org.apache.wicket.request.handler.render.webpagerenderer.<clinit>()", "org.apache.wicket.request.cycle.requestcyclelistenercollection$2.notify(irequestcyclelistener)", "org.apache.wicket.request.http.handler.errorcoderequesthandler.errorcoderequesthandler(int)", "org.apache.wicket.request.cycle.requestcyclelistenertest$4.ondetach(requestcycle)", "org.apache.wicket.request.urlrenderer.getbaseurl()", "org.apache.wicket.request.urlencoder.urlencoder(type;char)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$resourcereferencewithtimestamp.abstractresourcereferencemappertest$resourcereferencewithtimestamp(abstractresourcereferencemappertest;time)", "org.apache.wicket.request.mapper.bookmarkablemapper.pagemusthavebeencreatedbookmarkable()", "org.apache.wicket.request.mapper.mountedmapper.pagemusthavebeencreatedbookmarkable()", "org.apache.wicket.request.mapper.mountedmapper.mountedmapper(string;class)", "org.apache.wicket.request.resource.abstractresource$writecallback.abstractresource$writecallback()", "org.apache.wicket.request.mapper.compoundrequestmapper$encoderwithsegmentscount.compareto(encoderwithsegmentscount)", "org.apache.wicket.request.parameter.combinedrequestparametersadapter.combinedrequestparametersadapter(irequestparameters[])", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$testcryptfactory$1.decrypturlsafe(string)", "org.apache.wicket.request.cycle.requestcyclecontext.getrequestmapper()", "org.apache.wicket.request.mapper.basicresourcereferencemapper.resolveclass(string)", "org.apache.wicket.request.cycle.requesthandlerstacktest$10.requesthandlerstacktest$10(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.handler.pageprovider.getpageparameters()", "org.apache.wicket.request.urlrenderer.rendercontextpathrelativeurl(string;request)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$4.notify(irequestcyclelistener)", "org.apache.wicket.request.handler.bufferedresponserequesthandler.bufferedresponserequesthandler(bufferedwebresponse)", "org.apache.wicket.request.mapper.pageinstancemapper.getcompatibilityscore(request)", "org.apache.wicket.request.handler.render.webpagerenderer.renderpage(url;requestcycle)", "org.apache.wicket.request.resource.packageresource$1.writedata(attributes)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper$urlinfo.getpageparameters()", "org.apache.wicket.request.cycle.requestcycle.setrequest(request)", "org.apache.wicket.request.mapper.homepagemappertest$1.getcontext()", "org.apache.wicket.request.handler.render.webpagerenderer.storebufferedresponse(url;bufferedwebresponse)", "org.apache.wicket.request.mapper.testmappercontext$1.testmappercontext$1(testmappercontext)", "org.apache.wicket.request.cycle.requestcyclecontext.getrequest()", "org.apache.wicket.request.resource.resourcereferenceregistry.setautoaddedcapacity(int)", "org.apache.wicket.request.handler.pageprovider.getpageclass()", "org.apache.wicket.protocol.http.request.webexternalresourcerequesthandler.detach(irequestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.init()", "org.apache.wicket.request.mapper.info.pagecomponentinfotest.testpageinfoonly(pagecomponentinfo;integer)", "org.apache.wicket.request.url.decodeparameter(string;charset)", "org.apache.wicket.request.resource.sharedresourcereference.sharedresourcereference(string)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.requestcyclelistenercollection()", "org.apache.wicket.request.url.parsequeryparameter(string;charset)", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$702(requesthandlerstacktest;boolean)", "org.apache.wicket.request.http.webresponse.enablecaching(duration;cachescope)", "org.apache.wicket.request.resource.iresource$attributes.getparameters()", "org.apache.wicket.request.resource.resourcereferenceregistry.getautoaddedcapacity()", "org.apache.wicket.request.resource.resourcereference.canberegistered()", "org.apache.wicket.request.cycle.requesthandlerstacktest$5.requesthandlerstacktest$5(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.parameter.urlrequestparametersadapter.getparametervalue(string)", "org.apache.wicket.request.cycle.requestcyclelistenertest.teardown()", "org.apache.wicket.request.mapper.resourcemapper.maphandler(irequesthandler)", "org.apache.wicket.request.cycle.requestcycle.onevent(ievent)", "org.apache.wicket.request.mapper.cryptomapper.getcompatibilityscore(request)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.getcompatibilityscore(request)", "org.apache.wicket.request.mapper.parameter.pageparameters$namedpair.pageparameters$namedpair(string;string;1)", "org.apache.wicket.request.requesthandlerstack$replacehandlerexception.access$100(replacehandlerexception)", "org.apache.wicket.request.mapper.pageinstancemappertest$1.pageinstancemappertest$1(pageinstancemappertest)", "org.apache.wicket.request.cycle.requestcycle.getexceptionretrycount()", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(irequesthandler)", "org.apache.wicket.request.cycle.requesthandlerstacktest$2.requesthandlerstacktest$2(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$102(requesthandlerstacktest;boolean)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.processlistener(pagecomponentinfo;class;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.urlfor(class;pageparameters)", "org.apache.wicket.request.url$queryparameter.url$queryparameter(string;string)", "org.apache.wicket.request.mapper.pageinstancemappertest$1.getcontext()", "org.apache.wicket.request.cycle.requestcyclelistenertest.newrequestcycle(boolean)", "org.apache.wicket.request.mapper.packagemappertest$1.getcontext()", "org.apache.wicket.request.http.webresponse$cachescope.<clinit>()", "org.apache.wicket.request.resource.resourcereference.getstyle()", "org.apache.wicket.request.mapper.info.componentinfo.encodecomponentpath(string)", "org.apache.wicket.request.url$queryparameter.tostring(charset)", "org.apache.wicket.request.mapper.parameter.pageparameters$namedpair.pageparameters$namedpair(string;string)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.resourcereferencerequesthandler(resourcereference)", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.respond(irequestcycle)", "org.apache.wicket.request.http.flow.abortwithhttperrorcodeexception.abortwithhttperrorcodeexception(int;string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.cryptedurlwebrequestcodingstrategytest()", "org.apache.wicket.request.mapper.bufferedresponsemapper.maprequest(request)", "org.apache.wicket.request.cycle.requesthandlerstacktest$7.requesthandlerstacktest$7(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.resource.packageresource$1.packageresource$1(packageresource;byte[])", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$testcryptfactory$1.cryptedurlwebrequestcodingstrategytest$testcryptfactory$1(testcryptfactory)", "org.apache.wicket.request.mapper.homepagemapper.homepagemapper(ipageparametersencoder)", "org.apache.wicket.request.mapper.testmappercontext.getresourceidentifier()", "org.apache.wicket.request.url.url(charset)", "org.apache.wicket.request.cycle.requestcyclecontext.setrequestmapper(irequestmapper)", "org.apache.wicket.request.cycle.requesthandlerstacktest$1.requesthandlerstacktest$1(requesthandlerstacktest)", "org.apache.wicket.request.resource.resourcereferenceregistry.adddefaultresourcereference(key)", "org.apache.wicket.request.mapper.pageinstancemapper.maprequest(request)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcontenttype(string)", "org.apache.wicket.request.resource.resourcereferenceregistry.<clinit>()", "org.apache.wicket.request.mapper.parentpathreferencerewriter.parentpathreferencerewriter(irequestmapper;iprovider)", "org.apache.wicket.request.urlrenderer.renderurl(url)", "org.apache.wicket.request.cycle.baserequesthandlerstacktest.newresponse()", "org.apache.wicket.request.handler.render.pagerenderer.getredirectpolicy()", "org.apache.wicket.request.mapper.parameter.pageparameters.add(string;object;int)", "org.apache.wicket.request.mapper.parameter.pageparameters$entry.access$002(entry;string)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$9.getresource()", "org.apache.wicket.request.handler.renderpagerequesthandler$redirectpolicy.renderpagerequesthandler$redirectpolicy(string;int)", "org.apache.wicket.request.mapper.parameter.pageparameters.overwritewith(pageparameters)", "org.apache.wicket.request.cycle.requestcycle.requestcycle(requestcyclecontext)", "org.apache.wicket.request.mapper.parameter.pageparameters.pageparameters()", "org.apache.wicket.request.mapper.abstractmappertest$1.abstractmappertest$1(abstractmappertest;url)", "org.apache.wicket.request.mapper.parameter.pageparameters$namedpair.getvalue()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest.setup()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getfilename()", "org.apache.wicket.request.cycle.requestcycle.getrequestcycle()", "org.apache.wicket.request.http.handler.errorcoderequesthandler.respond(irequestcycle)", "org.apache.wicket.request.resource.resourcereference$key.equals(object)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.getclassname(class)", "org.apache.wicket.request.handler.renderpagerequesthandler.getpageclass()", "org.apache.wicket.request.requesthandlerstack.replaceallrequesthandlers(irequesthandler)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest.setup()", "org.apache.wicket.request.mapper.parentpathreferencerewriter.maphandler(irequesthandler)", "org.apache.wicket.request.http.webrequest.isajax()", "org.apache.wicket.request.http.webresponse.setlastmodifiedtime(long)", "org.apache.wicket.request.handler.pageprovider.getpagesource()", "org.apache.wicket.request.cycle.requestcyclelistenercollection$3.notify(irequestcyclelistener)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.maprequest(request)", "org.apache.wicket.request.cycle.requestcyclelistenertest$1.requestcyclelistenertest$1(requestcyclelistenertest;boolean)", "org.apache.wicket.request.cycle.baserequesthandlerstacktest$2.getrequestcycle()", "org.apache.wicket.request.mapper.abstractmapper.urlstartswith(url;string[])", "org.apache.wicket.request.requesthandlerstack.requesthandlerstack(response)", "org.apache.wicket.request.mapper.parameter.pageparameters$entry.pageparameters$entry()", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$502(requesthandlerstacktest;boolean)", "org.apache.wicket.request.mapper.basicresourcereferencemappertest$1.getcontext()", "org.apache.wicket.request.cycle.requestcyclelistenertest$incrementinglistener.onexception(requestcycle;exception)", "org.apache.wicket.request.resource.classscanner.<clinit>()", "org.apache.wicket.request.mapper.info.pageinfo.pageinfo(integer)", "org.apache.wicket.request.mapper.compoundrequestmapper.add(irequestmapper)", "org.apache.wicket.request.mapper.cryptomapper.decrypturl(request;url)", "org.apache.wicket.request.mapper.parameter.pageparameters.getvalues(string)", "org.apache.wicket.request.mapper.resourcemappertest.access$100()", "org.apache.wicket.request.handler.renderpagerequesthandler.getredirectpolicy()", "org.apache.wicket.request.mapper.abstractcomponentmapper.requestlistenerinterfacefromstring(string)", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.getpage()", "org.apache.wicket.request.mapper.abstractcomponentmapper.getpageclass(string)", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.getresourcereferenceattributes(url)", "org.apache.wicket.request.mapper.cryptomapper.maprequest(request)", "org.apache.wicket.request.cycle.baserequesthandlerstacktest$1.baserequesthandlerstacktest$1(baserequesthandlerstacktest)", "org.apache.wicket.request.resource.packageresourcereference.lookupstream(iresourcestreamlocator;locale;string;string)", "org.apache.wicket.request.http.handler.redirectrequesthandlertest.redirectrequesthandlertest()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$12.abstractresourcereferencemappertest$12(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.resource.packageresource.getscope()", "org.apache.wicket.request.handler.bookmarkablepagerequesthandler.getpageclass()", "org.apache.wicket.request.urldecoder.decode(string;charset)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.getlastmodifiedtimestampusingcache(resourcereference)", "org.apache.wicket.request.mapper.cryptomapper.cryptomapper(irequestmapper;iprovider)", "org.apache.wicket.request.mapper.bufferedresponsemapper.getandremovebufferedresponse(url)", "org.apache.wicket.request.cycle.baserequesthandlerstacktest.newstack(response)", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.getpageparameters()", "org.apache.wicket.request.resource.resourcereference$key.getlocale()", "org.apache.wicket.request.mapper.packagemappertest$1.packagemappertest$1(packagemappertest;packagename)", "org.apache.wicket.request.resource.resourcereference$key.getscopeclass()", "org.apache.wicket.request.handler.render.webpagerenderer.getandremovebufferedresponse(url)", "org.apache.wicket.request.resource.resourcereference$key.getstyle()", "org.apache.wicket.request.mapper.homepagemapper.maprequest(request)", "org.apache.wicket.request.cycle.requestcycle.<clinit>()", "org.apache.wicket.request.mapper.homepagemappertest$1.homepagemappertest$1(homepagemappertest)", "org.apache.wicket.request.cycle.requesthandlerstacktest$9.requesthandlerstacktest$9(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$10.getresource()", "org.apache.wicket.request.requesthandlerstack.executerequesthandler(irequesthandler)", "org.apache.wicket.request.mapper.bookmarkablemappertest$1.bookmarkablemappertest$1(bookmarkablemappertest)", "org.apache.wicket.request.resource.resourcereference.getlocale()", "org.apache.wicket.request.resource.contentdisposition.<clinit>()", "org.apache.wicket.request.mapper.mountedmapper.getcompatibilityscore(request)", "org.apache.wicket.request.cycle.requestcyclelistenertest$1.detach(irequestcycle)", "org.apache.wicket.request.cycle.requestcycle.set(requestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onexception(requestcycle;exception)", "org.apache.wicket.request.url.url()", "org.apache.wicket.request.mapper.abstractmapper.getmountsegments(string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcontentdisposition(contentdisposition)", "org.apache.wicket.request.mapper.parameter.pageparameters.getnamedkeys()", "org.apache.wicket.request.cycle.requesthandlerstacktest$2.respond(irequestcycle)", "org.apache.wicket.request.mapper.parameter.pageparameters.clearindexed()", "org.apache.wicket.request.url.url(list;list;charset)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.removelastmodifiedtimestampfromcache(resourcereference)", "org.apache.wicket.request.mapper.packagemapper.packagemapper(packagename)", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.encoderesourcereferenceattributes(url;resourcereference)", "org.apache.wicket.request.http.webresponse.disablecaching()", "org.apache.wicket.request.mapper.bookmarkablemappertest.bookmarkablemappertest()", "org.apache.wicket.request.mapper.mountedmappertest$2.getcontext()", "org.apache.wicket.request.handler.pageprovider.pageprovider(int;integer)", "org.apache.wicket.protocol.http.request.webexternalresourcerequesthandler.<clinit>()", "org.apache.wicket.request.request.getrequestparameters()", "org.apache.wicket.request.mapper.resourcemappertest$testresource.resourcemappertest$testresource(1)", "org.apache.wicket.request.mapper.abstractmappertest.getrequest(url)", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$200(requestcyclelistenertest)", "org.apache.wicket.request.urldecoder.decode(string;string)", "org.apache.wicket.request.handler.render.webpagerenderer.getsessionid()", "org.apache.wicket.request.mapper.parameter.pageparameters.set(string;object;int)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcontentlength()", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$108(requestcyclelistenertest)", "org.apache.wicket.request.cycle.requesthandlerstacktest$11.requesthandlerstacktest$11(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenertest.assertvalues(int;int;int;int;int;int;int)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.processbookmarkable(class;pageparameters)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.<clinit>()", "org.apache.wicket.request.request.clonewithurl(url)", "org.apache.wicket.request.mapper.abstractmapper.getplaceholder(string)", "org.apache.wicket.request.mapper.compoundrequestmapper$encoderwithsegmentscount.getmapper()", "org.apache.wicket.request.cycle.requesthandlerstacktest$11.respond(irequestcycle)", "org.apache.wicket.request.cycle.requesthandlerstacktest$2.detach(irequestcycle)", "org.apache.wicket.request.mapper.mountedmappertest.mountedmappertest()", "org.apache.wicket.request.resource.resourcereference$urlattributes.equals(object)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$1.requestcyclelistenercollection$1(requestcyclelistenercollection;requestcycle)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getlastmodified()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcontenttype()", "org.apache.wicket.request.resource.resourcereferenceregistry$1.resourcereferenceregistry$1(resourcereferenceregistry)", "org.apache.wicket.request.mapper.homepagemapper.getcompatibilityscore(request)", "org.apache.wicket.request.handler.render.webpagerenderer.isredirecttobuffer()", "org.apache.wicket.request.http.handler.errorcoderequesthandler.errorcoderequesthandler(int;string)", "org.apache.wicket.request.cycle.requesthandlerstacktest$7.detach(irequestcycle)", "org.apache.wicket.request.resource.resourcereference$urlattributes.resourcereference$urlattributes(locale;string;string)", "org.apache.wicket.request.mapper.abstractmappertest.abstractmappertest()", "org.apache.wicket.request.mapper.abstractmappertest.setup()", "org.apache.wicket.request.mapper.bufferedresponsemapper.hasbufferedresponse(url)", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.getpage()", "org.apache.wicket.request.mapper.parameter.pageparametersencoder.decodepageparameters(request)", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.invokelistener()", "org.apache.wicket.request.cycle.requesthandlerstacktest$6.requesthandlerstacktest$6(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.response.response()", "org.apache.wicket.request.mapper.compoundrequestmapper.maprequest(request)", "org.apache.wicket.request.mapper.parameter.pageparametersencoder.encodepageparameters(pageparameters)", "org.apache.wicket.request.mapper.info.pagecomponentinfotest.testpagecomponentinfo(pagecomponentinfo;integer;string;string)", "org.apache.wicket.request.mapper.abstractcomponentmapper.encodepagecomponentinfo(url;pagecomponentinfo)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$7.abstractresourcereferencemappertest$7(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.request$1.geturl()", "org.apache.wicket.request.resource.abstractresource$writecallback.writestream(attributes;inputstream)", "org.apache.wicket.request.cycle.requestcycle.handleexception(exception)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.abstractbookmarkablemapper()", "org.apache.wicket.request.handler.render.webpagerenderer.issessiontemporary()", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(key)", "org.apache.wicket.request.mapper.compoundrequestmapper$encoderwithsegmentscount.compareto(object)", "org.apache.wicket.request.resource.packageresourcereference$streaminfo.packageresourcereference$streaminfo(iresourcestream;locale;string;string)", "org.apache.wicket.request.cycle.baserequesthandlerstacktest.baserequesthandlerstacktest()", "org.apache.wicket.request.resource.packageresource.getresourcestream()", "org.apache.wicket.request.mapper.abstractbookmarkablemapper$urlinfo.abstractbookmarkablemapper$urlinfo(pagecomponentinfo;class;pageparameters)", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.removemetaparameter(url)", "org.apache.wicket.request.cycle.requestcycle.setresponsepage(irequestablepage)", "org.apache.wicket.request.cycle.requestcycle.get()", "org.apache.wicket.request.url.equals(object)", "org.apache.wicket.request.handler.render.webpagerenderer.isredirecttorender()", "org.apache.wicket.request.mapper.parameter.pageparameters.pageparameters(string;string)", "org.apache.wicket.request.url.isatleastonsegmentreal(list)", "org.apache.wicket.request.cycle.requesthandlerstacktest$8.requesthandlerstacktest$8(requesthandlerstacktest;requesthandlerstack)", "org.apache.wicket.request.mapper.basicresourcereferencemapper.maphandler(irequesthandler)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$2.abstractresourcereferencemappertest$2(abstractresourcereferencemappertest)", "org.apache.wicket.request.url.decodesegment(string;charset)", "org.apache.wicket.request.mapper.info.componentinfo.tostring()", "org.apache.wicket.request.mapper.info.pageinfo.parse(string)", "org.apache.wicket.request.mapper.mountedmapper.newpageparameters()", "org.apache.wicket.request.resource.resourcereference$key.getscope()", "org.apache.wicket.request.resource.resourcestreamresource.newresourceresponse(attributes)", "org.apache.wicket.request.mapper.mountedmapper.checkpageclass(class)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.access$000()", "org.apache.wicket.request.requesthandlerstack.getrequesthandlerscheduledaftercurrent()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$11.abstractresourcereferencemappertest$11(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.gettextencoding()", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.parselocale(string)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$8.abstractresourcereferencemappertest$8(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.mapper.info.pagecomponentinfo.getcomponentinfo()", "org.apache.wicket.request.url.removequeryparameters(string)", "org.apache.wicket.request.urlrenderer.setbaseurl(url)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$4.notify(object)", "org.apache.wicket.request.handler.renderpagerequesthandler.getpageprovider()", "org.apache.wicket.request.url.setqueryparameter(string;object)", "org.apache.wicket.request.resource.dynamicimageresource.dynamicimageresource()", "org.apache.wicket.request.mapper.mountedmapper.redirectfromhomepage()", "org.apache.wicket.request.handler.render.webpagerenderer.isonepassrender()", "org.apache.wicket.request.cycle.abstractrequestcyclelistener.onbeginrequest(requestcycle)", "org.apache.wicket.request.cycle.requesthandlerstacktest$5.detach(irequestcycle)", "org.apache.wicket.request.http.handler.redirectrequesthandler.respond(irequestcycle)", "org.apache.wicket.request.mapper.mountedmapper.buildurl(urlinfo)", "org.apache.wicket.request.flow.resetresponseexception$responseresettingdecorator.detach(irequestcycle)", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(class;pageparameters)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$14.getresource()", "org.apache.wicket.request.mapper.basicresourcereferencemappertest$2.getcontext()", "org.apache.wicket.request.resource.resourcereferenceregistry.createdefaultresourcereference(key)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$2.requestcyclelistenercollection$2(requestcyclelistenercollection;requestcycle)", "org.apache.wicket.request.url.encodesegment(string;charset)", "org.apache.wicket.request.request.request()", "org.apache.wicket.request.cycle.requesthandlerstacktest$10.detach(irequestcycle)", "org.apache.wicket.request.urlencoder$type.<clinit>()", "org.apache.wicket.request.cycle.requestcyclelistenercollection.<clinit>()", "org.apache.wicket.request.resource.classscanner.scanclass(class)", "org.apache.wicket.request.cycle.requestcyclelistenertest$errorcodelistener.onexception(requestcycle;exception)", "org.apache.wicket.request.mapper.cryptomapper.getcrypt()", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$602(requesthandlerstacktest;boolean)", "org.apache.wicket.request.mapper.pageinstancemapper.maphandler(irequesthandler)", "org.apache.wicket.request.urlencoder$type.values()", "org.apache.wicket.request.mapper.resourcemapper.resourcemapper(string;resourcereference)", "org.apache.wicket.request.resource.abstractresource$writecallback$1.write(byte[])", "org.apache.wicket.request.handler.pageprovider.pageprovider(class;pageparameters)", "org.apache.wicket.request.cycle.requestcycle.setmetadata(metadatakey;object)", "org.apache.wicket.request.resource.resourcereference.geturlattributes()", "org.apache.wicket.request.response.reset()", "org.apache.wicket.request.mapper.cryptomapper$applicationcryptprovider.cryptomapper$applicationcryptprovider(application)", "org.apache.wicket.request.mapper.resourcemappertest$testresource.respond(attributes)", "org.apache.wicket.request.mapper.parameter.pageparameters.add(string;object)", "org.apache.wicket.request.resource.packageresourcereference.getresource()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.detach(irequestcycle)", "org.apache.wicket.request.mapper.bufferedresponsemapper.getcompatibilityscore(request)", "org.apache.wicket.request.mapper.abstractcomponentmapper.getpagecomponentinfo(url)", "org.apache.wicket.request.mapper.homepagemappertest.homepagemappertest()", "org.apache.wicket.request.resource.resourcereference.resourcereference(string)", "org.apache.wicket.request.url.getcharset()", "org.apache.wicket.request.mapper.bufferedresponsemapper.getrequest(request)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.<clinit>()", "org.apache.wicket.request.parameter.urlrequestparametersadapter.getparametervalues(string)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$14.abstractresourcereferencemappertest$14(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$202(requesthandlerstacktest;boolean)", "org.apache.wicket.request.resource.resourcereferenceregistry.enforceautoaddedcachesize(int)", "org.apache.wicket.request.http.webresponse$cachescope.access$000(cachescope)", "org.apache.wicket.request.mapper.parameter.pageparameters.getindexedcount()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getresource()", "org.apache.wicket.request.cycle.requestcycle.detach()", "org.apache.wicket.request.mapper.parameter.pageparameters.set(string;object)", "org.apache.wicket.request.mapper.info.pagecomponentinfo.getpageinfo()", "org.apache.wicket.request.mapper.testmappercontext$1.createdefaultresourcereference(key)", "org.apache.wicket.request.handler.renderpagerequesthandler.renderpagerequesthandler(ipageprovider)", "org.apache.wicket.request.handler.pageandcomponentprovider.setcomponentpath(string)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$1.notify(object)", "org.apache.wicket.request.urldecoder.<clinit>()", "org.apache.wicket.request.http.handler.redirectrequesthandler.detach(irequestcycle)", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.decoderesourcereferenceattributes(string)", "org.apache.wicket.request.cycle.requestcyclelistenertest$incrementinglistener.requestcyclelistenertest$incrementinglistener(requestcyclelistenertest;1)", "org.apache.wicket.request.mapper.parameter.pageparameters$entry.access$102(entry;string)", "org.apache.wicket.request.response.close()", "org.apache.wicket.request.cycle.requestcyclecontext.setexceptionmapper(iexceptionmapper)", "org.apache.wicket.request.mapper.testmappercontext.getbookmarkableidentifier()", "org.apache.wicket.request.cycle.requestcycle.urlfor(irequesthandler)", "org.apache.wicket.request.cycle.requesthandlerstacktest$10.respond(irequestcycle)", "org.apache.wicket.request.mapper.abstractmapper.encodepageparameters(url;pageparameters;ipageparametersencoder)", "org.apache.wicket.request.mapper.testmappercontext.newpageinstance(class;pageparameters)", "org.apache.wicket.request.url.islastsegmentreal()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setwritecallback(writecallback)", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.detach(irequestcycle)", "org.apache.wicket.request.cycle.requestcycle.newurlrenderer()", "org.apache.wicket.request.handler.pageprovider.getpageinstance()", "org.apache.wicket.request.mapper.basicresourcereferencemappertest$2.basicresourcereferencemappertest$2(basicresourcereferencemappertest;ipageparametersencoder;iprovider)", "org.apache.wicket.request.url.tostring()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getvariation()", "org.apache.wicket.request.resource.packageresource.packageresource(class;string;locale;string;string)", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$302(requesthandlerstacktest;boolean)", "org.apache.wicket.request.resource.resourcereference.resourcereference(class;string)", "org.apache.wicket.request.cycle.requestcycle.processrequest()", "org.apache.wicket.request.cycle.requestcycle.renderurl(url)", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$1008(requestcyclelistenertest)", "org.apache.wicket.request.mapper.parameter.pageparameters$namedpair.getkey()", "org.apache.wicket.request.urltest.checksegments(url;string[])", "org.apache.wicket.request.flow.resetresponseexception$responseresettingdecorator.respond(irequestcycle)", "org.apache.wicket.request.mapper.testmappercontext.getresourcereferenceregistry()", "org.apache.wicket.request.mapper.info.componentinfo.componentinfo(integer;string;string;integer)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$13.getresource()", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.nonempty(string)", "org.apache.wicket.request.parameter.urlrequestparametersadapter.urlrequestparametersadapter(url)", "org.apache.wicket.request.mapper.info.componentinfo.<clinit>()", "org.apache.wicket.request.mapper.basicresourcereferencemappertest.<clinit>()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getpageparameters()", "org.apache.wicket.request.handler.pageprovider.setpageclass(class)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.checkpageclass(class)", "org.apache.wicket.request.handler.resource.resourcerequesthandler.respond(irequestcycle)", "org.apache.wicket.request.cycle.requesthandlerstacktest$11.detach(irequestcycle)", "org.apache.wicket.request.mapper.pageinstancemapper.pageinstancemapper()", "org.apache.wicket.request.mapper.stalepageexception.stalepageexception(irequestablepage)", "org.apache.wicket.request.handler.renderpagerequesthandler.respond(irequestcycle)", "org.apache.wicket.request.handler.resource.resourcerequesthandler.resourcerequesthandler(iresource;pageparameters)", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$402(requesthandlerstacktest;boolean)", "org.apache.wicket.request.mapper.info.pageinfo.pageinfo()", "org.apache.wicket.request.mapper.abstractmapper.abstractmapper()", "org.apache.wicket.request.handler.pageprovider.setpagesource(ipagesource)", "org.apache.wicket.request.handler.pageprovider.getpageinstance(integer;class;pageparameters;integer)", "org.apache.wicket.request.handler.bufferedresponserequesthandler.detach(irequestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenertest$4.requestcyclelistenertest$4(requestcyclelistenertest)", "org.apache.wicket.request.url.getqueryparametervalue(string)", "org.apache.wicket.request.requesthandlerstack.detach()", "org.apache.wicket.request.mapper.basicresourcereferencemapper.basicresourcereferencemapper(ipageparametersencoder;iprovider)", "org.apache.wicket.request.urltest.checkqueryparams(url;string[])", "org.apache.wicket.request.cycle.requestcyclelistenertest$errorcodelistener$1.requestcyclelistenertest$errorcodelistener$1(errorcodelistener)", "org.apache.wicket.request.mapper.abstractcomponentmapper.requestlistenerinterfacetostring(requestlistenerinterface)", "org.apache.wicket.request.resource.abstractresource.configurecache(webrequest;webresponse;resourceresponse;attributes)", "org.apache.wicket.request.http.webrequest.getifmodifiedsinceheader()", "org.apache.wicket.request.mapper.resourcemappertest$testresource.resourcemappertest$testresource()", "org.apache.wicket.request.cycle.abstractrequestcyclelistener.ondetach(requestcycle)", "org.apache.wicket.request.urltest.urltest()", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.bookmarkablelistenerinterfacerequesthandler(pageandcomponentprovider;requestlistenerinterface)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcacheduration()", "org.apache.wicket.request.cycle.requestcyclelistenertest$errorcodelistener$1.respond(irequestcycle)", "org.apache.wicket.request.handler.pageprovider.pageprovider(int;class;pageparameters;integer)", "org.apache.wicket.request.cycle.requesthandlerstacktest$6.detach(irequestcycle)", "org.apache.wicket.request.url.islastsegmentempty(list)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$15.getresource()", "org.apache.wicket.request.resource.iresource$attributes.getrequest()", "org.apache.wicket.request.cycle.requestcyclecontext.getresponse()", "org.apache.wicket.request.cycle.requesthandlerstacktest.access$002(requesthandlerstacktest;boolean)", "org.apache.wicket.request.resource.resourcereferenceregistry.registerresourcereference(resourcereference)", "org.apache.wicket.request.resource.resourcestreamresource.<clinit>()", "org.apache.wicket.request.resource.iresource$attributes.iresource$attributes(request;response;pageparameters)", "org.apache.wicket.request.resource.iresource$attributes.iresource$attributes(request;response)", "org.apache.wicket.request.mapper.info.componentinfotest.componentinfotest()", "org.apache.wicket.request.requesthandlerstack.getresponse()", "org.apache.wicket.request.mapper.parentpathreferencerewriter.getcompatibilityscore(request)", "org.apache.wicket.request.handler.pageprovider.setpageparameters(pageparameters)", "org.apache.wicket.request.cycle.requestcyclelistenertest$2.requestcyclelistenertest$2(requestcyclelistenertest)", "org.apache.wicket.request.url.tostring(charset)", "org.apache.wicket.request.resource.packageresource.newresourceresponse(attributes)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getstyle()", "org.apache.wicket.request.mapper.packagemapper.packagemapper(packagename;ipageparametersencoder)", "org.apache.wicket.request.resource.resourcereference.hashcode()", "org.apache.wicket.request.mapper.testmappercontext.gethomepageclass()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$11.getresource()", "org.apache.wicket.request.mapper.basicresourcereferencemappertest.basicresourcereferencemappertest()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$3.abstractresourcereferencemappertest$3(abstractresourcereferencemappertest)", "org.apache.wicket.request.mapper.mountedmappertest$1.mountedmappertest$1(mountedmappertest;string;class)", "org.apache.wicket.request.resource.resourcereference$urlattributes.getvariation()", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$808(requestcyclelistenertest)", "org.apache.wicket.request.mapper.info.pageinfo.tostring()", "org.apache.wicket.request.mapper.info.pagecomponentinfotest.pagecomponentinfotest()", "org.apache.wicket.request.urldecoder.urldecoder(boolean)", "org.apache.wicket.request.mapper.bookmarkablemapper.bookmarkablemapper()", "org.apache.wicket.request.mapper.testmappercontext.testmappercontext()", "org.apache.wicket.request.cycle.requestcyclelistenertest$errorcodelistener.access$600(errorcodelistener)", "org.apache.wicket.request.handler.listenerinvocationnotallowedexception.listenerinvocationnotallowedexception(requestlistenerinterface;component;behavior;string)", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.getcomponent()", "org.apache.wicket.request.resource.resourcereference.getname()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$5.abstractresourcereferencemappertest$5(abstractresourcereferencemappertest)", "org.apache.wicket.request.mapper.bookmarkablemapper.bookmarkablemapper(ipageparametersencoder)", "org.apache.wicket.request.http.webrequest.getcookie(string)", "org.apache.wicket.request.handler.pageandcomponentprovider.pageandcomponentprovider(int;integer;string)", "org.apache.wicket.request.mapper.bufferedresponsemapper.bufferedresponsemapper()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setfilename(string)", "org.apache.wicket.request.mapper.resourcemappertest.resourcemappertest()", "org.apache.wicket.request.cycle.requestcyclelistenertest$2.maprequest(request)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$7.getresource()", "org.apache.wicket.request.parameter.combinedrequestparametersadapter.getparametervalues(string)", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.getbehaviorindex()", "org.apache.wicket.request.mapper.bookmarkablemapper.parserequest(request)", "org.apache.wicket.request.handler.pageprovider.prepareforrendernewpage()", "org.apache.wicket.request.cycle.requesthandlerstacktest$3.respond(irequestcycle)", "org.apache.wicket.request.url.concatsegments(list)", "org.apache.wicket.request.cycle.abstractrequestcyclelistener.onendrequest(requestcycle)", "org.apache.wicket.request.resource.resourcereference$key.getvariation()", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$testcryptfactory$1.encrypturlsafe(string)", "org.apache.wicket.request.cycle.requestcyclelistenertest$errorcodelistener.requestcyclelistenertest$errorcodelistener(requestcyclelistenertest;int)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper$urlinfo.getpageclass()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$10.abstractresourcereferencemappertest$10(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.resource.resourcereference$urlattributes.getstyle()", "org.apache.wicket.request.resource.writecallbacktest.writecallbacktest()", "org.apache.wicket.request.resource.abstractresource.respond(attributes)", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$708(requestcyclelistenertest)", "org.apache.wicket.protocol.http.request.homepage.homepage(pageparameters)", "org.apache.wicket.request.resource.resourcestreamresource$2.writedata(attributes)", "org.apache.wicket.request.url.getqueryparameter(string)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.detach(irequestcycle)", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(class;string;locale;string;string)", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.bookmarkablelistenerinterfacerequesthandler(ipageandcomponentprovider;requestlistenerinterface;integer)", "org.apache.wicket.request.cycle.abstractrequestcyclelistener.onexception(requestcycle;exception)", "org.apache.wicket.request.mapper.abstractcomponentmapper.removemetaparameter(url)", "org.apache.wicket.request.cycle.requestcyclelistenertest$errorcodelistener$1.detach(irequestcycle)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$resourcereferencewithtimestamp.getlastmodified()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$13.abstractresourcereferencemappertest$13(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.url.getqueryparameters()", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.getbehaviorindex()", "org.apache.wicket.request.mapper.cryptomapper.cryptomapper(irequestmapper;application)", "org.apache.wicket.request.mapper.resourcemappertest$1.geturl()", "org.apache.wicket.request.mapper.packagemapper.pagemusthavebeencreatedbookmarkable()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.setfilename(string)", "org.apache.wicket.request.handler.pageandcomponentprovider.pageandcomponentprovider(irequestablepage;irequestablecomponent)", "org.apache.wicket.request.mapper.info.pagecomponentinfo.tostring()", "org.apache.wicket.request.resource.resourcestreamresource.setcontentdisposition(contentdisposition)", "org.apache.wicket.request.cycle.requestcyclelistenertest$1.respond(irequestcycle)", "org.apache.wicket.request.mapper.abstractcomponentmapper.getcontext()", "org.apache.wicket.request.resource.classscanner.classscanner()", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.setcontentdisposition(contentdisposition)", "org.apache.wicket.request.mapper.info.componentinfo.parse(string)", "org.apache.wicket.request.mapper.parameter.pageparameters.get(int)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$3.notify(object)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.resourcereferencerequesthandler(resourcereference;pageparameters)", "org.apache.wicket.request.request.getoriginalurl()", "org.apache.wicket.request.handler.renderpagerequesthandler.renderpagerequesthandler(ipageprovider;redirectpolicy)", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.encoderesourcereferenceattributes(urlattributes)", "org.apache.wicket.request.mapper.packagemapper.parserequest(request)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.maprequest(request)", "org.apache.wicket.request.mapper.compoundrequestmapper.maphandler(irequesthandler)", "org.apache.wicket.request.cycle.requesthandlerstacktest$9.respond(irequestcycle)", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(string)", "org.apache.wicket.request.cycle.requestcycle.setresponsepage(class)", "org.apache.wicket.request.handler.emptyrequesthandler.emptyrequesthandler()", "org.apache.wicket.request.resource.resourcestreamresource$2.resourcestreamresource$2(resourcestreamresource;inputstream)", "org.apache.wicket.request.urlencoder.encode(string;string)", "org.apache.wicket.request.mapper.parameter.pageparameters$entry.access$000(entry)", "org.apache.wicket.request.cycle.requestcyclecontext.requestcyclecontext(request;response;irequestmapper;iexceptionmapper)", "org.apache.wicket.request.cycle.requesthandlerstacktest$4.respond(irequestcycle)", "org.apache.wicket.request.resource.resourcestreamresource.access$100(resourcestreamresource)", "org.apache.wicket.request.mapper.resourcemappertest.<clinit>()", "org.apache.wicket.request.http.handler.redirectrequesthandler.redirectrequesthandler(string)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getwritecallback()", "org.apache.wicket.request.cycle.requestcycle.setcleanupfeedbackmessagesondetach(boolean)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$4.abstractresourcereferencemappertest$4(abstractresourcereferencemappertest)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$8.getresource()", "org.apache.wicket.request.handler.pageprovider.pageprovider(class)", "org.apache.wicket.request.mapper.compoundrequestmapper$encoderwithsegmentscount.compoundrequestmapper$encoderwithsegmentscount(irequestmapper;int)", "org.apache.wicket.request.http.webrequest.webrequest()", "org.apache.wicket.request.mapper.resourcemapper.maprequest(request)", "org.apache.wicket.request.resource.sharedresourcereference.getresource()", "org.apache.wicket.request.http.webresponse.<clinit>()", "org.apache.wicket.request.cycle.requestcyclelistenercollection$1.notify(irequestcyclelistener)", "org.apache.wicket.request.mapper.parameter.pageparameters.getallnamed()", "org.apache.wicket.request.handler.render.webpagerenderer.redirectto(url;requestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$testcryptfactory.cryptedurlwebrequestcodingstrategytest$testcryptfactory(1)", "org.apache.wicket.request.resource.contentdisposition.contentdisposition(string;int)", "org.apache.wicket.request.mapper.bookmarkablemappertest$1.getcontext()", "org.apache.wicket.request.resource.abstractresource$writecallback$1.abstractresource$writecallback$1(writecallback;response)", "org.apache.wicket.request.resource.resourcestreamresource.close()", "org.apache.wicket.request.url.encodeparameter(string;charset)", "org.apache.wicket.request.mapper.abstractresourcereferencemapper.abstractresourcereferencemapper()", "org.apache.wicket.request.cycle.requesthandlerstacktest.initflags()", "org.apache.wicket.request.cycle.requestcycle.resolverequesthandler()", "org.apache.wicket.request.cycle.requestcycle.onbeginrequest()", "org.apache.wicket.request.cycle.requesthandlerstacktest$8.respond(irequestcycle)", "org.apache.wicket.request.http.webresponse.webresponse()", "org.apache.wicket.request.resource.resourcereference.getkey()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getlocale()", "org.apache.wicket.request.handler.bookmarkablepagerequesthandler.bookmarkablepagerequesthandler(ipageprovider)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$9.abstractresourcereferencemappertest$9(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.processhybrid(pageinfo;class;pageparameters;integer)", "org.apache.wicket.request.url.getsegments()", "org.apache.wicket.request.requesthandlerstack$replacehandlerexception.access$000(replacehandlerexception)", "org.apache.wicket.request.handler.renderpagerequesthandler.getpage()", "org.apache.wicket.request.cycle.requestcyclelistenertest.requestcyclelistenertest()", "org.apache.wicket.request.mapper.info.pagecomponentinfo.parse(string)", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.getcomponent()", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.listenerinterfacerequesthandler(ipageandcomponentprovider;requestlistenerinterface;integer)", "org.apache.wicket.request.resource.abstractresource.abstractresource()", "org.apache.wicket.request.cycle.requesthandlerstacktest$8.detach(irequestcycle)", "org.apache.wicket.request.resource.resourcereference.resourcereference(key)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$15.abstractresourcereferencemappertest$15(abstractresourcereferencemappertest;class;string;locale;string;string)", "org.apache.wicket.request.resource.resourcestreamresource.setfilename(string)", "org.apache.wicket.request.resource.packageresourcereference.lookupstream(locale;string;string)", "org.apache.wicket.request.mapper.abstractcomponentmapper.abstractcomponentmapper()", "org.apache.wicket.request.mapper.mountedmapper.checkhomepage(url)", "org.apache.wicket.request.mapper.cryptomapper.encrypturl(url)", "org.apache.wicket.request.requesthandlerstack.<clinit>()", "org.apache.wicket.request.requesthandlerstack.schedulerequesthandleraftercurrent(irequesthandler)", "org.apache.wicket.request.mapper.resourcemappertest.setup()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.geterrorcode()", "org.apache.wicket.request.mapper.bufferedresponsemapper.getsessionid()", "org.apache.wicket.request.url.setcharset(charset)", "org.apache.wicket.request.url$queryparameter.getvalue()", "org.apache.wicket.request.cycle.requestcycle.getlisteners()", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.listenerinterfacerequesthandler(pageandcomponentprovider;requestlistenerinterface)", "org.apache.wicket.request.cycle.requestcycle.getoriginalresponse()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest.abstractresourcereferencemappertest()", "org.apache.wicket.request.url.isabsolute()", "org.apache.wicket.request.mapper.testmappercontext.getpageinstance(int)", "org.apache.wicket.request.cycle.requestcycle.getrequest()", "org.apache.wicket.request.cycle.requestcyclelistenertest$incrementinglistener.ondetach(requestcycle)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$testcryptfactory.cryptedurlwebrequestcodingstrategytest$testcryptfactory()", "org.apache.wicket.request.handler.pageprovider.detach()", "org.apache.wicket.request.handler.render.pagerenderer.getpageprovider()", "org.apache.wicket.request.mapper.homepagemapper.homepagemapper()", "org.apache.wicket.request.mapper.compoundrequestmapper.compoundrequestmapper()", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$502(requestcyclelistenertest;int)", "org.apache.wicket.request.flow.resetresponseexception$responseresettingdecorator.resetresponseexception$responseresettingdecorator(irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$308(requestcyclelistenertest)", "org.apache.wicket.request.http.handler.errorcoderequesthandler.detach(irequestcycle)", "org.apache.wicket.request.cycle.requestcycle.geturlrenderer()", "org.apache.wicket.request.resource.resourcereferenceregistry$1.foundresourcereference(resourcereference)", "org.apache.wicket.request.resource.resourcereferenceregistry.resourcereferenceregistry()", "org.apache.wicket.request.cycle.requestcycle.getmetadata(metadatakey)", "org.apache.wicket.request.mapper.info.pagecomponentinfo.pagecomponentinfo(pageinfo;componentinfo)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.ondetach(requestcycle)", "org.apache.wicket.request.resource.resourcereferenceregistry.getresourcereference(class;string;locale;string;string;boolean;boolean)", "org.apache.wicket.request.cycle.requestcycle.setresponsepage(class;pageparameters)", "org.apache.wicket.request.mapper.testmappercontext.requestlistenerinterfacetostring(requestlistenerinterface)", "org.apache.wicket.request.cycle.requesthandlerstacktest$4.requesthandlerstacktest$4(requesthandlerstacktest;requesthandlerstack;response)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcachescope()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.abstractresource$resourceresponse()", "org.apache.wicket.request.mapper.parameter.pageparametersencoder.pageparametersencoder()", "org.apache.wicket.request.cycle.requestcyclelistenercollection$2.notify(object)", "org.apache.wicket.request.handler.pageprovider.pageprovider(irequestablepage)", "org.apache.wicket.request.url.parse(string;charset)", "org.apache.wicket.request.resource.resourcereference$urlattributes.hashcode()", "org.apache.wicket.request.cycle.requestcyclelistenertest$incrementinglistener.requestcyclelistenertest$incrementinglistener(requestcyclelistenertest)", "org.apache.wicket.request.mapper.info.componentinfo.getlistenerinterface()", "org.apache.wicket.request.cycle.requestcyclelistenertest$incrementinglistener.onbeginrequest(requestcycle)", "org.apache.wicket.request.cycle.abstractrequestcyclelistener.abstractrequestcyclelistener()", "org.apache.wicket.protocol.http.request.webexternalresourcerequesthandler.webexternalresourcerequesthandler(string)", "org.apache.wicket.request.mapper.parameter.pageparameters.pageparameters(string)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.maphandler(irequesthandler)", "org.apache.wicket.request.cycle.requestcyclelistenertest$3.requestcyclelistenertest$3(requestcyclelistenertest)", "org.apache.wicket.request.resource.resourcestreamresource.resourcestreamresource(iresourcestream)", "org.apache.wicket.request.handler.render.pagerenderer.pagerenderer(renderpagerequesthandler)", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.getresourcereference()", "org.apache.wicket.request.handler.resource.resourcereferencerequesthandler.respond(irequestcycle)", "org.apache.wicket.request.cycle.requestcycle.onendrequest()", "org.apache.wicket.request.cycle.requestcyclelistenertest.setup()", "org.apache.wicket.request.mapper.mountedmappertest$2.mountedmappertest$2(mountedmappertest;string;class)", "org.apache.wicket.request.handler.resource.resourcestreamrequesthandler.respond(irequestcycle)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$12.getresource()", "org.apache.wicket.request.urlencoder$type.urlencoder$type(string;int)", "org.apache.wicket.request.http.webresponse$cachescope.webresponse$cachescope(string;int;string)", "org.apache.wicket.request.cycle.requestcyclecontext.getexceptionmapper()", "org.apache.wicket.request.handler.render.pagerenderer.getrenderpagerequesthandler()", "org.apache.wicket.request.mapper.abstractmappertest$1.geturl()", "org.apache.wicket.request.mapper.info.componentinfo.getrendercount()", "org.apache.wicket.request.mapper.bookmarkablemappertest.<clinit>()", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest.<clinit>()", "org.apache.wicket.request.mapper.resourcereferencemapper.resourcereferencemapper(ipageparametersencoder;iprovider;iprovider)", "org.apache.wicket.request.mapper.packagemappertest.<clinit>()", "org.apache.wicket.request.handler.pageandcomponentprovider.pageandcomponentprovider(int;class;pageparameters;integer;string)", "org.apache.wicket.request.cycle.requesthandlerstacktest$7.respond(irequestcycle)", "org.apache.wicket.request.mapper.bookmarkablemapper.getcompatibilityscore(request)", "org.apache.wicket.request.cycle.requesthandlerstacktest$6.respond(irequestcycle)", "org.apache.wicket.request.resource.resourcereference$key.tostring()", "org.apache.wicket.request.handler.render.webpagerenderer.respond(requestcycle)", "org.apache.wicket.request.resource.resourcereference$urlattributes.getlocale()", "org.apache.wicket.request.mapper.cryptomapper.maphandler(irequesthandler)", "org.apache.wicket.request.cycle.requesthandlerstacktest$3.requesthandlerstacktest$3(requesthandlerstacktest;requesthandlerstack;irequesthandler)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$1.abstractresourcereferencemappertest$1(abstractresourcereferencemappertest)", "org.apache.wicket.request.requesthandlerstack.setresponse(response)", "org.apache.wicket.request.resource.resourcereference$key.getname()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.dataneedstobewritten(attributes)", "org.apache.wicket.request.mapper.packagemapper.buildurl(urlinfo)", "org.apache.wicket.request.resource.resourcereference$key.hashcode()", "org.apache.wicket.request.cycle.requesthandlerstacktest$1.detach(irequestcycle)", "org.apache.wicket.request.cycle.requesthandlerstacktest$3.detach(irequestcycle)", "org.apache.wicket.request.resource.iresource$attributes.getresponse()", "org.apache.wicket.request.cycle.urlrenderertest.urlrenderertest()", "org.apache.wicket.request.parameter.combinedrequestparametersadapter.getparametervalue(string)", "org.apache.wicket.request.resource.resourcereferenceregistry._getresourcereference(string;string;locale;string;string;boolean)", "org.apache.wicket.request.handler.render.webpagerenderer.getpage()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcontentlength(long)", "org.apache.wicket.request.mapper.mountedmapper.mountedmapper(string;class;ipageparametersencoder)", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$008(requestcyclelistenertest)", "org.apache.wicket.request.cycle.requestcyclelistenertest$incrementinglistener.onendrequest(requestcycle)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper$urlinfo.getpagecomponentinfo()", "org.apache.wicket.request.resource.packageresourcereference.packageresourcereference(class;string)", "org.apache.wicket.request.resource.packageresourcereference.geturlattributes()", "org.apache.wicket.request.mapper.info.componentinfo.getcomponentpath()", "org.apache.wicket.request.url.url(url)", "org.apache.wicket.request.mapper.info.componentinfo.isnumber(string)", "org.apache.wicket.request.request$1.request$1(request;url)", "org.apache.wicket.request.cycle.requestcyclelistenercollection$3.requestcyclelistenercollection$3(requestcyclelistenercollection;requestcycle;exception;list)", "org.apache.wicket.request.handler.pageprovider.touchpageinstance()", "org.apache.wicket.request.mapper.testmappercontext.requestlistenerinterfacefromstring(string)", "org.apache.wicket.request.request.getqueryparameters()", "org.apache.wicket.request.mapper.info.componentinfo.getbehaviorid()", "org.apache.wicket.request.cycle.requestcycle.executeexceptionrequesthandler(irequesthandler;int)", "org.apache.wicket.request.mapper.parameter.pageparameters$entry.pageparameters$entry(1)", "org.apache.wicket.request.resource.resourcereferenceregistry.getresourcereference(key;boolean;boolean)", "org.apache.wicket.request.cycle.requesthandlerstacktest$4.detach(irequestcycle)", "org.apache.wicket.request.url$queryparameter.getname()", "org.apache.wicket.request.handler.renderpagerequesthandler$redirectpolicy.<clinit>()", "org.apache.wicket.request.cycle.baserequesthandlerstacktest$2.baserequesthandlerstacktest$2(baserequesthandlerstacktest;response)", "org.apache.wicket.request.urlrenderer.urlrenderer(url)", "org.apache.wicket.request.urlencoder$1.<clinit>()", "org.apache.wicket.request.mapper.parameter.pageparameters.isempty()", "org.apache.wicket.request.resource.resourcereference.getscope()", "org.apache.wicket.request.requesthandlerstack$replacehandlerexception.requesthandlerstack$replacehandlerexception(irequesthandler;boolean)", "org.apache.wicket.request.http.webresponse.setinlineheader(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$1.cryptedurlwebrequestcodingstrategytest$1(cryptedurlwebrequestcodingstrategytest)", "org.apache.wicket.request.http.handler.redirectrequesthandler.redirectrequesthandler(string;int)", "org.apache.wicket.request.cycle.requestcycle.mapurlfor(resourcereference;pageparameters)", "org.apache.wicket.request.cycle.requesthandlerstacktest$5.respond(irequestcycle)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.getcontentdisposition()", "org.apache.wicket.request.resource.packageresource.<clinit>()", "org.apache.wicket.request.handler.bookmarkablelistenerinterfacerequesthandler.getlistenerinterface()", "org.apache.wicket.request.url.islastsegmentempty()", "org.apache.wicket.request.mapper.testmappercontext.setnextpagerendercount(int)", "org.apache.wicket.request.mapper.abstractresourcereferencemappertest$6.abstractresourcereferencemappertest$6(abstractresourcereferencemappertest)", "org.apache.wicket.request.mapper.info.pageinfo.getpageid()", "org.apache.wicket.request.handler.bookmarkablepagerequesthandler.getpageparameters()", "org.apache.wicket.request.resource.resourcereference.getvariation()", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setcachedurationtomaximum()", "org.apache.wicket.request.mapper.mountedmapper.parserequest(request)", "org.apache.wicket.request.handler.renderpagerequesthandler.getpageparameters()", "org.apache.wicket.request.mapper.basicresourcereferencemapper$1.basicresourcereferencemapper$1()", "org.apache.wicket.request.mapper.parameter.pageparameters.remove(string)", "org.apache.wicket.protocol.http.request.cryptedurlwebrequestcodingstrategytest$testcryptfactory.newcrypt()", "org.apache.wicket.request.mapper.pageinstancemappertest.pageinstancemappertest()", "org.apache.wicket.request.cycle.requesthandlerstacktest$1.respond(irequestcycle)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onbeginrequest(requestcycle)", "org.apache.wicket.request.resource.resourcereference$key.resourcereference$key(string;string;locale;string;string)", "org.apache.wicket.request.mapper.info.componentinfo.decodecomponentpath(string)", "org.apache.wicket.request.resource.resourcereferenceregistry._registerresourcereference(resourcereference)", "org.apache.wicket.request.mapper.testmappercontext.getpageidentifier()", "org.apache.wicket.request.mapper.bufferedresponsemapper.maphandler(irequesthandler)", "org.apache.wicket.request.mapper.parameter.pageparameters.set(int;object)", "org.apache.wicket.request.mapper.abstractmappertest.checkpage(irequestablepage;int)", "org.apache.wicket.request.mapper.parameter.pageparameters.pageparameters(pageparameters)", "org.apache.wicket.request.mapper.parentpathreferencerewriter.maprequest(request)", "org.apache.wicket.request.resource.writecallbacktest$1.writecallbacktest$1(writecallbacktest)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.settextencoding(string)", "org.apache.wicket.request.cycle.requestcyclelistenercollection.onendrequest(requestcycle)", "org.apache.wicket.request.mapper.resourcemappertest.createrequest(string)", "org.apache.wicket.request.url.access$000(string;charset)", "org.apache.wicket.request.handler.listenerinvocationnotallowedexception.detail(requestlistenerinterface;component;behavior)", "org.apache.wicket.request.resource.abstractresource$writecallback$1.write(byte[];int;int)", "org.apache.wicket.request.http.webresponse.setattachmentheader(string)", "org.apache.wicket.request.urlencoder.encode(string;charset)", "org.apache.wicket.request.resource.packageresource.accept(class;string)", "org.apache.wicket.request.url.parse(string)", "org.apache.wicket.request.url$queryparameter.equals(object)", "org.apache.wicket.request.mapper.parameter.pageparameters$entry.access$100(entry)", "org.apache.wicket.request.mapper.parameter.pageparameters.get(string)", "org.apache.wicket.request.url.addqueryparameter(string;object)", "org.apache.wicket.request.cycle.requesthandlerstacktest$9.detach(irequestcycle)", "org.apache.wicket.request.resource.abstractresource$resourceresponse.setlastmodified(date)", "org.apache.wicket.request.mapper.abstractbookmarkablemapper.<clinit>()", "org.apache.wicket.request.resource.resourcereference.resourcereference(class;string;locale;string;string)", "org.apache.wicket.request.requesthandlerstack.getactiverequesthandler()", "org.apache.wicket.request.resource.packageresourcereference.geturlattributes(locale;string;string)", "org.apache.wicket.request.mapper.abstractmapper.extractpageparameters(request;int;ipageparametersencoder)", "org.apache.wicket.request.handler.render.webpagerenderer.enableredirectforstatelesspage()", "org.apache.wicket.request.handler.pageandcomponentprovider.getcomponent()", "org.apache.wicket.request.mapper.basicresourcereferencemappertest$1.basicresourcereferencemappertest$1(basicresourcereferencemappertest;ipageparametersencoder;iprovider)", "org.apache.wicket.request.mapper.mountedmappertest$1.getcontext()", "org.apache.wicket.request.handler.render.webpagerenderer.webpagerenderer(renderpagerequesthandler)", "org.apache.wicket.request.resource.dynamicimageresource.newresourceresponse(attributes)", "org.apache.wicket.request.cycle.requestcyclelistenertest.access$908(requestcyclelistenertest)", "org.apache.wicket.request.resource.packageresource.exists(class;string;locale;string;string)", "org.apache.wicket.request.cycle.requesthandlerstacktest.requesthandlerstacktest()", "org.apache.wicket.request.cycle.requestcycle.processrequestanddetach()", "org.apache.wicket.request.handler.renderpagerequesthandler.detach(irequestcycle)", "org.apache.wicket.request.resource.bytearrayresource.bytearrayresource(string;byte[])", "org.apache.wicket.request.mapper.resourcemappertest$1.resourcemappertest$1(resourcemappertest;string)", "org.apache.wicket.request.resource.packageresource$packageresourceblockedexception.packageresource$packageresourceblockedexception(string)", "org.apache.wicket.request.requesthandlerstack$replacehandlerexception.fillinstacktrace()", "org.apache.wicket.request.handler.pageprovider.isnewpageinstance()", "org.apache.wicket.request.handler.listenerinterfacerequesthandler.getlistenerinterface()", "org.apache.wicket.request.urlencoder.<clinit>()"]}, "response": {"distance": 1.0, "methods": ["org.apache.wicket.response.stringresponse.write(charsequence)", "org.apache.wicket.response.filter.emptysrcattributecheckfilter.emptysrcattributecheckfilter()", "org.apache.wicket.response.bytearrayresponse.reset()", "org.apache.wicket.request.response.response()", "org.apache.wicket.response.stringresponse.stringresponse()", "org.apache.wicket.request.response.reset()", "org.apache.wicket.response.stringresponse.encodeurl(charsequence)", "org.apache.wicket.request.response.close()", "org.apache.wicket.response.nullresponse.getinstance()", "org.apache.wicket.response.nullresponse.write(charsequence)", "org.apache.wicket.response.filter.emptysrcattributecheckfilter.<clinit>()", "org.apache.wicket.response.nullresponse.nullresponse()", "org.apache.wicket.response.nullresponse.<clinit>()", "org.apache.wicket.response.bytearrayresponse.bytearrayresponse(response)", "org.apache.wicket.response.bytearrayresponse.bytearrayresponse()", "org.apache.wicket.response.bytearrayresponse.write(byte[])", "org.apache.wicket.response.bytearrayresponse.getbytes()", "org.apache.wicket.response.stringresponse.getbuffer()"]}, "feedbackmessage": {"distance": 1.0298, "methods": ["org.apache.wicket.feedback.feedbackmessage.getmessage()", "org.apache.wicket.feedback.feedbackmessage.getlevelasstring()", "org.apache.wicket.feedback.feedbackmessage.isrendered()", "org.apache.wicket.feedback.feedbackmessage.<clinit>()", "org.apache.wicket.feedback.feedbackmessage.feedbackmessage(component;serializable;int)", "org.apache.wicket.feedback.feedbackmessage.getlevel()", "org.apache.wicket.feedback.feedbackmessage.detach()", "org.apache.wicket.feedback.feedbackmessage.getreporter()", "org.apache.wicket.feedback.feedbackmessage.markrendered()", "org.apache.wicket.feedback.feedbackmessage.islevel(int)"]}, "feedbackmessages": {"distance": 0.85, "methods": ["org.apache.wicket.feedback.feedbackmessages.<clinit>()", "org.apache.wicket.feedback.feedbackmessages.info(component;string)", "org.apache.wicket.feedback.feedbackmessages.feedbackmessages()", "org.apache.wicket.feedback.feedbackmessages.hasmessagefor(component;int)", "org.apache.wicket.feedback.feedbackmessages.messages(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.clear(ifeedbackmessagefilter)", "org.apache.wicket.feedback.feedbackmessages.iterator()", "org.apache.wicket.feedback.feedbackmessages.debug(component;string)", "org.apache.wicket.feedback.feedbackmessages.size()", "org.apache.wicket.feedback.feedbackmessages.error(component;serializable)", "org.apache.wicket.feedback.feedbackmessages.haserrormessagefor(component)", "org.apache.wicket.feedback.feedbackmessages.add(feedbackmessage)", "org.apache.wicket.feedback.feedbackmessages.hasmessagefor(component)", "org.apache.wicket.feedback.feedbackmessages.messageforcomponent(component)"]}, "abstractresourcestream": {"distance": 0.9375, "methods": ["org.apache.wicket.util.resource.abstractresourcestream.setlocale(locale)", "org.apache.wicket.util.resource.abstractresourcestream.setvariation(string)", "org.apache.wicket.util.resource.abstractresourcestream.abstractresourcestream()", "org.apache.wicket.util.resource.abstractresourcestream.setstyle(string)"]}, "stringresourcestream": {"distance": 1.25, "methods": ["org.apache.wicket.util.resource.stringresourcestream.stringresourcestream(charsequence)", "org.apache.wicket.util.resource.stringresourcestream.tostring()", "org.apache.wicket.util.resource.stringresourcestream.getstring()"]}, "abstractstringresourcestream": {"distance": 0.9778, "methods": ["org.apache.wicket.util.resource.abstractstringresourcestream.setlastmodified(time)", "org.apache.wicket.util.resource.abstractstringresourcestream.getcontenttype()", "org.apache.wicket.util.resource.abstractstringresourcestream.getcharset()", "org.apache.wicket.util.resource.abstractstringresourcestream.length()", "org.apache.wicket.util.resource.abstractstringresourcestream.close()", "org.apache.wicket.util.resource.abstractstringresourcestream.abstractstringresourcestream()", "org.apache.wicket.util.resource.abstractstringresourcestream.getinputstream()", "org.apache.wicket.util.resource.abstractstringresourcestream.lastmodifiedtime()", "org.apache.wicket.util.resource.abstractstringresourcestream.abstractstringresourcestream(string)"]}, "fileuploadbase": {"distance": 1.0333, "methods": ["org.apache.wicket.util.upload.fileuploadbase.getfieldname(map)", "org.apache.wicket.util.upload.fileuploadbase.createitem(map;boolean)", "org.apache.wicket.util.upload.fileuploadbase.ismultipartcontent(requestcontext)", "org.apache.wicket.util.upload.fileuploadbase.getboundary(string)", "org.apache.wicket.util.upload.fileuploadbase.setheaderencoding(string)", "org.apache.wicket.util.upload.fileuploadbase.parseheaders(string)", "org.apache.wicket.util.upload.fileuploadbase.setsizemax(long)", "org.apache.wicket.util.upload.fileuploadbase.fileuploadbase()", "org.apache.wicket.util.upload.fileuploadbase.getfilename(map)", "org.apache.wicket.util.upload.fileuploadbase.parserequest(requestcontext)", "org.apache.wicket.util.upload.fileuploadbase.getheader(map;string)"]}, "parameterparser": {"distance": 1.0, "methods": ["org.apache.wicket.util.upload.parameterparser.parameterparser()", "org.apache.wicket.util.upload.parameterparser.parse(string;char)", "org.apache.wicket.util.upload.parameterparser.parsequotedtoken(char[])", "org.apache.wicket.util.upload.parameterparser.isoneof(char;char[])", "org.apache.wicket.util.upload.parameterparser.parse(char[];char)", "org.apache.wicket.util.upload.parameterparser.setlowercasenames(boolean)", "org.apache.wicket.util.upload.parameterparser.parsetoken(char[])", "org.apache.wicket.util.upload.parameterparser.gettoken(boolean)", "org.apache.wicket.util.upload.parameterparser.haschar()", "org.apache.wicket.util.upload.parameterparser.parse(char[];int;int;char)"]}, "multipartforminputstream": {"distance": 0.8939, "methods": ["org.apache.wicket.util.upload.multipartforminputstream.<clinit>()", "org.apache.wicket.util.upload.multipartforminputstream.findbyte(byte;int)", "org.apache.wicket.util.upload.multipartforminputstream.readbyte()", "org.apache.wicket.util.upload.multipartforminputstream.findseparator()", "org.apache.wicket.util.upload.multipartforminputstream.readheaders(int)", "org.apache.wicket.util.upload.multipartforminputstream.multipartforminputstream(inputstream;byte[])", "org.apache.wicket.util.upload.multipartforminputstream.discardbodydata()", "org.apache.wicket.util.upload.multipartforminputstream.arrayequals(byte[];byte[];int)", "org.apache.wicket.util.upload.multipartforminputstream.setheaderencoding(string)", "org.apache.wicket.util.upload.multipartforminputstream.multipartforminputstream(inputstream;byte[];int)", "org.apache.wicket.util.upload.multipartforminputstream.readboundary()", "org.apache.wicket.util.upload.multipartforminputstream.readbodydata(outputstream)", "org.apache.wicket.util.upload.multipartforminputstream.skippreamble()"]}, "listenercollection": {"distance": 0.8667, "methods": ["org.apache.wicket.util.listener.listenercollection.isallowingduplicates()", "org.apache.wicket.util.listener.listenercollection.remove(object)", "org.apache.wicket.util.listener.listenercollection.listenercollection()", "org.apache.wicket.util.listener.listenercollection.notify(inotifier)", "org.apache.wicket.util.listener.listenercollection.add(object)", "org.apache.wicket.util.listener.listenercollection.<clinit>()"]}, "bytes": {"distance": 1.1429, "methods": ["org.apache.wicket.util.lang.bytes.unitstring(double;string;locale)", "org.apache.wicket.util.lang.bytes.gigabytes(double)", "org.apache.wicket.util.lang.bytes.valueof(string)", "org.apache.wicket.util.lang.bytes.tostring(locale)", "org.apache.wicket.util.lang.bytes.valueof(string;locale)", "org.apache.wicket.util.lang.bytes.terabytes(double)", "org.apache.wicket.util.lang.bytes.kilobytes(long)", "org.apache.wicket.util.lang.bytes.kilobytes(double)", "org.apache.wicket.util.lang.bytes.bytes(long)", "org.apache.wicket.util.lang.bytes.kilobytes()", "org.apache.wicket.util.lang.bytes.<clinit>()", "org.apache.wicket.util.lang.bytes.megabytes()", "org.apache.wicket.util.lang.bytes.greaterthan(bytes)", "org.apache.wicket.util.lang.bytes.gigabytes(long)", "org.apache.wicket.util.lang.bytes.megabytes(long)", "org.apache.wicket.util.lang.bytes.bytes(double)", "org.apache.wicket.util.lang.bytes.terabytes()", "org.apache.wicket.util.lang.bytes.megabytes(double)", "org.apache.wicket.util.lang.bytes.gigabytes()", "org.apache.wicket.util.lang.bytes.tostring()", "org.apache.wicket.util.lang.bytes.bytes()"]}, "exceptions$visit": {"distance": 1.0, "methods": ["org.apache.wicket.util.lang.exceptions$visit.stop(object)", "org.apache.wicket.util.lang.exceptions$visit.access$000(visit)", "org.apache.wicket.util.lang.exceptions$visit.access$100(visit)", "org.apache.wicket.util.lang.exceptions$visit.stop()", "org.apache.wicket.util.lang.exceptions$visit.exceptions$visit()"]}, "doubleconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.doubleconverter.doubleconverter()", "org.apache.wicket.util.convert.converter.doubleconverter.<clinit>()", "org.apache.wicket.util.convert.converter.doubleconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.doubleconverter.gettargettype()"]}, "abstractconverter": {"distance": 1.3333, "methods": ["org.apache.wicket.util.convert.converter.abstractconverter.parse(format;object;locale)", "org.apache.wicket.util.convert.converter.abstractconverter.newconversionexception(string;object;locale)", "org.apache.wicket.util.convert.converter.abstractconverter.converttostring(object;locale)", "org.apache.wicket.util.convert.converter.abstractconverter.abstractconverter()"]}, "booleanconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.booleanconverter.<clinit>()", "org.apache.wicket.util.convert.converter.booleanconverter.booleanconverter()", "org.apache.wicket.util.convert.converter.booleanconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.booleanconverter.gettargettype()"]}, "floatconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.floatconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.floatconverter.gettargettype()", "org.apache.wicket.util.convert.converter.floatconverter.<clinit>()", "org.apache.wicket.util.convert.converter.floatconverter.floatconverter()"]}, "longconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.longconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.longconverter.<clinit>()", "org.apache.wicket.util.convert.converter.longconverter.gettargettype()", "org.apache.wicket.util.convert.converter.longconverter.longconverter()"]}, "dateconverter": {"distance": 1.3333, "methods": ["org.apache.wicket.util.convert.converter.dateconverter.converttostring(object;locale)", "org.apache.wicket.util.convert.converter.dateconverter.converttostring(date;locale)", "org.apache.wicket.util.convert.converter.dateconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.dateconverter.getdateformat(locale)", "org.apache.wicket.util.convert.converter.dateconverter.gettargettype()", "org.apache.wicket.util.convert.converter.dateconverter.dateconverter()"]}, "sqldateconverter": {"distance": 1.3333, "methods": ["org.apache.wicket.util.convert.converter.sqldateconverter.sqldateconverter()"]}, "sqltimestampconverter": {"distance": 0.8333, "methods": ["org.apache.wicket.util.convert.converter.sqltimestampconverter.sqltimestampconverter()"]}, "characterconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.characterconverter.characterconverter()", "org.apache.wicket.util.convert.converter.characterconverter.<clinit>()", "org.apache.wicket.util.convert.converter.characterconverter.converttoobject(string;locale)"]}, "integerconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.integerconverter.<clinit>()", "org.apache.wicket.util.convert.converter.integerconverter.gettargettype()", "org.apache.wicket.util.convert.converter.integerconverter.integerconverter()", "org.apache.wicket.util.convert.converter.integerconverter.converttoobject(string;locale)"]}, "shortconverter": {"distance": 2.0, "methods": ["org.apache.wicket.util.convert.converter.shortconverter.gettargettype()", "org.apache.wicket.util.convert.converter.shortconverter.converttoobject(string;locale)", "org.apache.wicket.util.convert.converter.shortconverter.<clinit>()", "org.apache.wicket.util.convert.converter.shortconverter.shortconverter()"]}, "group": {"distance": 1.0, "methods": ["org.apache.wicket.util.parse.metapattern.group.get(matcher)", "org.apache.wicket.util.parse.metapattern.group.group(metapattern)", "org.apache.wicket.util.parse.metapattern.group.bind(int)", "org.apache.wicket.util.parse.metapattern.group.tostring()"]}, "integergroup": {"distance": 1.0, "methods": ["org.apache.wicket.util.parse.metapattern.integergroup.getlong(matcher)", "org.apache.wicket.util.parse.metapattern.integergroup.integergroup(metapattern)", "org.apache.wicket.util.parse.metapattern.integergroup.integergroup(metapattern;int)", "org.apache.wicket.util.parse.metapattern.integergroup.integergroup()", "org.apache.wicket.util.parse.metapattern.integergroup.getlong(matcher;long)", "org.apache.wicket.util.parse.metapattern.integergroup.getint(matcher)", "org.apache.wicket.util.parse.metapattern.integergroup.getint(matcher;int)"]}, "metapattern": {"distance": 1.2325, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.getintvalue()", "org.apache.wicket.util.parse.metapattern.metapattern.matcher(charsequence;int)", "org.apache.wicket.util.parse.metapattern.optionalmetapattern.tostring()", "org.apache.wicket.util.parse.metapattern.parsers.commaseparatedvariableparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.metapattern.tostring()", "org.apache.wicket.util.parse.metapattern.parsers.listparser.listparser(metapattern;metapattern;charsequence)", "org.apache.wicket.util.parse.metapattern.integergroup.getlong(matcher)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getnamespace()", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.metapatterntest.metapatterntest()", "org.apache.wicket.util.parse.metapattern.integergroup.integergroup(metapattern)", "org.apache.wicket.util.parse.metapattern.optionalmetapattern.optionalmetapattern(metapattern[])", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.getvalue()", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(list)", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.getlongvalue()", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(metapattern[])", "org.apache.wicket.util.parse.metapattern.integergroup.integergroup(metapattern;int)", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.getvariable()", "org.apache.wicket.util.parse.metapattern.parsers.commaseparatedvariableparser.commaseparatedvariableparser(charsequence)", "org.apache.wicket.util.parse.metapattern.group.get(matcher)", "org.apache.wicket.util.parse.metapattern.integergroup.integergroup()", "org.apache.wicket.util.parse.metapattern.metapattern.matcher(charsequence)", "org.apache.wicket.util.parse.metapattern.metapattern.metapattern(string)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.matches()", "org.apache.wicket.util.parse.metapattern.optionalmetapattern.optionalmetapattern(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.variableassignmentparser(charsequence;metapattern)", "org.apache.wicket.util.parse.metapattern.integergroup.getlong(matcher;long)", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.variableassignmentparser(charsequence)", "org.apache.wicket.util.parse.metapattern.group.group(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.metapattern.bind(int)", "org.apache.wicket.util.parse.metapattern.metapattern.compile(int)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.tagnameparser(charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.setpattern(metapattern)", "org.apache.wicket.util.parse.metapattern.group.bind(int)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.metapatternparser(charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.advance(metapattern)", "org.apache.wicket.util.parse.metapattern.parsers.listparser.matches()", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.matcher()", "org.apache.wicket.util.parse.metapattern.parsers.variableassignmentparser.getkey()", "org.apache.wicket.util.parse.metapattern.parsers.metapatternparser.metapatternparser(metapattern;charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getname()", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.integervariableassignmentparser(charsequence)", "org.apache.wicket.util.parse.metapattern.integergroup.getint(matcher)", "org.apache.wicket.util.parse.metapattern.metapattern.<clinit>()", "org.apache.wicket.util.parse.metapattern.integergroup.getint(matcher;int)", "org.apache.wicket.util.parse.metapattern.parsers.listparser.getvalues()", "org.apache.wicket.util.parse.metapattern.group.tostring()"]}, "abstractcrypt": {"distance": 1.0, "methods": ["org.apache.wicket.util.crypt.abstractcrypt.setkey(string)", "org.apache.wicket.util.crypt.abstractcrypt.decrypturlsafe(string)", "org.apache.wicket.util.crypt.abstractcrypt.<clinit>()", "org.apache.wicket.util.crypt.abstractcrypt.encryptstringtobytearray(string)", "org.apache.wicket.util.crypt.abstractcrypt.encrypturlsafe(string)", "org.apache.wicket.util.crypt.abstractcrypt.abstractcrypt()", "org.apache.wicket.util.crypt.abstractcrypt.getkey()", "org.apache.wicket.util.crypt.abstractcrypt.decryptbytearray(byte[])"]}, "base64": {"distance": 0.9364, "methods": ["org.apache.wicket.util.crypt.base64.base64()", "org.apache.wicket.util.crypt.base64.encodebase64(byte[];boolean;boolean;int)", "org.apache.wicket.util.crypt.base64.base64(boolean)", "org.apache.wicket.util.crypt.base64.avail()", "org.apache.wicket.util.crypt.base64.getencodelength(byte[];int;byte[])", "org.apache.wicket.util.crypt.base64.readresults(byte[];int;int)", "org.apache.wicket.util.crypt.base64.reset()", "org.apache.wicket.util.crypt.base64.encodebase64(byte[];boolean;boolean)", "org.apache.wicket.util.crypt.base64.base64(int;byte[];boolean)", "org.apache.wicket.util.crypt.base64.isbase64(byte)", "org.apache.wicket.util.crypt.base64.decodebase64(byte[])", "org.apache.wicket.util.crypt.base64.encodebase64urlsafe(byte[])", "org.apache.wicket.util.crypt.base64.decode(byte[])", "org.apache.wicket.util.crypt.base64.encode(byte[];int;int)", "org.apache.wicket.util.crypt.base64.setinitialbuffer(byte[];int;int)", "org.apache.wicket.util.crypt.base64.decode(string)", "org.apache.wicket.util.crypt.base64.encode(byte[])", "org.apache.wicket.util.crypt.base64.isurlsafe()", "org.apache.wicket.util.crypt.base64.containsbase64byte(byte[])", "org.apache.wicket.util.crypt.base64.<clinit>()", "org.apache.wicket.util.crypt.base64.decode(byte[];int;int)", "org.apache.wicket.util.crypt.base64.resizebuffer()"]}, "handlearrayliststack": {"distance": 1.1667, "methods": ["org.apache.wicket.util.io.handlearrayliststack.pop()", "org.apache.wicket.util.io.handlearrayliststack.indexof(object)", "org.apache.wicket.util.io.handlearrayliststack.push(object)", "org.apache.wicket.util.io.handlearrayliststack.peek()", "org.apache.wicket.util.io.handlearrayliststack.handlearrayliststack()", "org.apache.wicket.util.io.handlearrayliststack.handlearrayliststack(int)"]}, "fullybufferedreader": {"distance": 0.8214, "methods": ["org.apache.wicket.util.io.fullybufferedreader.find(string;int)", "org.apache.wicket.util.io.fullybufferedreader.fullybufferedreader(reader)", "org.apache.wicket.util.io.fullybufferedreader.setpositionmarker(int)", "org.apache.wicket.util.io.fullybufferedreader.charat(int)", "org.apache.wicket.util.io.fullybufferedreader.getlinenumber()", "org.apache.wicket.util.io.fullybufferedreader.getcolumnnumber()", "org.apache.wicket.util.io.fullybufferedreader.find(char;int)", "org.apache.wicket.util.io.fullybufferedreader.getposition()", "org.apache.wicket.util.io.fullybufferedreader.setposition(int)", "org.apache.wicket.util.io.fullybufferedreader.getsubstring(int;int)", "org.apache.wicket.util.io.fullybufferedreader.getsubstring(int)", "org.apache.wicket.util.io.fullybufferedreader.countlinesto(int)", "org.apache.wicket.util.io.fullybufferedreader.find(char)", "org.apache.wicket.util.io.fullybufferedreader.size()"]}, "bytearrayoutputstream": {"distance": 0.825, "methods": ["org.apache.wicket.util.io.bytearrayoutputstream.write(byte[];int;int)", "org.apache.wicket.util.io.bytearrayoutputstream.getbuffer(int)", "org.apache.wicket.util.io.bytearrayoutputstream.write(int)", "org.apache.wicket.util.io.bytearrayoutputstream.bytearrayoutputstream(int)", "org.apache.wicket.util.io.bytearrayoutputstream.bytearrayoutputstream()", "org.apache.wicket.util.io.bytearrayoutputstream.neednewbuffer(int)", "org.apache.wicket.util.io.bytearrayoutputstream.tobytearray()", "org.apache.wicket.util.io.bytearrayoutputstream.close()"]}, "classvisitfilter": {"distance": 1.0, "methods": ["org.apache.wicket.util.visit.classvisitfilter.classvisitfilter(class)", "org.apache.wicket.util.visit.classvisitfilter.visitchildren(object)", "org.apache.wicket.util.visit.classvisitfilter.visitobject(object)"]}, "variableinterpolator": {"distance": 1.0, "methods": ["org.apache.wicket.util.string.interpolator.variableinterpolator.variableinterpolator(string;boolean)", "org.apache.wicket.util.string.interpolator.variableinterpolator.lowerpositive(int;int)", "org.apache.wicket.util.string.interpolator.variableinterpolator.variableinterpolator(string)", "org.apache.wicket.util.string.interpolator.variableinterpolator.tostring()"]}, "task": {"distance": 0.8095, "methods": ["org.apache.wicket.util.thread.task.access$302(task;boolean)", "org.apache.wicket.util.thread.task.access$200(task)", "org.apache.wicket.util.thread.task.access$100(task)", "org.apache.wicket.util.thread.task.stop()", "org.apache.wicket.util.thread.task.interrupt()", "org.apache.wicket.util.thread.task.task(string)", "org.apache.wicket.util.thread.task.getlog()", "org.apache.wicket.util.thread.task.access$000(task)", "org.apache.wicket.util.thread.task.run(duration;icode)"]}, "abstractstringlist": {"distance": 1.1111, "methods": ["org.apache.wicket.util.string.abstractstringlist.join(string)", "org.apache.wicket.util.string.abstractstringlist.tostring()", "org.apache.wicket.util.string.abstractstringlist.join(int;int;string)", "org.apache.wicket.util.string.abstractstringlist.join()", "org.apache.wicket.util.string.abstractstringlist.abstractstringlist()"]}, "folder": {"distance": 1.1111, "methods": ["org.apache.wicket.util.file.folder.folder(string)"]}, "file": {"distance": 1.0714, "methods": ["org.apache.wicket.util.file.webxmlfiletest.filterorservlet(boolean)", "org.apache.wicket.util.file.webapplicationpath.webapplicationpath(servletcontext)", "org.apache.wicket.util.file.filecleaner$tracker.filecleaner$tracker(file;object;referencequeue)", "org.apache.wicket.util.file.filecleaner$1.run()", "org.apache.wicket.util.file.file.file(file)", "org.apache.wicket.util.file.path.add(folder)", "org.apache.wicket.util.file.webapplicationpath.tostring()", "org.apache.wicket.util.file.filecleaner.<clinit>()", "org.apache.wicket.util.file.path.find(class;string)", "org.apache.wicket.util.file.webxmlfile.getfilterpath(string;string;node)", "org.apache.wicket.util.file.filecleaner$tracker.filecleaner$tracker(string;object;referencequeue)", "org.apache.wicket.util.file.webxmlfile.getfilterpath(string;string;string;nodelist)", "org.apache.wicket.util.file.webapplicationpath.<clinit>()", "org.apache.wicket.util.file.filecleaner$1.filecleaner$1(string)", "org.apache.wicket.util.file.filecleaner.access$000()", "org.apache.wicket.util.file.webxmlfiletest.webxmlfiletest()", "org.apache.wicket.util.file.path.path()", "org.apache.wicket.util.file.file.lastmodifiedtime()", "org.apache.wicket.util.file.webxmlfile.webxmlfile()", "org.apache.wicket.util.file.webxmlfiletest.getwebxml(string;string)", "org.apache.wicket.util.file.file.file(file;string)", "org.apache.wicket.util.file.folder.folder(string)", "org.apache.wicket.util.file.webxmlfile.<clinit>()", "org.apache.wicket.util.file.webapplicationpath.find(class;string)", "org.apache.wicket.util.file.file.file(string)", "org.apache.wicket.util.file.webxmlfiletest.test_servlet()", "org.apache.wicket.util.file.filecleaner.destroy()", "org.apache.wicket.util.file.webxmlfile.getfilterpath(boolean;string;inputstream)", "org.apache.wicket.util.file.path.path(folder)", "org.apache.wicket.util.file.filecleaner.track(file;object)"]}, "tagnameparser": {"distance": 1.3333, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getnamespace()", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.tagnameparser(charsequence)", "org.apache.wicket.util.parse.metapattern.parsers.tagnameparser.getname()"]}, "integervariableassignmentparser": {"distance": 1.0, "methods": ["org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.getintvalue()", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.<clinit>()", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.getlongvalue()", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.getvariable()", "org.apache.wicket.util.parse.metapattern.parsers.integervariableassignmentparser.integervariableassignmentparser(charsequence)"]}, "conversionexception": {"distance": 0.9423, "methods": ["org.apache.wicket.util.convert.conversionexception.setsourcevalue(object)", "org.apache.wicket.util.convert.conversionexception.setformat(format)", "org.apache.wicket.util.convert.conversionexception.setconverter(iconverter)", "org.apache.wicket.util.convert.conversionexception.conversionexception(string;throwable)", "org.apache.wicket.util.convert.conversionexception.setlocale(locale)", "org.apache.wicket.util.convert.conversionexception.conversionexception(string)", "org.apache.wicket.util.convert.conversionexception.settargettype(class)"]}}